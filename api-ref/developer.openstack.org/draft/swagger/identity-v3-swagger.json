{
  "basePath": "/", 
  "consumes": [
    "application/json"
  ], 
  "definitions": {
    "authenticatePasswordExplicitUnscoped": {
      "example": {
        "application/json": {
          "auth": {
            "identity": {
              "methods": [
                "password"
              ], 
              "password": {
                "user": {
                  "id": "ee4dfb6e5540447cb3741905149d9b6e", 
                  "password": "devstacker"
                }
              }
            }, 
            "scope": "unscoped"
          }
        }
      }, 
      "properties": {
        "auth": {
          "description": "An ``auth`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the user.\n\nRequired if you do not specify the user name.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "methods": {
          "description": "The authentication method. For password authentication, specify\n``password``.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The user name.\n\nRequired if you do not specify the ID of the user.\n\nIf you specify the user name, you must also specify the domain, by\nID or name.", 
          "format": "", 
          "type": "string"
        }, 
        "password": {
          "description": "The user password.", 
          "format": "", 
          "type": "string"
        }, 
        "scope": {
          "description": "The authorization scope.\n\n(Since v3.4) Specify ``unscoped`` to make an explicit unscoped\ntoken request, which returns an unscoped response without any\nauthorization. This request behaves the same as a token request\nwith no scope where the user has no default project defined.\n\nIf you do not make an explicit ``unscoped`` token request and your\nrole has a default project, the response might return a project-\nscoped token. If a default project is not defined, a token is\nissued without an explicit scope of authorization, which is the\nsame as asking for an explicit unscoped token.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "auth", 
        "identity", 
        "methods", 
        "password", 
        "user"
      ], 
      "type": "object"
    }, 
    "authenticatePasswordExplicitUnscoped_201": {
      "properties": {
        "audit_ids": {
          "description": "A list of one or two audit IDs. An audit ID is a unique, randomly\ngenerated, URL-safe string that you can use to track a token.\n\nThe first audit ID is the current audit ID for the token.\n\nThe second audit ID is present for only re-scoped tokens and is the\naudit ID from the token before it was re-scoped. A re-scoped token\nis one that was exchanged for another token of the same or\ndifferent scope.\n\nYou can use these audit IDs to track the use of a token or chain of\ntokens across multiple requests and endpoints without exposing the\ntoken ID to non-privileged users.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "domain": {
          "description": "A ``domain`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "expires_at": {
          "description": "The date and time when the token expires.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nA ``null`` value indicates that the token never expires.", 
          "format": "", 
          "type": "string"
        }, 
        "extras": {
          "description": "A set of metadata key and value pairs, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the user.", 
          "format": "", 
          "type": "string"
        }, 
        "issued_at": {
          "description": "The date and time when the token was issued.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.", 
          "format": "", 
          "type": "string"
        }, 
        "methods": {
          "description": "The authentication method, which is ``password``, ``token``, or\nboth methods.\n\nIndicates the accumulated set of authentication methods that were\nused to obtain the token. For example, if the token was obtained by\npassword authentication, it contains ``password``. Later, if the\ntoken is exchanged by using the token authentication method one or\nmore times, the subsequently created tokens contain both\n``password`` and ``token`` in their ``methods`` attribute.\n\nUnlike multi-factor authentication, the ``methods`` attribute\nmerely indicates the methods that were used to authenticate the\nuser in exchange for a token. The client is responsible for\ndetermining the total number of authentication factors.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The user name.", 
          "format": "", 
          "type": "string"
        }, 
        "roles": {
          "description": "A ``roles`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "token": {
          "description": "A ``token`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "token", 
        "methods", 
        "roles", 
        "id", 
        "name", 
        "expires_at", 
        "extras", 
        "user", 
        "domain", 
        "audit_ids", 
        "issued_at"
      ], 
      "type": "object"
    }, 
    "authenticatePasswordScoped": {
      "example": {
        "application/json": {
          "auth": {
            "identity": {
              "methods": [
                "password"
              ], 
              "password": {
                "user": {
                  "id": "ee4dfb6e5540447cb3741905149d9b6e", 
                  "password": "devstacker"
                }
              }
            }, 
            "scope": {
              "project": {
                "id": "a6944d763bf64ee6a275f1263fae0352"
              }
            }
          }
        }
      }, 
      "properties": {
        "auth": {
          "description": "An ``auth`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the user.\n\nRequired if you do not specify the user name.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "methods": {
          "description": "The authentication method. For password authentication, specify\n``password``.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The user name.\n\nRequired if you do not specify the ID of the user.\n\nIf you specify the user name, you must also specify the domain, by\nID or name.", 
          "format": "", 
          "type": "string"
        }, 
        "password": {
          "description": "The user password.", 
          "format": "", 
          "type": "string"
        }, 
        "scope": {
          "description": "The authorization scope.\n\n- Specify ``project`` to scope to a project, by ID or name. If you\n  specify the project by name, you must also specify the project\n  domain to uniquely identify the project. Because a project can\n  have the same name as its owning domain, the scope is determined,\n  as follows:\n\n  - If the project name is truly unique, the token is scoped to the\n    project.\n\n  - If a name clash exists between a project acting as a domain and a\n    regular project within that domain, the token is scoped to the\n    regular project.\n\n  - In a name-clash situation, if the user wants the token scoped to\n    the project acting as the domain, you must either specify use\n    the project ID to specify the scope or rename either the\n    project acting as a domain or the regular project.\n\n  Alternatively, you can use a domain name to uniquely identify the\n  project.\n\n- Specify ``domain`` to scope to a domain, by ID or name with\n  equivalent results to project scoping. The catalog returned from\n  a domain-scoped request contains all endpoints of a project-\n  scoped catalog, excluding ones that require a project ID as part\n  of their URL.\n\nYou cannot simultaneously scope a token to a project and domain.", 
          "format": "", 
          "type": "object"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "auth", 
        "identity", 
        "methods", 
        "password", 
        "user"
      ], 
      "type": "object"
    }, 
    "authenticatePasswordScoped_201": {
      "properties": {
        "audit_ids": {
          "description": "A list of one or two audit IDs. An audit ID is a unique, randomly\ngenerated, URL-safe string that you can use to track a token.\n\nThe first audit ID is the current audit ID for the token.\n\nThe second audit ID is present for only re-scoped tokens and is the\naudit ID from the token before it was re-scoped. A re-scoped token\nis one that was exchanged for another token of the same or\ndifferent scope.\n\nYou can use these audit IDs to track the use of a token or chain of\ntokens across multiple requests and endpoints without exposing the\ntoken ID to non-privileged users.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "catalog": {
          "description": "A ``catalog`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "domain": {
          "description": "A ``domain`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "endpoints": {
          "description": "An ``endpoints`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "expires_at": {
          "description": "The date and time when the token expires.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nA ``null`` value indicates that the token never expires.", 
          "format": "", 
          "type": "string"
        }, 
        "extras": {
          "description": "A set of metadata key and value pairs, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the user.", 
          "format": "", 
          "type": "string"
        }, 
        "interface": {
          "description": "The interface type, which describes the visibility of the endpoint.\n\nValue is:\n\n- ``public``. Visible by end users on a publicly available network\n  interface.\n\n- ``internal``. Visible by end users on an unmetered internal\n  network interface.\n\n- ``admin``. Visible by administrative users on a secure network\n  interface.", 
          "format": "", 
          "type": "string"
        }, 
        "issued_at": {
          "description": "The date and time when the token was issued.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.", 
          "format": "", 
          "type": "string"
        }, 
        "methods": {
          "description": "The authentication method, which is ``password``, ``token``, or\nboth methods.\n\nIndicates the accumulated set of authentication methods that were\nused to obtain the token. For example, if the token was obtained by\npassword authentication, it contains ``password``. Later, if the\ntoken is exchanged by using the token authentication method one or\nmore times, the subsequently created tokens contain both\n``password`` and ``token`` in their ``methods`` attribute.\n\nUnlike multi-factor authentication, the ``methods`` attribute\nmerely indicates the methods that were used to authenticate the\nuser in exchange for a token. The client is responsible for\ndetermining the total number of authentication factors.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The user name.", 
          "format": "", 
          "type": "string"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "region": {
          "description": "(Deprecated in v3.2) The geographic location of the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "region_id": {
          "description": "(Since v3.2) The ID of the region that contains the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "roles": {
          "description": "A ``roles`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "token": {
          "description": "A ``token`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "type": {
          "description": "The endpoint type.", 
          "format": "", 
          "type": "string"
        }, 
        "url": {
          "description": "The endpoint URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "token", 
        "methods", 
        "roles", 
        "id", 
        "name", 
        "project", 
        "domain", 
        "catalog", 
        "endpoints", 
        "region_id", 
        "url", 
        "region", 
        "interface", 
        "type", 
        "expires_at", 
        "extras", 
        "user", 
        "audit_ids", 
        "issued_at"
      ], 
      "type": "object"
    }, 
    "authenticatePasswordUnscoped": {
      "example": {
        "application/json": {
          "auth": {
            "identity": {
              "methods": [
                "password"
              ], 
              "password": {
                "user": {
                  "id": "423f19a4ac1e4f48bbb4180756e6eb6c", 
                  "password": "devstacker"
                }
              }
            }
          }
        }
      }, 
      "properties": {
        "auth": {
          "description": "An ``auth`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "domain": {
          "description": "A ``domain`` object. Required if you specify a user name.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the domain.\n\nIf you specify a user name, you must specify either a domain ID or\ndomain name.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "methods": {
          "description": "The authentication method. For password authentication, specify\n``password``.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of the domain.\n\nIf you specify a user name, you must specify either a domain ID or\ndomain name.", 
          "format": "", 
          "type": "string"
        }, 
        "password": {
          "description": "The password for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "auth", 
        "identity", 
        "methods", 
        "password", 
        "user"
      ], 
      "type": "object"
    }, 
    "authenticatePasswordUnscoped_201": {
      "properties": {
        "audit_ids": {
          "description": "A list of one or two audit IDs. An audit ID is a unique, randomly\ngenerated, URL-safe string that you can use to track a token.\n\nThe first audit ID is the current audit ID for the token.\n\nThe second audit ID is present for only re-scoped tokens and is the\naudit ID from the token before it was re-scoped. A re-scoped token\nis one that was exchanged for another token of the same or\ndifferent scope.\n\nYou can use these audit IDs to track the use of a token or chain of\ntokens across multiple requests and endpoints without exposing the\ntoken ID to non-privileged users.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "domain": {
          "description": "A ``domain`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "expires_at": {
          "description": "The date and time when the token expires.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nA ``null`` value indicates that the token never expires.", 
          "format": "", 
          "type": "string"
        }, 
        "extras": {
          "description": "A set of metadata key and value pairs, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the user.", 
          "format": "", 
          "type": "string"
        }, 
        "issued_at": {
          "description": "The date and time when the token was issued.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.", 
          "format": "", 
          "type": "string"
        }, 
        "methods": {
          "description": "The authentication method, which is ``password``, ``token``, or\nboth methods.\n\nIndicates the accumulated set of authentication methods that were\nused to obtain the token. For example, if the token was obtained by\npassword authentication, it contains ``password``. Later, if the\ntoken is exchanged by using the token authentication method one or\nmore times, the subsequently created tokens contain both\n``password`` and ``token`` in their ``methods`` attribute.\n\nUnlike multi-factor authentication, the ``methods`` attribute\nmerely indicates the methods that were used to authenticate the\nuser in exchange for a token. The client is responsible for\ndetermining the total number of authentication factors.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The user name.", 
          "format": "", 
          "type": "string"
        }, 
        "token": {
          "description": "A ``token`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "token", 
        "methods", 
        "expires_at", 
        "extras", 
        "user", 
        "domain", 
        "id", 
        "name", 
        "audit_ids", 
        "issued_at"
      ], 
      "type": "object"
    }, 
    "authenticateTokenScoped": {
      "example": {
        "application/json": {
          "auth": {
            "identity": {
              "methods": [
                "token"
              ], 
              "token": {
                "id": "'$OS_TOKEN'"
              }
            }, 
            "scope": {
              "project": {
                "id": "5b50efd009b540559104ee3c03bbb2b7"
              }
            }
          }
        }
      }, 
      "properties": {
        "audit_ids": {
          "description": "A list of one or two audit IDs. An audit ID is a unique, randomly\ngenerated, URL-safe string that you can use to track a token.\n\nThe first audit ID is the current audit ID for the token.\n\nThe second audit ID is present for only re-scoped tokens and is the\naudit ID from the token before it was re-scoped. A re-scoped token\nis one that was exchanged for another token of the same or\ndifferent scope.\n\nYou can use these audit IDs to track the use of a token or chain of\ntokens across multiple requests and endpoints without exposing the\ntoken ID to non-privileged users.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "auth": {
          "description": "An ``auth`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "A token ID.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "methods": {
          "description": "The authentication method. For token authentication, specify\n``token``.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "scope": {
          "description": "The authorization scope.\n\n- Specify ``project`` to scope to a project, by ID or name. If you\n  specify the project by name, you must also specify the project\n  domain to uniquely identify the project. Because a project can\n  have the same name as its owning domain, the scope is determined,\n  as follows:\n\n  - If the project name is truly unique, the token is scoped to the\n    project.\n\n  - If a name clash exists between a project acting as a domain and a\n    regular project within that domain, the token is scoped to the\n    regular project.\n\n  - In a name-clash situation, if the user wants the token scoped to\n    the project acting as the domain, you must either specify use\n    the project ID to specify the scope or rename either the\n    project acting as a domain or the regular project.\n\n  Alternatively, you can use a domain name to uniquely identify the\n  project.\n\n- Specify ``domain`` to scope to a domain, by ID or name with\n  equivalent results to project scoping. The catalog returned from\n  a domain-scoped request contains all endpoints of a project-\n  scoped catalog, excluding ones that require a project ID as part\n  of their URL.\n\nYou cannot simultaneously scope a token to a project and domain.", 
          "format": "", 
          "type": "object"
        }, 
        "token": {
          "description": "A ``token`` object. The token authentication method is used. This\nmethod is typically used in combination with a request to change\nauthorization scope.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "auth", 
        "identity", 
        "methods", 
        "token", 
        "audit_ids"
      ], 
      "type": "object"
    }, 
    "authenticateTokenUnscoped": {
      "example": {
        "application/json": {
          "auth": {
            "identity": {
              "methods": [
                "token"
              ], 
              "token": {
                "id": "'$OS_TOKEN'"
              }
            }
          }
        }
      }, 
      "properties": {
        "auth": {
          "description": "An ``auth`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "A token ID.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "methods": {
          "description": "The authentication method. For token authentication, specify\n``token``.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "token": {
          "description": "A ``token`` object. The token authentication method is used. This\nmethod is typically used in combination with a request to change\nauthorization scope.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "auth", 
        "identity", 
        "methods", 
        "token"
      ], 
      "type": "object"
    }, 
    "changeUserPassword": {
      "example": {
        "application/json": {
          "user": {
            "original_password": "secretsecret", 
            "password": "old_secretsecret"
          }
        }
      }, 
      "properties": {
        "original_password": {
          "description": "The original password for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "password": {
          "description": "The new password for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "user", 
        "password", 
        "original_password"
      ], 
      "type": "object"
    }, 
    "createCredential": {
      "example": {
        "application/json": {
          "credential": {
            "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
            "project_id": "731fc6f265cd486d900f16e84c5cb594", 
            "type": "ec2", 
            "user_id": "bb5476fd12884539b41d5a88f838d773"
          }
        }
      }, 
      "properties": {
        "blob": {
          "description": "The credential itself, as a serialized blob.", 
          "format": "", 
          "type": "string"
        }, 
        "credential": {
          "description": "A ``credential`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The credential type, such as ``ec2`` or ``cert``. The\nimplementation determines the list of supported types.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "credential", 
        "blob", 
        "project_id", 
        "type", 
        "user_id"
      ], 
      "type": "object"
    }, 
    "createCredential_201": {
      "properties": {
        "blob": {
          "description": "The credential itself, as a serialized blob.", 
          "format": "", 
          "type": "string"
        }, 
        "credential": {
          "description": "A ``credential`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the credential.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``credential`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The credential type, such as ``ec2`` or ``cert``. The\nimplementation determines the list of supported types.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "credential", 
        "user_id", 
        "links", 
        "blob", 
        "project_id", 
        "type", 
        "id"
      ], 
      "type": "object"
    }, 
    "createDomain": {
      "example": {
        "application/json": {
          "domain": {
            "description": "Domain description", 
            "enabled": true, 
            "name": "myDomain"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The domain description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain": {
          "description": "A ``domain`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "enabled": {
          "description": "Enables or disables the domain.\n\nUsers can authorize against an enabled domain and any of its\nprojects. Users that are owned by an enabled domain can\nauthenticate and receive additional authorization.\n\nUsers cannot authorize against a disabled domain or any of its\nprojects. Users that are owned by a disabled domain cannot\nauthenticate or receive additional authorization. All tokens that\nare authorized for a disabled domain or its projects become no\nlonger valid. If you reenable the domain, these tokens are not re-\nenabled.\n\nTo enable the domain, set to ``true``. To disable the domain, set\nto ``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The domain name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "domain", 
        "name"
      ], 
      "type": "object"
    }, 
    "createDomain_201": {
      "properties": {
        "description": {
          "description": "The domain description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain": {
          "description": "A ``domain`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "enabled": {
          "description": "Indicates whether the domain is enabled or disabled.\n\nIf set to ``true``, the domain is enabled. Users can authorize\nagainst an enabled domain and any of its projects. Users that are\nowned by an enabled domain can authenticate and receive additional\nauthorization.\n\nIf set to ``false``, the domain is disabled. Users cannot authorize\nagainst a disabled domain or any of its projects. Users that are\nowned by a disabled domain cannot authenticate or receive\nadditional authorization. All tokens that are authorized for a\ndisabled domain or its projects become no longer valid. If you\nreenable the domain, these tokens are not re-enabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The domain ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``domain`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The domain name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "domain", 
        "description", 
        "enabled", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "createEndpoint": {
      "example": {
        "application/json": {
          "endpoint": {
            "interface": "public", 
            "name": "ec2-2", 
            "region_id": "RegionOne", 
            "service_id": "9242e05f0c23467bbd1cf1f7a6e5e596", 
            "url": "http://identity:35357/v3/endpoints/828384"
          }
        }
      }, 
      "properties": {
        "enabled": {
          "description": "Defines whether the endpoint appears in the service catalog:\n\n- ``false``. The endpoint does not appear in the service catalog.\n\n- ``true``. The endpoint appears in the service catalog.\n\nDefault is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "interface": {
          "description": "The interface type, which describes the visibility of the endpoint.\n\nA valid value is:\n\n- ``public``. Visible by end users on a publicly available network\n  interface.\n\n- ``internal``. Visible by end users on an unmetered internal\n  network interface.\n\n- ``admin``. Visible by administrative users on a secure network\n  interface.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The endpoint name.", 
          "format": "", 
          "type": "string"
        }, 
        "region_id": {
          "description": "(Since v3.2) The ID of the region that contains the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "service_id": {
          "description": "The UUID of the service to which the endpoint belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "url": {
          "description": "The endpoint URL.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "endpoint", 
        "interface", 
        "name", 
        "url", 
        "service_id"
      ], 
      "type": "object"
    }, 
    "createEndpoint_201": {
      "properties": {
        "enabled": {
          "description": "Indicates whether the endpoint appears in the service catalog:\n\n- ``false``. The endpoint does not appear in the service catalog.\n\n- ``true``. The endpoint appears in the service catalog.", 
          "format": "", 
          "type": "boolean"
        }, 
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The endpoint UUID.", 
          "format": "", 
          "type": "string"
        }, 
        "interface": {
          "description": "The interface type, which describes the visibility of the endpoint.\n\nValue is:\n\n- ``public``. Visible by end users on a publicly available network\n  interface.\n\n- ``internal``. Visible by end users on an unmetered internal\n  network interface.\n\n- ``admin``. Visible by administrative users on a secure network\n  interface.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``endpoint`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The endpoint name.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "(Deprecated in v3.2) The geographic location of the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "region_id": {
          "description": "(Since v3.2) The ID of the region that contains the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "service_id": {
          "description": "The UUID of the service to which the endpoint belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "url": {
          "description": "The endpoint URL.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "endpoint", 
        "region_id", 
        "links", 
        "url", 
        "region", 
        "enabled", 
        "interface", 
        "service_id", 
        "id", 
        "name"
      ], 
      "type": "object"
    }, 
    "createGroup": {
      "example": {
        "application/json": {
          "group": {
            "description": "Contract developers", 
            "domain_id": "default", 
            "name": "Contract developers"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The group description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain that owns the group.\n\nIf you omit the domain ID, defaults to the domain to which the\nclient token is scoped.", 
          "format": "", 
          "type": "string"
        }, 
        "group": {
          "description": "A ``group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The group name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "group", 
        "name"
      ], 
      "type": "object"
    }, 
    "createGroup_201": {
      "properties": {
        "description": {
          "description": "The group description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the group.", 
          "format": "", 
          "type": "string"
        }, 
        "group": {
          "description": "A ``group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID for the group.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``group`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the group.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "group", 
        "domain_id", 
        "description", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "createPolicy": {
      "example": {
        "application/json": {
          "policy": {
            "blob": "{'foobar_user': 'role:compute-user'}", 
            "project_id": "0426ac1e48f642ef9544c2251e07e261", 
            "type": "application/json", 
            "user_id": "0ffd248c55b443eaac5253b4e9cbf9b5"
          }
        }
      }, 
      "properties": {
        "blob": {
          "description": "The policy rule set itself, as a serialized blob.", 
          "format": "", 
          "type": "string"
        }, 
        "policy": {
          "description": "A ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy", 
        "blob", 
        "type"
      ], 
      "type": "object"
    }, 
    "createPolicy_201": {
      "properties": {
        "blob": {
          "description": "The policy rule set itself, as a serialized blob.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The ID of the policy.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``policy`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "policy": {
          "description": "A ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy", 
        "blob", 
        "id", 
        "links", 
        "type"
      ], 
      "type": "object"
    }, 
    "createProject": {
      "example": {
        "application/json": {
          "project": {
            "description": "My new project", 
            "domain_id": "default", 
            "enabled": true, 
            "is_domain": true, 
            "name": "myNewProject"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.\n\nIf you omit the domain ID, default is the domain to which your\ntoken is scoped.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Enables or disables the project.\n\nUsers can authorize against an enabled project.\n\nUsers cannot authorize against a disabled project. All tokens that\nare authorized for a disabled project become no longer valid. If\nyou reenable the project, these tokens are not re-enabled.\n\nTo enable the project, set to ``true``. To disable the project, set\nto ``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "is_domain": {
          "description": "(Since v3.6) Indicates whether the project also acts as a domain.\n\nSet to ``true`` to define this project as both a project and\ndomain. As a domain, the project provides a name space in which you\ncan create users, groups, and other projects.\n\nSet to ``false`` to define this project as a regular project that\ncontains only resources.\n\nDefault is ``false``.\n\nYou cannot update this parameter after you create the project.", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The project name, which must be unique within the owning domain.\nThe project can have the same name as its domain.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_id": {
          "description": "(Since v3.4) The ID of the parent project.\n\nIf you omit the parent project ID, the project is a top-level\nproject.", 
          "format": "", 
          "type": "string"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "project", 
        "name"
      ], 
      "type": "object"
    }, 
    "createProject_201": {
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If set to ``true``, project is enabled. If set to ``false``,\nproject is disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "is_domain": {
          "description": "(Since v3.6) Indicates whether the project also acts as a domain.\n\nIf set to ``true``, this project acts as both a project and domain.\nAs a domain, the project provides a name space in which you can\ncreate users, groups, and other projects.\n\nOtherwise, this field does not appear in the response and this\nproject behaves as a regular project that contains only resources.", 
          "format": "", 
          "type": "boolean"
        }, 
        "links": {
          "description": "The links for the ``project`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The project name. The project can have the same name as its domain.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_id": {
          "description": "(Since v3.4) The ID of the parent project. If ``null``, the project\nis a top-level project.", 
          "format": "", 
          "type": "string"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "project", 
        "description", 
        "links", 
        "enabled", 
        "id", 
        "parent_id", 
        "domain_id", 
        "name"
      ], 
      "type": "object"
    }, 
    "createRegion": {
      "example": {
        "application/json": {
          "region": {
            "description": "My subregion", 
            "id": "RegionOneSubRegion", 
            "parent_region_id": "RegionOne"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "A user-defined region ID.\n\nIf you include characters in the region ID that are not allowed in\na URI, you must URL-encode the ID. If you omit an ID, the API\nassigns an ID to the region.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "To make this region a child of another region, set this parameter\nto the ID of the parent region.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "A ``region`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "region"
      ], 
      "type": "object"
    }, 
    "createRegion_201": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``region`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "parent_region_id": {
          "description": "If the region is a child of another region, the ID for the parent\nregion. Otherwise, this value is ``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "A ``region`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "region", 
        "description", 
        "id", 
        "links", 
        "parent_region_id"
      ], 
      "type": "object"
    }, 
    "createRole": {
      "example": {
        "application/json": {
          "role": {
            "name": "developer"
          }
        }
      }, 
      "properties": {
        "name": {
          "description": "The role name.", 
          "format": "", 
          "type": "string"
        }, 
        "role": {
          "description": "A ``role`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "role", 
        "name"
      ], 
      "type": "object"
    }, 
    "createRole_201": {
      "properties": {
        "id": {
          "description": "The role ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``role`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The role name.", 
          "format": "", 
          "type": "string"
        }, 
        "role": {
          "description": "A ``role`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "role", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "createService": {
      "example": {
        "application/json": {
          "service": {
            "description": "Compute service 2", 
            "name": "compute2", 
            "type": "compute"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The service description.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Defines whether the service and its endpoints appear in the service\ncatalog:\n\n- ``false``. The service and its endpoints do not appear in the\n  service catalog.\n\n- ``true``. The service and its endpoints appear in the service\n  catalog.\n\nDefault is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "type": "string"
        }, 
        "service": {
          "description": "A ``service`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "service_id": {
          "description": "The service ID.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The service type, which describes the API implemented by the\nservice.\n\nA valid value is ``compute``, ``ec2``, ``identity``, ``image``,\n``network``, or ``volume``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "service", 
        "type"
      ], 
      "type": "object"
    }, 
    "createService_201": {
      "properties": {
        "description": {
          "description": "The service description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The ID of the service.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``service`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "type": "string"
        }, 
        "service": {
          "description": "A ``service`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "type": {
          "description": "The service type, which describes the API implemented by the\nservice. Value is ``compute``, ``ec2``, ``identity``, ``image``,\n``network``, or ``volume``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "links", 
        "service", 
        "description", 
        "id", 
        "name", 
        "type"
      ], 
      "type": "object"
    }, 
    "createUser": {
      "example": {
        "application/json": {
          "user": {
            "default_project_id": "263fd9", 
            "description": "James Doe user", 
            "domain_id": "1789d1", 
            "email": "jdoe@example.com", 
            "enabled": true, 
            "name": "James Doe", 
            "password": "secretsecret"
          }
        }
      }, 
      "properties": {
        "default_project_id": {
          "description": "The ID of the default project for the user.\n\nSetting this attribute does not grant any actual authorization on\nthe project, and is merely provided for convenience. Therefore, the\nreferenced project does not need to exist within the user domain.\n\n(Since v3.1) If the user does not have authorization to their\ndefault project, the default project is ignored at token creation.\n\n(Since v3.1) Additionally, if your default project is not valid, a\ntoken is issued without an explicit scope of authorization.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The user description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Enables or disables the user.\n\nAn enabled user can authenticate and receive authorization.\n\nA disabled user cannot authenticate or receive authorization.\nAdditionally, all tokens that the user holds become no longer\nvalid. If you reenable this user, pre-existing tokens do not become\nvalid.\n\nTo enable the user, set to ``true``. To disable the user, set to\n``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The user name, which must be unique within the owning domain.", 
          "format": "", 
          "type": "string"
        }, 
        "password": {
          "description": "The user password.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "user", 
        "name", 
        "password"
      ], 
      "type": "object"
    }, 
    "createUser_201": {
      "properties": {
        "default_project_id": {
          "description": "The ID of the default project for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The user description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If the user is enabled, this value is ``true``. If the user is\ndisabled, this value is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``user`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The user name. Must be unique within the domain.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "user", 
        "default_project_id", 
        "description", 
        "domain_id", 
        "email", 
        "enabled", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "enableProject": {
      "example": {
        "application/json": {
          "project": {
            "enabled": true
          }
        }
      }, 
      "properties": {
        "enabled": {
          "description": "Enables or disables the project and its subtree.\n\nUsers can authorize against an enabled project.\n\nUsers cannot authorize against a disabled project. All tokens that\nare authorized for a disabled project become no longer valid. If\nyou reenable the project, these tokens are not re-enabled.\n\nTo enable the project and its subtree, set to ``true``. To disable\nthe project and its subtree, set to ``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "project", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "enableProject_200": {
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If set to ``true``, project is enabled. If set to ``false``,\nproject is disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "is_domain": {
          "description": "(Since v3.6) Indicates whether the project also acts as a domain.\n\nIf set to ``true``, this project acts as both a project and domain.\nAs a domain, the project provides a name space in which you can\ncreate users, groups, and other projects.\n\nOtherwise, this field does not appear in the response and this\nproject behaves as a regular project that contains only resources.", 
          "format": "", 
          "type": "boolean"
        }, 
        "links": {
          "description": "The links for the ``project`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The project name. The project can have the same name as its domain.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_id": {
          "description": "(Since v3.4) The ID of the parent project. If ``null``, the project\nis a top-level project.", 
          "format": "", 
          "type": "string"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "project", 
        "description", 
        "links", 
        "enabled", 
        "id", 
        "parent_id", 
        "domain_id", 
        "name"
      ], 
      "type": "object"
    }, 
    "listCredentials_200": {
      "properties": {
        "blob": {
          "description": "The credential itself, as a serialized blob.", 
          "format": "", 
          "type": "string"
        }, 
        "credentials": {
          "description": "A ``credentials`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the credential.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``credentials`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The credential type, such as ``ec2`` or ``cert``. The\nimplementation determines the list of supported types.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "credentials", 
        "user_id", 
        "links", 
        "blob", 
        "project_id", 
        "type", 
        "id"
      ], 
      "type": "object"
    }, 
    "listDomainUserRoles_200": {
      "properties": {
        "id": {
          "description": "The role ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``roles`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The role name.", 
          "format": "", 
          "type": "string"
        }, 
        "roles": {
          "description": "A ``roles`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "roles", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "listDomains_200": {
      "properties": {
        "description": {
          "description": "The domain description.", 
          "format": "", 
          "type": "string"
        }, 
        "domains": {
          "description": "A ``domains`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "enabled": {
          "description": "Indicates whether the domain is enabled or disabled.\n\nIf set to ``true``, the domain is enabled. Users can authorize\nagainst an enabled domain and any of its projects. Users that are\nowned by an enabled domain can authenticate and receive additional\nauthorization.\n\nIf set to ``false``, the domain is disabled. Users cannot authorize\nagainst a disabled domain or any of its projects. Users that are\nowned by a disabled domain cannot authenticate or receive\nadditional authorization. All tokens that are authorized for a\ndisabled domain or its projects become no longer valid. If you\nreenable the domain, these tokens are not re-enabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The domain ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``domains`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The domain name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "domains", 
        "description", 
        "enabled", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "listEndpoints_200": {
      "properties": {
        "enabled": {
          "description": "Indicates whether the endpoint appears in the service catalog:\n\n- ``false``. The endpoint does not appear in the service catalog.\n\n- ``true``. The endpoint appears in the service catalog.", 
          "format": "", 
          "type": "boolean"
        }, 
        "endpoints": {
          "description": "An ``endpoints`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The endpoint UUID.", 
          "format": "", 
          "type": "string"
        }, 
        "interface": {
          "description": "The interface type, which describes the visibility of the endpoint.\n\nValue is:\n\n- ``public``. Visible by end users on a publicly available network\n  interface.\n\n- ``internal``. Visible by end users on an unmetered internal\n  network interface.\n\n- ``admin``. Visible by administrative users on a secure network\n  interface.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``endpoints`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "region": {
          "description": "(Deprecated in v3.2) The geographic location of the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "region_id": {
          "description": "(Since v3.2) The ID of the region that contains the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "service_id": {
          "description": "The UUID of the service to which the endpoint belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "url": {
          "description": "The endpoint URL.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "endpoints", 
        "enabled", 
        "id", 
        "interface", 
        "links", 
        "region", 
        "region_id", 
        "service_id", 
        "url"
      ], 
      "type": "object"
    }, 
    "listGroupUsers_200": {
      "properties": {
        "domain_id": {
          "description": "The ID of the domain for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If the user is enabled, this value is ``true``. If the user is\ndisabled, this value is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``users`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The user name. Must be unique within the domain.", 
          "format": "", 
          "type": "string"
        }, 
        "users": {
          "description": "A ``users`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "users", 
        "name", 
        "links", 
        "domain_id", 
        "enabled", 
        "email", 
        "id"
      ], 
      "type": "object"
    }, 
    "listGroups_200": {
      "properties": {
        "description": {
          "description": "The group description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the group.", 
          "format": "", 
          "type": "string"
        }, 
        "groups": {
          "description": "A ``groups`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The ID for the group.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``group`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the group.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "groups", 
        "domain_id", 
        "description", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "listPolicies_200": {
      "properties": {
        "blob": {
          "description": "The policy rule itself, as a serialized blob.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the policy.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``policy`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "policies": {
          "description": "A ``policies`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policies", 
        "links", 
        "blob", 
        "id", 
        "project_id", 
        "type", 
        "user_id"
      ], 
      "type": "object"
    }, 
    "listProjects_200": {
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If set to ``true``, project is enabled. If set to ``false``,\nproject is disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "is_domain": {
          "description": "(Since v3.6) Indicates whether the project also acts as a domain.\n\nIf set to ``true``, this project acts as both a project and domain.\nAs a domain, the project provides a name space in which you can\ncreate users, groups, and other projects.\n\nOtherwise, this field does not appear in the response and this\nproject behaves as a regular project that contains only resources.", 
          "format": "", 
          "type": "boolean"
        }, 
        "links": {
          "description": "The links for the ``project`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The project name. The project can have the same name as its domain.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_id": {
          "description": "(Since v3.4) The ID of the parent project. If ``null``, the project\nis a top-level project.", 
          "format": "", 
          "type": "string"
        }, 
        "projects": {
          "description": "A ``projects`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "links", 
        "projects", 
        "description", 
        "domain_id", 
        "enabled", 
        "id", 
        "name", 
        "parent_id"
      ], 
      "type": "object"
    }, 
    "listRegions_200": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``region`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "parent_region_id": {
          "description": "If the region is a child of another region, the ID for the parent\nregion. Otherwise, this value is ``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "regions": {
          "description": "A ``regions`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "links", 
        "regions", 
        "description", 
        "id", 
        "parent_region_id"
      ], 
      "type": "object"
    }, 
    "listRoleAssignments_200": {
      "properties": {
        "role_assignments": {
          "description": "A ``role_assignments`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "role_assignments"
      ], 
      "type": "object"
    }, 
    "listRoles_200": {
      "properties": {
        "id": {
          "description": "The role ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``role`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The role name.", 
          "format": "", 
          "type": "string"
        }, 
        "roles": {
          "description": "A ``roles`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "links", 
        "roles", 
        "id", 
        "name"
      ], 
      "type": "object"
    }, 
    "listServices_200": {
      "properties": {
        "description": {
          "description": "The service description.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Defines whether the service and its endpoints appear in the service\ncatalog:\n\n- ``false``. The service and its endpoints do not appear in the\n  service catalog.\n\n- ``true``. The service and its endpoints appear in the service\n  catalog.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID of the service.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``service`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "type": "string"
        }, 
        "services": {
          "description": "A ``services`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "type": {
          "description": "The service type, which describes the API implemented by the\nservice. Value is ``compute``, ``ec2``, ``identity``, ``image``,\n``network``, or ``volume``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "links", 
        "services", 
        "description", 
        "enabled", 
        "id", 
        "name", 
        "type"
      ], 
      "type": "object"
    }, 
    "listUsers_200": {
      "properties": {
        "default_project_id": {
          "description": "The ID of the default project for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The user description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If the user is enabled, this value is ``true``. If the user is\ndisabled, this value is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``user`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The user name. Must be unique within the domain.", 
          "format": "", 
          "type": "string"
        }, 
        "users": {
          "description": "A ``users`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "links", 
        "users", 
        "default_project_id", 
        "description", 
        "domain_id", 
        "email", 
        "enabled", 
        "id", 
        "name"
      ], 
      "type": "object"
    }, 
    "showCredential_200": {
      "properties": {
        "blob": {
          "description": "The credential itself, as a serialized blob.", 
          "format": "", 
          "type": "string"
        }, 
        "credential": {
          "description": "A ``credential`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the credential.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``credential`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The credential type, such as ``ec2`` or ``cert``. The\nimplementation determines the list of supported types.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "credential", 
        "user_id", 
        "links", 
        "blob", 
        "project_id", 
        "type", 
        "id"
      ], 
      "type": "object"
    }, 
    "showDomainConfigGroupOption_200": {
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "driver", 
        "ldap", 
        "url", 
        "user_tree_dn"
      ], 
      "type": "object"
    }, 
    "showDomainConfigGroup_200": {
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "driver", 
        "ldap", 
        "url", 
        "user_tree_dn"
      ], 
      "type": "object"
    }, 
    "showDomainConfig_200": {
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "driver", 
        "ldap", 
        "url", 
        "user_tree_dn"
      ], 
      "type": "object"
    }, 
    "showDomain_200": {
      "properties": {
        "description": {
          "description": "The domain description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain": {
          "description": "A ``domain`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "enabled": {
          "description": "Indicates whether the domain is enabled or disabled.\n\nIf set to ``true``, the domain is enabled. Users can authorize\nagainst an enabled domain and any of its projects. Users that are\nowned by an enabled domain can authenticate and receive additional\nauthorization.\n\nIf set to ``false``, the domain is disabled. Users cannot authorize\nagainst a disabled domain or any of its projects. Users that are\nowned by a disabled domain cannot authenticate or receive\nadditional authorization. All tokens that are authorized for a\ndisabled domain or its projects become no longer valid. If you\nreenable the domain, these tokens are not re-enabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The domain ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``domain`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The domain name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "domain", 
        "description", 
        "enabled", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "showEndpoint_200": {
      "properties": {
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "interface": {
          "description": "The interface type, which describes the visibility of the endpoint.\n\nValue is:\n\n- ``public``. Visible by end users on a publicly available network\n  interface.\n\n- ``internal``. Visible by end users on an unmetered internal\n  network interface.\n\n- ``admin``. Visible by administrative users on a secure network\n  interface.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``endpoint`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The endpoint name.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "(Deprecated in v3.2) The geographic location of the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "service_id": {
          "description": "The UUID of the service to which the endpoint belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "url": {
          "description": "The endpoint URL.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "endpoint", 
        "interface", 
        "links", 
        "name", 
        "region", 
        "url", 
        "service_id"
      ], 
      "type": "object"
    }, 
    "showGroup_200": {
      "properties": {
        "description": {
          "description": "The group description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the group.", 
          "format": "", 
          "type": "string"
        }, 
        "group": {
          "description": "A ``group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID for the group.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``group`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the group.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "group", 
        "domain_id", 
        "description", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "showPolicy_200": {
      "properties": {
        "blob": {
          "description": "The policy rule itself, as a serialized blob.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the policy.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``policy`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "policy": {
          "description": "A ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy", 
        "blob", 
        "id", 
        "links", 
        "project_id", 
        "type", 
        "user_id"
      ], 
      "type": "object"
    }, 
    "showProject_200": {
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If set to ``true``, project is enabled. If set to ``false``,\nproject is disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "is_domain": {
          "description": "(Since v3.6) Indicates whether the project also acts as a domain.\n\nIf set to ``true``, this project acts as both a project and domain.\nAs a domain, the project provides a name space in which you can\ncreate users, groups, and other projects.\n\nOtherwise, this field does not appear in the response and this\nproject behaves as a regular project that contains only resources.", 
          "format": "", 
          "type": "boolean"
        }, 
        "links": {
          "description": "The links for the ``project`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The project name. The project can have the same name as its domain.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_id": {
          "description": "(Since v3.4) The ID of the parent project. If ``null``, the project\nis a top-level project.", 
          "format": "", 
          "type": "string"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "project", 
        "description", 
        "links", 
        "enabled", 
        "id", 
        "parent_id", 
        "domain_id", 
        "name"
      ], 
      "type": "object"
    }, 
    "showRegion_200": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``region`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "parent_region_id": {
          "description": "If the region is a child of another region, the ID for the parent\nregion. Otherwise, this value is ``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "A ``region`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "region", 
        "description", 
        "id", 
        "links", 
        "parent_region_id"
      ], 
      "type": "object"
    }, 
    "showRole_200": {
      "properties": {
        "id": {
          "description": "The role ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``role`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The role name.", 
          "format": "", 
          "type": "string"
        }, 
        "role": {
          "description": "A ``role`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "role", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "showService_200": {
      "properties": {
        "description": {
          "description": "The service description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The ID of the service.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``service`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "type": "string"
        }, 
        "service": {
          "description": "A ``service`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "type": {
          "description": "The service type, which describes the API implemented by the\nservice. Value is ``compute``, ``ec2``, ``identity``, ``image``,\n``network``, or ``volume``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "links", 
        "service", 
        "description", 
        "id", 
        "name", 
        "type"
      ], 
      "type": "object"
    }, 
    "showUser_200": {
      "properties": {
        "default_project_id": {
          "description": "The ID of the default project for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The user description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If the user is enabled, this value is ``true``. If the user is\ndisabled, this value is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``user`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The user name. Must be unique within the domain.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "user", 
        "default_project_id", 
        "description", 
        "domain_id", 
        "email", 
        "enabled", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "updateCredential": {
      "example": {
        "application/json": {
          "credential": {
            "blob": "{\"access\":\"181920\",\"secrete\":\"secretKey\"}", 
            "project_id": "731fc6f265cd486d900f16e84c5cb594", 
            "type": "ec2", 
            "user_id": "bb5476fd12884539b41d5a88f838d773"
          }
        }
      }, 
      "properties": {
        "blob": {
          "description": "The credential itself, as a serialized blob.", 
          "format": "", 
          "type": "string"
        }, 
        "credential": {
          "description": "A ``credential`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The credential type, such as ``ec2`` or ``cert``. The\nimplementation determines the list of supported types.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "credential"
      ], 
      "type": "object"
    }, 
    "updateCredential_200": {
      "properties": {
        "blob": {
          "description": "The credential itself, as a serialized blob.", 
          "format": "", 
          "type": "string"
        }, 
        "credential": {
          "description": "A ``credential`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the credential.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``credential`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The credential type, such as ``ec2`` or ``cert``. The\nimplementation determines the list of supported types.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "credential", 
        "user_id", 
        "links", 
        "blob", 
        "project_id", 
        "type", 
        "id"
      ], 
      "type": "object"
    }, 
    "updateDomain": {
      "example": {
        "application/json": {
          "domain": {
            "description": "Owns users and projects on Identity API v2."
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The domain description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain": {
          "description": "A ``domain`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "enabled": {
          "description": "Enables or disables the domain.\n\nUsers can authorize against an enabled domain and any of its\nprojects. Users that are owned by an enabled domain can\nauthenticate and receive additional authorization.\n\nUsers cannot authorize against a disabled domain or any of its\nprojects. Users that are owned by a disabled domain cannot\nauthenticate or receive additional authorization. All tokens that\nare authorized for a disabled domain or its projects become no\nlonger valid. If you reenable the domain, these tokens are not re-\nenabled.\n\nTo enable the domain, set to ``true``. To disable the domain, set\nto ``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The domain name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "domain"
      ], 
      "type": "object"
    }, 
    "updateDomainConfig": {
      "example": {
        "application/json": {
          "config": {
            "ldap": {
              "url": "http://myldap/my_new_root", 
              "user_tree_dn": "ou=Users,dc=my_new_root,dc=org"
            }
          }
        }
      }, 
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "driver", 
        "ldap", 
        "url", 
        "user_tree_dn"
      ], 
      "type": "object"
    }, 
    "updateDomainConfigGroup": {
      "example": {
        "application/json": {
          "config": {
            "ldap": {
              "url": "http://myldap/my_new_root", 
              "user_tree_dn": "ou=Users,dc=my_new_root,dc=org"
            }
          }
        }
      }, 
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "ldap"
      ], 
      "type": "object"
    }, 
    "updateDomainConfigGroupOption": {
      "example": {
        "application/json": {
          "url": "http://myldap/my_other_root"
        }
      }, 
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "ldap"
      ], 
      "type": "object"
    }, 
    "updateDomainConfigGroupOption_200": {
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "driver", 
        "ldap", 
        "url", 
        "user_tree_dn"
      ], 
      "type": "object"
    }, 
    "updateDomainConfigGroup_200": {
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "driver", 
        "ldap", 
        "url", 
        "user_tree_dn"
      ], 
      "type": "object"
    }, 
    "updateDomainConfig_200": {
      "properties": {
        "config": {
          "description": "A ``config`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "driver": {
          "description": "The Identity back-end driver.", 
          "format": "", 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object. Required to set the identity group\nconfiguration options.", 
          "format": "", 
          "type": "object"
        }, 
        "ldap": {
          "description": "An ``ldap`` object. Required to set the LDAP group configuration\noptions.", 
          "format": "", 
          "type": "object"
        }, 
        "url": {
          "description": "The LDAP URL.", 
          "format": "", 
          "type": "string"
        }, 
        "user_tree_dn": {
          "description": "The base distinguished name (DN) of LDAP, from where all users can\nbe reached. For example, ``ou=Users,dc=root,dc=org``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config", 
        "identity", 
        "driver", 
        "ldap", 
        "url", 
        "user_tree_dn"
      ], 
      "type": "object"
    }, 
    "updateDomain_200": {
      "properties": {
        "description": {
          "description": "The domain description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain": {
          "description": "A ``domain`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "enabled": {
          "description": "Indicates whether the domain is enabled or disabled.\n\nIf set to ``true``, the domain is enabled. Users can authorize\nagainst an enabled domain and any of its projects. Users that are\nowned by an enabled domain can authenticate and receive additional\nauthorization.\n\nIf set to ``false``, the domain is disabled. Users cannot authorize\nagainst a disabled domain or any of its projects. Users that are\nowned by a disabled domain cannot authenticate or receive\nadditional authorization. All tokens that are authorized for a\ndisabled domain or its projects become no longer valid. If you\nreenable the domain, these tokens are not re-enabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The domain ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``domain`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The domain name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "domain", 
        "links", 
        "enabled", 
        "description", 
        "name", 
        "id"
      ], 
      "type": "object"
    }, 
    "updateEndpoint": {
      "example": {
        "application/json": {
          "endpoint": {
            "interface": "public", 
            "name": "Name", 
            "region_id": "north", 
            "service_id": "345678", 
            "url": "http://identity:35357/v3/endpoints/828384"
          }
        }
      }, 
      "properties": {
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "interface": {
          "description": "The interface type, which describes the visibility of the endpoint.\n\nA valid value is:\n\n- ``public``. Visible by end users on a publicly available network\n  interface.\n\n- ``internal``. Visible by end users on an unmetered internal\n  network interface.\n\n- ``admin``. Visible by administrative users on a secure network\n  interface.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The endpoint name.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "(Deprecated in v3.2) The geographic location of the service\nendpoint.\n\nUse the ``region_id`` parameter instead.", 
          "format": "", 
          "type": "string"
        }, 
        "service_id": {
          "description": "The UUID of the service to which the endpoint belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "url": {
          "description": "The endpoint URL.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "endpoint", 
        "interface", 
        "name", 
        "url", 
        "service_id"
      ], 
      "type": "object"
    }, 
    "updateEndpoint_200": {
      "properties": {
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "interface": {
          "description": "The interface type, which describes the visibility of the endpoint.\n\nValue is:\n\n- ``public``. Visible by end users on a publicly available network\n  interface.\n\n- ``internal``. Visible by end users on an unmetered internal\n  network interface.\n\n- ``admin``. Visible by administrative users on a secure network\n  interface.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``endpoint`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The endpoint name.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "(Deprecated in v3.2) The geographic location of the service\nendpoint.", 
          "format": "", 
          "type": "string"
        }, 
        "service_id": {
          "description": "The UUID of the service to which the endpoint belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "url": {
          "description": "The endpoint URL.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "endpoint", 
        "interface", 
        "links", 
        "name", 
        "region", 
        "url", 
        "service_id"
      ], 
      "type": "object"
    }, 
    "updateGroup": {
      "example": {
        "application/json": {
          "group": {
            "description": "Contract developers 2016", 
            "name": "Contract developers 2016"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The group description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain that owns the group.\n\nIf you omit the domain ID, defaults to the domain to which the\nclient token is scoped.", 
          "format": "", 
          "type": "string"
        }, 
        "group": {
          "description": "A ``group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The group name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "group"
      ], 
      "type": "object"
    }, 
    "updateGroup_200": {
      "properties": {
        "description": {
          "description": "The group description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the group.", 
          "format": "", 
          "type": "string"
        }, 
        "group": {
          "description": "A ``group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID for the group.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``group`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the group.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "group", 
        "domain_id", 
        "description", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "updatePolicy": {
      "example": {
        "application/json": {
          "policy": {
            "blob": {
              "foobar_user": [
                "role:compute-user"
              ]
            }, 
            "project_id": "456789", 
            "type": "application/json", 
            "user_id": "616263"
          }
        }
      }, 
      "properties": {
        "blob": {
          "description": "The policy rule itself, as a serialized blob.", 
          "format": "", 
          "type": "object"
        }, 
        "policy": {
          "description": "A ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy", 
        "blob", 
        "project_id", 
        "type", 
        "user_id"
      ], 
      "type": "object"
    }, 
    "updatePolicy_200": {
      "properties": {
        "blob": {
          "description": "The policy rule itself, as a serialized blob.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The ID of the policy.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``policy`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "policy": {
          "description": "A ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the associated project.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy", 
        "blob", 
        "id", 
        "links", 
        "project_id", 
        "type", 
        "user_id"
      ], 
      "type": "object"
    }, 
    "updateProject": {
      "example": {
        "application/json": {
          "project": {
            "description": "My updated project", 
            "domain_id": "default", 
            "enabled": true, 
            "name": "myUpdatedProject"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.\n\nIf you omit the domain ID, default is the domain to which your\ntoken is scoped.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Enables or disables the project.\n\nUsers can authorize against an enabled project.\n\nUsers cannot authorize against a disabled project. All tokens that\nare authorized for a disabled project become no longer valid. If\nyou reenable the project, these tokens are not re-enabled.\n\nTo enable the project, set to ``true``. To disable the project, set\nto ``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The project name, which must be unique within the owning domain.\nThe project can have the same name as its domain.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_id": {
          "description": "(Since v3.4) The ID of the parent project.\n\nIf you omit the parent project ID, the project is a top-level\nproject.", 
          "format": "", 
          "type": "string"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "project", 
        "name"
      ], 
      "type": "object"
    }, 
    "updateProject_200": {
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If set to ``true``, project is enabled. If set to ``false``,\nproject is disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the project.", 
          "format": "", 
          "type": "string"
        }, 
        "is_domain": {
          "description": "(Since v3.6) Indicates whether the project also acts as a domain.\n\nIf set to ``true``, this project acts as both a project and domain.\nAs a domain, the project provides a name space in which you can\ncreate users, groups, and other projects.\n\nOtherwise, this field does not appear in the response and this\nproject behaves as a regular project that contains only resources.", 
          "format": "", 
          "type": "boolean"
        }, 
        "links": {
          "description": "The links for the ``project`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The project name. The project can have the same name as its domain.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_id": {
          "description": "(Since v3.4) The ID of the parent project. If ``null``, the project\nis a top-level project.", 
          "format": "", 
          "type": "string"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "project", 
        "description", 
        "links", 
        "enabled", 
        "id", 
        "parent_id", 
        "domain_id", 
        "name"
      ], 
      "type": "object"
    }, 
    "updateRegion": {
      "example": {
        "application/json": {
          "region": {
            "description": "My subregion 3"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "To make this region a child of another region, set this parameter\nto the ID of the parent region.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "A ``region`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "region"
      ], 
      "type": "object"
    }, 
    "updateRegion_200": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``region`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "parent_region_id": {
          "description": "If the region is a child of another region, the ID for the parent\nregion. Otherwise, this value is ``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "region": {
          "description": "A ``region`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "region", 
        "description", 
        "id", 
        "links", 
        "parent_region_id"
      ], 
      "type": "object"
    }, 
    "updateRole": {
      "example": {
        "application/json": {
          "role": {
            "name": "Developer"
          }
        }
      }, 
      "properties": {
        "name": {
          "description": "The role name.", 
          "format": "", 
          "type": "string"
        }, 
        "role": {
          "description": "A ``role`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "role", 
        "name"
      ], 
      "type": "object"
    }, 
    "updateRole_200": {
      "properties": {
        "id": {
          "description": "The role ID.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``role`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The role name.", 
          "format": "", 
          "type": "string"
        }, 
        "role": {
          "description": "A ``role`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "role", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "updateService": {
      "example": {
        "application/json": {
          "service": {
            "description": "Block Storage Service V2"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The service description.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Defines whether the service and its endpoints appear in the service\ncatalog:\n\n- ``false``. The service and its endpoints do not appear in the\n  service catalog.\n\n- ``true``. The service and its endpoints appear in the service\n  catalog.\n\nDefault is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "type": "string"
        }, 
        "service": {
          "description": "A ``service`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "type": {
          "description": "The service type, which describes the API implemented by the\nservice.\n\nA valid value is ``compute``, ``ec2``, ``identity``, ``image``,\n``network``, or ``volume``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "service", 
        "type"
      ], 
      "type": "object"
    }, 
    "updateService_200": {
      "properties": {
        "description": {
          "description": "The service description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The ID of the service.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``service`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "type": "string"
        }, 
        "service": {
          "description": "A ``service`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "type": {
          "description": "The service type, which describes the API implemented by the\nservice. Value is ``compute``, ``ec2``, ``identity``, ``image``,\n``network``, or ``volume``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "links", 
        "service", 
        "description", 
        "id", 
        "name", 
        "type"
      ], 
      "type": "object"
    }, 
    "updateUser": {
      "example": {
        "application/json": {
          "user": {
            "default_project_id": "263fd9", 
            "description": "James Doe's user", 
            "email": "jamesdoe@example.com", 
            "enabled": true
          }
        }
      }, 
      "properties": {
        "default_project_id": {
          "description": "The ID of the default project for the user.\n\nSetting this attribute does not grant any actual authorization on\nthe project, and is merely provided for convenience. Therefore, the\nreferenced project does not need to exist within the user domain.\n\n(Since v3.1) If the user does not have authorization to their\ndefault project, the default project is ignored at token creation.\n\n(Since v3.1) Additionally, if your default project is not valid, a\ntoken is issued without an explicit scope of authorization.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The user description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Enables or disables the user.\n\nAn enabled user can authenticate and receive authorization.\n\nA disabled user cannot authenticate or receive authorization.\nAdditionally, all tokens that the user holds become no longer\nvalid. If you reenable this user, pre-existing tokens do not become\nvalid.\n\nTo enable the user, set to ``true``. To disable the user, set to\n``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The user name, which must be unique within the owning domain.", 
          "format": "", 
          "type": "string"
        }, 
        "password": {
          "description": "The user password.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "user", 
        "name", 
        "password"
      ], 
      "type": "object"
    }, 
    "updateUser_200": {
      "properties": {
        "default_project_id": {
          "description": "The ID of the default project for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The user description.", 
          "format": "", 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "If the user is enabled, this value is ``true``. If the user is\ndisabled, this value is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the user.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``user`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The user name. Must be unique within the domain.", 
          "format": "", 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "user", 
        "default_project_id", 
        "description", 
        "domain_id", 
        "email", 
        "enabled", 
        "id", 
        "links", 
        "name"
      ], 
      "type": "object"
    }, 
    "validateToken_200": {
      "properties": {
        "audit_ids": {
          "description": "A list of one or two audit IDs. An audit ID is a unique, randomly\ngenerated, URL-safe string that you can use to track a token.\n\nThe first audit ID is the current audit ID for the token.\n\nThe second audit ID is present for only re-scoped tokens and is the\naudit ID from the token before it was re-scoped. A re-scoped token\nis one that was exchanged for another token of the same or\ndifferent scope.\n\nYou can use these audit IDs to track the use of a token or chain of\ntokens across multiple requests and endpoints without exposing the\ntoken ID to non-privileged users.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "catalog": {
          "description": "A ``catalog`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "domain": {
          "description": "Specify either ``id`` or ``name`` to uniquely identify the domain.", 
          "format": "", 
          "type": "object"
        }, 
        "expires_at": {
          "description": "The date and time when the token expires.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nA ``null`` value indicates that the token never expires.", 
          "format": "", 
          "type": "string"
        }, 
        "extras": {
          "description": "A set of metadata key and value pairs, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The user ID.", 
          "format": "", 
          "type": "string"
        }, 
        "issued_at": {
          "description": "The date and time when the token was issued.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the ``user`` resource.", 
          "format": "", 
          "type": "object"
        }, 
        "methods": {
          "description": "The authentication method, which is ``password``, ``token``, or\nboth methods.\n\nIndicates the accumulated set of authentication methods that were\nused to obtain the token. For example, if the token was obtained by\npassword authentication, it contains ``password``. Later, if the\ntoken is exchanged by using the token authentication method one or\nmore times, the subsequently created tokens contain both\n``password`` and ``token`` in their ``methods`` attribute.\n\nUnlike multi-factor authentication, the ``methods`` attribute\nmerely indicates the methods that were used to authenticate the\nuser in exchange for a token. The client is responsible for\ndetermining the total number of authentication factors.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The user name.", 
          "format": "", 
          "type": "string"
        }, 
        "project": {
          "description": "A ``project`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "roles": {
          "description": "A ``roles`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "token": {
          "description": "A ``token`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "token", 
        "expires_at", 
        "issued_at", 
        "methods", 
        "user", 
        "id", 
        "links", 
        "name", 
        "audit_ids", 
        "extras", 
        "catalog", 
        "project", 
        "roles"
      ], 
      "type": "object"
    }
  }, 
  "externalDocs": {
    "description": "OpenStack Docs", 
    "url": "http://docs.openstack.org"
  }, 
  "host": "developer.openstack.org", 
  "info": {
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "title": "Identity", 
    "version": "v3", 
    "x-service": "identity"
  }, 
  "paths": {
    "/v3/OS-OAUTH1/access_token": {
      "post": {
        "consumes": [], 
        "description": "After the user authorizes the request token, the consumer exchanges\nthe authorized request token and OAuth verifier for an access\ntoken.\n\nSupported signature methods: HMAC-SHA1.\n\nThe consumer must provide all required OAuth parameters in the\nrequest. See `Consumer Obtains a Request Token\n<http://oauth.net/core/1.0a/#auth_step1>`_.\n\nSupported signature methods: HMAC-SHA1.\n\nYou must provide all required OAuth parameters in the request. See\n`Consumer Obtains a Request Token\n<http://oauth.net/core/1.0a/#auth_step1>`_.", 
        "operationId": "createAccessToken", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "text/plain": "oauth_token=accd36&oauth_token_secret=aa47da&oauth_expires_at=2013-09-11T06:07:51.501805Z"
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Enables a consumer to create an access token by exchanging a request token for an access token.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Create access token"
      }
    }, 
    "/v3/OS-OAUTH1/consumers": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listConsumers", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "consumers": [
                  {
                    "id": "0c2a74", 
                    "links": {
                      "self": "http://identity:35357/v3/OS-OAUTH1/consumers/0c2a74"
                    }
                  }, 
                  {
                    "description": "My consumer", 
                    "id": "7fea2d", 
                    "links": {
                      "self": "http://identity:35357/v3/OS-OAUTH1/consumers/7fea2d"
                    }
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/OS-OAUTH1/consumers"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists consumers.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "List consumers"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createConsumer", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "consumer": {
                  "description": "My consumer", 
                  "id": "7fea2d", 
                  "links": {
                    "self": "http://identity:35357/v3/OS-OAUTH1/consumers/7fea2d"
                  }, 
                  "secret": "secretsecret"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Enables a user to create a consumer.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Create consumer"
      }
    }, 
    "/v3/OS-OAUTH1/consumers/{consumer_id}": {
      "delete": {
        "consumes": [], 
        "description": "When you delete a consumer, any associated request tokens, access\ntokens, and Identity API tokens are also deleted.", 
        "operationId": "deleteConsumer", 
        "parameters": [
          {
            "description": "The UUID of the consumer.", 
            "format": "", 
            "in": "path", 
            "name": "consumer_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a consumer.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Delete consumer"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showConsumer", 
        "parameters": [
          {
            "description": "The UUID of the consumer.", 
            "format": "", 
            "in": "path", 
            "name": "consumer_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "consumer": {
                  "description": "My consumer", 
                  "id": "7fea2d", 
                  "links": {
                    "self": "http://identity:35357/v3/OS-OAUTH1/consumers/7fea2d"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a consumer.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Show consumer details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "If you try to update any attribute other than description, the HTTP\n400 Bad Request error is returned.", 
        "operationId": "updateConsumer", 
        "parameters": [
          {
            "description": "The UUID of the consumer.", 
            "format": "", 
            "in": "path", 
            "name": "consumer_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "consumer": {
                  "description": "My new consumer", 
                  "id": "7fea2d", 
                  "links": {
                    "self": "http://identity:35357/v3/OS-OAUTH1/consumers/7fea2d"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates the description for a consumer.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Update consumer"
      }
    }, 
    "/v3/OS-OAUTH1/request_token": {
      "post": {
        "consumes": [], 
        "description": "Supported signature methods: HMAC-SHA1.\n\nThe consumer must provide all required OAuth parameters in the\nrequest. See `Consumer Obtains a Request Token\n<http://oauth.net/core/1.0a/#auth_step1>`_.", 
        "operationId": "showUnauthorizedRequestToken", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "text/plain": "oauth_token=29971f&oauth_token_secret=238eb8&oauth_expires_at=2013-09-11T06:07:51.501805Z"
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Enables a consumer to get an unauthorized request token.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Show unauthorized request token"
      }
    }, 
    "/v3/OS-OAUTH1/users/{user_id}/access_tokens": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listAuthorizedAccessTokens", 
        "parameters": [
          {
            "description": "The UUID of the user.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "access_tokens": [
                  {
                    "authorizing_user_id": "ce9e07", 
                    "consumer_id": "7fea2d", 
                    "expires_at": "2013-09-11T06:07:51.501805Z", 
                    "id": "6be26a", 
                    "links": {
                      "roles": "http://identity:35357/v3/users/ce9e07/OS-OAUTH1/access_tokens/6be26a/roles", 
                      "self": "http://identity:35357/v3/users/ce9e07/OS-OAUTH1/access_tokens/6be26a"
                    }, 
                    "project_id": "b9fca3"
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/users/ce9e07/OS-OAUTH1/access_tokens"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists authorized access tokens.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "List authorized access tokens"
      }
    }, 
    "/v3/OS-OAUTH1/users/{user_id}/access_tokens/{access_token_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "revokeAccessToken", 
        "parameters": [
          {
            "description": "The UUID of the user.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the access token.", 
            "format": "", 
            "in": "path", 
            "name": "access_token_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Enables a user to revoke an access token, which prevents the consumer from requesting new Identity Service API tokens. Also, revokes any Identity Service API tokens that were issued to the consumer through that access token.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Revoke access token"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showAuthorizedAccessToken", 
        "parameters": [
          {
            "description": "The UUID of the user.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the access token.", 
            "format": "", 
            "in": "path", 
            "name": "access_token_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "access_token": {
                  "authorizing_user_id": "ce9e07", 
                  "consumer_id": "7fea2d", 
                  "expires_at": "2013-09-11T06:07:51.501805Z", 
                  "id": "6be26a", 
                  "links": {
                    "roles": "http://identity:35357/v3/users/ce9e07/OS-OAUTH1/access_tokens/6be26a/roles", 
                    "self": "http://identity:35357/v3/users/ce9e07/OS-OAUTH1/access_tokens/6be26a"
                  }, 
                  "project_id": "b9fca3"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Gets an authorized access token.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Get authorized access token"
      }
    }, 
    "/v3/OS-OAUTH1/users/{user_id}/access_tokens/{access_token_id}/roles": {
      "get": {
        "consumes": [], 
        "description": "", 
        "operationId": "listRolesOfAccessToken", 
        "parameters": [
          {
            "description": "The UUID of the user.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the access token.", 
            "format": "", 
            "in": "path", 
            "name": "access_token_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists associated roles for an access token.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "List roles for an access token"
      }
    }, 
    "/v3/OS-OAUTH1/users/{user_id}/access_tokens/{access_token_id}/roles/{role_id}": {
      "get": {
        "consumes": [], 
        "description": "", 
        "operationId": "showRoleOfAccessToken", 
        "parameters": [
          {
            "description": "The UUID of the user.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the access token.", 
            "format": "", 
            "in": "path", 
            "name": "access_token_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the role.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a role for an access token.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Show role details for an access token"
      }
    }, 
    "/v3/auth/tokens": {
      "delete": {
        "consumes": [], 
        "description": "This call is similar to the HEAD ``/auth/tokens`` call except that\nthe ``X-Subject-Token`` token is immediately not valid, regardless\nof the ``expires_at`` attribute value. An additional ``X-Auth-\nToken`` is not required.", 
        "operationId": "revokeTokens", 
        "parameters": [
          {
            "description": "A valid authentication token for an administrative user.", 
            "format": "", 
            "in": "header", 
            "name": "X-Auth-Token", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The authentication token for which you want to perform the\noperation.", 
            "format": "", 
            "in": "header", 
            "name": "X-Subject-Token", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Revokes a token.", 
        "tags": [
          "authenticate-v3"
        ], 
        "x-title": "Revoke token"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Pass your own token in the ``X-Auth-Token`` request header.\n\nPass the token that you want to validate in the ``X-Subject-Token``\nrequest header.", 
        "operationId": "validateToken", 
        "parameters": [
          {
            "description": "A valid authentication token for an administrative user.", 
            "format": "", 
            "in": "header", 
            "name": "X-Auth-Token", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The authentication token for which you want to perform the\noperation.", 
            "format": "", 
            "in": "header", 
            "name": "X-Subject-Token", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "token": {
                  "audit_ids": [
                    "mAjXQhiYRyKwkB4qygdLVg"
                  ], 
                  "expires_at": "2015-11-05T22:00:11.000000Z", 
                  "extras": {}, 
                  "issued_at": "2015-11-05T21:00:33.819948Z", 
                  "methods": [
                    "token"
                  ], 
                  "user": {
                    "domain": {
                      "id": "default", 
                      "name": "Default"
                    }, 
                    "id": "10a2e6e717a245d9acad3e5f97aeca3d", 
                    "name": "admin"
                  }
                }
              }
            }, 
            "headers": {
              "X-Auth-Token": {
                "description": "A valid authentication token for an administrative user.", 
                "format": "", 
                "type": "string"
              }, 
              "X-Subject-Token": {
                "description": "The authentication token.\n\nAn authentication response returns the token ID in this header\nrather than in the response body.", 
                "format": "", 
                "type": "string"
              }
            }, 
            "schema": {
              "$ref": "#/definitions/validateToken_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Validates and shows information for a token, including its expiration date and authorization scope.", 
        "tags": [
          "authenticate-v3"
        ], 
        "x-title": "Validate and show information for token"
      }, 
      "head": {
        "consumes": [], 
        "description": "This call is similar to ``GET /auth/tokens`` but no response body\nis provided even in the ``X-Subject-Token`` header.\n\nThe Identity API returns the same response as when the subject\ntoken was issued by ``POST /auth/tokens`` even if an error occurs\nbecause the token is not valid. An HTTP ``204`` response code\nindicates that the ``X-Subject-Token`` is valid.", 
        "operationId": "checkToken", 
        "parameters": [
          {
            "description": "A valid authentication token for an administrative user.", 
            "format": "", 
            "in": "header", 
            "name": "X-Auth-Token", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The authentication token for which you want to perform the\noperation.", 
            "format": "", 
            "in": "header", 
            "name": "X-Subject-Token", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Validates a token.", 
        "tags": [
          "authenticate-v3"
        ], 
        "x-title": "Check token"
      }, 
      "x-post-authenticate": {
        "consumes": [], 
        "description": "The token represents the delegated authorization and identity\n(impersonation) of the authorizing user. The roles and scope of the\ngenerated token match those that the consumer initially requested.\n\nSupported signature methods: HMAC-SHA1.\n\nThe consumer must provide required OAuth parameters in the request.\nSee `Consumer Obtains a Request Token\n<http://oauth.net/core/1.0a/#auth_step1>`_.\n\nThe returned token is scoped to the requested project and with the\nrequested roles. In addition to the standard token response, the\ntoken has an OAuth-specific object.\n\nExample OAuth-specific object in a token:\n\n.. code-block:: json\n\n   \"OS-OAUTH1\": {\n       \"access_token_id\": \"cce0b8be7\"\n   }", 
        "operationId": "authenticate", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Enables a consumer to get an Identity Service authentication token.", 
        "tags": [
          "identity_v3_OS-OAUTH1"
        ], 
        "x-title": "Get an Identity Service token"
      }, 
      "x-post-authenticatePasswordExplicitUnscoped": {
        "consumes": [
          "application/json"
        ], 
        "description": "The request body must include a payload that specifies the\n``password`` authentication method, the credentials, and the\n``unscoped`` authorization scope.", 
        "operationId": "authenticatePasswordExplicitUnscoped", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/authenticatePasswordExplicitUnscoped"
            }
          }, 
          {
            "description": "(Since v3.1) The authentication response excludes the service\ncatalog. By default, the response includes the service catalog.", 
            "format": "", 
            "in": "query", 
            "name": "nocatalog", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "token": {
                  "audit_ids": [
                    "lC2Wj1jbQe-dLjLyOx4qPQ"
                  ], 
                  "expires_at": "2015-11-09T01:42:57.527363Z", 
                  "extras": {}, 
                  "issued_at": "2015-11-09T00:42:57.527404Z", 
                  "methods": [
                    "password"
                  ], 
                  "user": {
                    "domain": {
                      "id": "default", 
                      "name": "Default"
                    }, 
                    "id": "ee4dfb6e5540447cb3741905149d9b6e", 
                    "name": "admin"
                  }
                }
              }
            }, 
            "headers": {
              "X-Subject-Token": {
                "description": "The authentication token.\n\nAn authentication response returns the token ID in this header\nrather than in the response body.", 
                "format": "", 
                "type": "string"
              }
            }, 
            "schema": {
              "$ref": "#/definitions/authenticatePasswordExplicitUnscoped_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Authenticates an identity and generates a token. Uses the password authentication method with explicit unscoped authorization.", 
        "tags": [
          "authenticate-v3"
        ], 
        "x-title": "Password authentication with explicit unscoped authorization"
      }, 
      "x-post-authenticatePasswordScoped": {
        "consumes": [
          "application/json"
        ], 
        "description": "The request body must include a payload that specifies the\n``password`` authentication method, the credentials, and the\n``project`` or ``domain`` authorization scope.", 
        "operationId": "authenticatePasswordScoped", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/authenticatePasswordScoped"
            }
          }, 
          {
            "description": "(Since v3.1) The authentication response excludes the service\ncatalog. By default, the response includes the service catalog.", 
            "format": "", 
            "in": "query", 
            "name": "nocatalog", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "token": {
                  "audit_ids": [
                    "3T2dc1CGQxyJsHdDu1xkcw"
                  ], 
                  "catalog": [
                    {
                      "endpoints": [
                        {
                          "id": "068d1b359ee84b438266cb736d81de97", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:5000/v2.0"
                        }, 
                        {
                          "id": "8bfc846841ab441ca38471be6d164ced", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:35357/v2.0"
                        }, 
                        {
                          "id": "beb6d358c3654b4bada04d4663b640b9", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:5000/v2.0"
                        }
                      ], 
                      "id": "050726f278654128aba89757ae25950c", 
                      "name": "keystone", 
                      "type": "identity"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "ae36c0dbb0634e1dbf711f9fc2359975", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "d286b51530144d90a4de52d214d3ad1e", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "d6e681dd4aab4ae5a0937ed60bb4ae33", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2/a6944d763bf64ee6a275f1263fae0352"
                        }
                      ], 
                      "id": "1c4bfbabe3b346b1bbe27a4b3258964f", 
                      "name": "nova_legacy", 
                      "type": "compute_legacy"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "2dce7429526e44808235fe918063a914", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v2/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "a9a9929e6dc645c882ac1abd8bf73d38", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v2/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "c7d5f958df7f4c8da84db91094bdc198", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v2/a6944d763bf64ee6a275f1263fae0352"
                        }
                      ], 
                      "id": "202382a1b8a94210bb3120af958092c4", 
                      "name": "cinderv2", 
                      "type": "volumev2"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "29b58f1406804c8180ccc01793ff8038", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8080"
                        }, 
                        {
                          "id": "4c2c2968008c4e77973a5922e192d982", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8080/v1/AUTH_a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "f6e7b28008bf41eaa114176a15ac1410", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8080/v1/AUTH_a6944d763bf64ee6a275f1263fae0352"
                        }
                      ], 
                      "id": "52fecdef9ad543779c1312392cc2b115", 
                      "name": "swift", 
                      "type": "object-store"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "6a2840dc63bf433592cd8bca2183eb3c", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9696/"
                        }, 
                        {
                          "id": "7967cf45f8ab439a80cf24420e5ffd0e", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9696/"
                        }, 
                        {
                          "id": "84943ce595264303bd44e5d6d79bea7b", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9696/"
                        }
                      ], 
                      "id": "67b993549db94296a853d635b48db3c9", 
                      "name": "neutron", 
                      "type": "network"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "2896609ef89741148bbd8c93babf5a12", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8888"
                        }, 
                        {
                          "id": "30de385478fe4325849f98d1e45bc5e6", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8888"
                        }, 
                        {
                          "id": "41256dc4b3c942daa383f940a9a56536", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8888"
                        }
                      ], 
                      "id": "6fc9cc3e6b3843b899478554f9e297d3", 
                      "name": "zaqar", 
                      "type": "messaging"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "07ea5fe3ae784001a73f131fb1764bf4", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9000"
                        }, 
                        {
                          "id": "31e709ecb15d4881806dbced4eb3e60e", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9000"
                        }, 
                        {
                          "id": "a0c2a150a6ae4bbc85f1d428b9d78a1b", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9000"
                        }
                      ], 
                      "id": "816031f798cc4ac7879eda0cf9cf033a", 
                      "name": "zaqar-websocket", 
                      "type": "messaging-websocket"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "24df0277c2b6499ea6051bea8c59ff74", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8773/"
                        }, 
                        {
                          "id": "438f4b3f3c314bbf988f1442cc3ddfa5", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8773/"
                        }, 
                        {
                          "id": "90a1c9fab54c452fa02a59ff87165029", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8773/"
                        }
                      ], 
                      "id": "915e2a8b1f314d55bba28432c9d5c1de", 
                      "name": "ec2", 
                      "type": "ec2"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "2511589f262a407bb0071a814a480af4", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2.1/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "9cf9209ae4fc4673a7295611001cf0ae", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2.1/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "d200b2509e1343e3887dcc465b4fa534", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2.1/a6944d763bf64ee6a275f1263fae0352"
                        }
                      ], 
                      "id": "a226b3eeb5594f50bf8b6df94636ed28", 
                      "name": "nova", 
                      "type": "compute"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "bf2fe80c2a614e438d3e55b00e85b9ff", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8004/v1/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "bfc9615fc24e4045aaf719f060984bf1", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8004/v1/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "c76cf9930b0f4ccea6b1157f80119cfc", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8004/v1/a6944d763bf64ee6a275f1263fae0352"
                        }
                      ], 
                      "id": "a5f7070bda40443fa3819fbdf1689af1", 
                      "name": "heat", 
                      "type": "orchestration"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "3e321c2c6fa04152b3e86c18b91b93ae", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v1/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "55aef0f2557449d4946dc9461b73a63b", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v1/a6944d763bf64ee6a275f1263fae0352"
                        }, 
                        {
                          "id": "7c91a66a200e458ca6e4e00fddf4d98b", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v1/a6944d763bf64ee6a275f1263fae0352"
                        }
                      ], 
                      "id": "b6b5edc3fc384b6787149e91b3b31988", 
                      "name": "cinder", 
                      "type": "volume"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "512c10d230874ad295662157eeab0135", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9292"
                        }, 
                        {
                          "id": "614b1ab241da47a8b3a4e8f67b771446", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9292"
                        }, 
                        {
                          "id": "9cef78a4286c42f3b977fbe4d5f927a6", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9292"
                        }
                      ], 
                      "id": "d512f8860c0f45cf99b1c3cef86cfd97", 
                      "name": "glance", 
                      "type": "image"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "7f776d5a83d346b48e519555362b1da6", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8000/v1"
                        }, 
                        {
                          "id": "8303a7225a2d439fa39905c6a20202c3", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8000/v1"
                        }, 
                        {
                          "id": "942fa998d1c644e0b0c085d5a0995a13", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8000/v1"
                        }
                      ], 
                      "id": "ed0805af6ee54a19ad7e5add8465ac41", 
                      "name": "heat-cfn", 
                      "type": "cloudformation"
                    }
                  ], 
                  "expires_at": "2015-11-07T02:58:43.578887Z", 
                  "extras": {}, 
                  "issued_at": "2015-11-07T01:58:43.578929Z", 
                  "methods": [
                    "password"
                  ], 
                  "project": {
                    "domain": {
                      "id": "default", 
                      "name": "Default"
                    }, 
                    "id": "a6944d763bf64ee6a275f1263fae0352", 
                    "name": "admin"
                  }, 
                  "roles": [
                    {
                      "id": "51cc68287d524c759f47c811e6463340", 
                      "name": "admin"
                    }
                  ], 
                  "user": {
                    "domain": {
                      "id": "default", 
                      "name": "Default"
                    }, 
                    "id": "ee4dfb6e5540447cb3741905149d9b6e", 
                    "name": "admin"
                  }
                }
              }
            }, 
            "headers": {
              "X-Subject-Token": {
                "description": "The authentication token.\n\nAn authentication response returns the token ID in this header\nrather than in the response body.", 
                "format": "", 
                "type": "string"
              }
            }, 
            "schema": {
              "$ref": "#/definitions/authenticatePasswordScoped_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Authenticates an identity and generates a token. Uses the password authentication method and scopes authorization to a project or domain.", 
        "tags": [
          "authenticate-v3"
        ], 
        "x-title": "Password authentication with scoped authorization"
      }, 
      "x-post-authenticatePasswordUnscoped": {
        "consumes": [
          "application/json"
        ], 
        "description": "The request body must include a payload that specifies the\nauthentication method, which is ``password``, and the user, by ID\nor name, and password credentials.", 
        "operationId": "authenticatePasswordUnscoped", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/authenticatePasswordUnscoped"
            }
          }, 
          {
            "description": "(Since v3.1) The authentication response excludes the service\ncatalog. By default, the response includes the service catalog.", 
            "format": "", 
            "in": "query", 
            "name": "nocatalog", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "token": {
                  "audit_ids": [
                    "ZzZwkUflQfygX7pdYDBCQQ"
                  ], 
                  "expires_at": "2015-11-06T15:32:17.893769Z", 
                  "extras": {}, 
                  "issued_at": "2015-11-06T14:32:17.893797Z", 
                  "methods": [
                    "password"
                  ], 
                  "user": {
                    "domain": {
                      "id": "default", 
                      "name": "Default"
                    }, 
                    "id": "423f19a4ac1e4f48bbb4180756e6eb6c", 
                    "name": "admin"
                  }
                }
              }
            }, 
            "headers": {
              "X-Subject-Token": {
                "description": "The authentication token.\n\nAn authentication response returns the token ID in this header\nrather than in the response body.", 
                "format": "", 
                "type": "string"
              }
            }, 
            "schema": {
              "$ref": "#/definitions/authenticatePasswordUnscoped_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Authenticates an identity and generates a token. Uses the password authentication method. Authorization is unscoped.", 
        "tags": [
          "authenticate-v3"
        ], 
        "x-title": "Password authentication with unscoped authorization"
      }, 
      "x-post-authenticateTokenScoped": {
        "consumes": [
          "application/json"
        ], 
        "description": "In the request body, provide the token ID and the ``project`` or\n``domain`` authorization scope.", 
        "operationId": "authenticateTokenScoped", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/authenticateTokenScoped"
            }
          }, 
          {
            "description": "(Since v3.1) The authentication response excludes the service\ncatalog. By default, the response includes the service catalog.", 
            "format": "", 
            "in": "query", 
            "name": "nocatalog", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "token": {
                  "audit_ids": [
                    "wLc7nDMsQiKqf8VFU4ySpg"
                  ], 
                  "catalog": [
                    {
                      "endpoints": [
                        {
                          "id": "b2605da9b25943beb49b2bd86aca2202", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9292"
                        }, 
                        {
                          "id": "c4d1184caf8c4351bff4bf502a09684e", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9292"
                        }, 
                        {
                          "id": "cd73bda89e3948738c2721a8c3acac54", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9292"
                        }
                      ], 
                      "id": "495df2483dc145dbb6b34bfbdd787aae", 
                      "name": "glance", 
                      "type": "image"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "7d03218a7f4246e8b9e3992318bf5397", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8773/"
                        }, 
                        {
                          "id": "9ad7f8ce438c4212b8aac930bca04c86", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8773/"
                        }, 
                        {
                          "id": "d84aad1a45c44e4da09b719167383049", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8773/"
                        }
                      ], 
                      "id": "54204024bb7d4665a8efc34fc758f1f7", 
                      "name": "ec2", 
                      "type": "ec2"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "1077687c18514490a3ec980eadd1bd13", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9000"
                        }, 
                        {
                          "id": "1e86d8bef1514c3fba8d157a22ccce88", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9000"
                        }, 
                        {
                          "id": "f6a6b7bbba66443ead3a0e31a008c271", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9000"
                        }
                      ], 
                      "id": "6b8655af7d044a15bec3cdca4f2919f8", 
                      "name": "zaqar-websocket", 
                      "type": "messaging-websocket"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "083663fd231e40ad97384ad3efb9f1b7", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8004/v1/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "0f4b7054ea27450eac43f685a4fc1d2c", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8004/v1/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "5f3ea39df2e44378b1802a1a87ef9ac4", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8004/v1/5b50efd009b540559104ee3c03bbb2b7"
                        }
                      ], 
                      "id": "6d6346ff2ca842e5968373fbb93e231f", 
                      "name": "heat", 
                      "type": "orchestration"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "bc2230a70d6a444e9fba75b85fbda41b", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2.1/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "d8102dc2b9984d04b30b91b0a6037470", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2.1/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "f8253a53edd749bf8b107a53a5d47a82", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2.1/5b50efd009b540559104ee3c03bbb2b7"
                        }
                      ], 
                      "id": "75df965385cc4120a17110c1fde00182", 
                      "name": "nova", 
                      "type": "compute"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "0ceeb58592274caea5bc942a07d5473f", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:35357/v2.0"
                        }, 
                        {
                          "id": "8126f2c7021d413e9c98ec3a0ba0fd58", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:5000/v2.0"
                        }, 
                        {
                          "id": "c693879254544e3fb502e795a3f6acc8", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:5000/v2.0"
                        }
                      ], 
                      "id": "78aad571d38049e69c866c2abac76af6", 
                      "name": "keystone", 
                      "type": "identity"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "3654138dc64a45aeb5a8153f2a089c74", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v1/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "7a0d12d0b7314afd9b53d1618ab546ea", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v1/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "82b68ff3aedb43e2acc8307234d3fd0b", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v1/5b50efd009b540559104ee3c03bbb2b7"
                        }
                      ], 
                      "id": "80491007c0ab462daaa9087250325f59", 
                      "name": "cinder", 
                      "type": "volume"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "24dfa252fba64469b8b1a832f04bded9", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8000/v1"
                        }, 
                        {
                          "id": "e0a01d6cd3be4f6abcc72367b2d87993", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8000/v1"
                        }, 
                        {
                          "id": "f33f79d42df247e1bf6daf43a548b014", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8000/v1"
                        }
                      ], 
                      "id": "ac5cc6e3c62840818ab338c981d5603f", 
                      "name": "heat-cfn", 
                      "type": "cloudformation"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "3e78c357b3c8469fbea12eb681f88a0c", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9696/"
                        }, 
                        {
                          "id": "89d2aad3dc8e478fbabb21dd7db0962a", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9696/"
                        }, 
                        {
                          "id": "b6d4a8cf5e4042848a749a3116497e55", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:9696/"
                        }
                      ], 
                      "id": "b33660edd1eb45e485f7e5f14401a739", 
                      "name": "neutron", 
                      "type": "network"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "1f8287cf963948778ab0eb109d9f857d", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8888"
                        }, 
                        {
                          "id": "3adf5f9cc5184d92af5ff0fdef043e4a", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8888"
                        }, 
                        {
                          "id": "f747223060b3414f947fdcdca2ce8714", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8888"
                        }
                      ], 
                      "id": "cf3e38e9aed54e2d84ea64485317d7a0", 
                      "name": "zaqar", 
                      "type": "messaging"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "08f507ccb552476b98f3af7718f25557", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "d20091ba591347b2b419e5fbde9b7976", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "e6b667776e7245dea6e39f2820e080b0", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8774/v2/5b50efd009b540559104ee3c03bbb2b7"
                        }
                      ], 
                      "id": "d442e96b273a48018567aeec5800c3e0", 
                      "name": "nova_legacy", 
                      "type": "compute_legacy"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "012c78a6694a494995c58d5955fb7822", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v2/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "802d5de210874f068ba31c7e27c29d70", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v2/5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "b37ada66e02e44c9a9a7976d77365503", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8776/v2/5b50efd009b540559104ee3c03bbb2b7"
                        }
                      ], 
                      "id": "d93e78c7967f49acbdd732b9dd97e0d0", 
                      "name": "cinderv2", 
                      "type": "volumev2"
                    }, 
                    {
                      "endpoints": [
                        {
                          "id": "265ce88a0e1642fc90b2ec20ccb279ff", 
                          "interface": "public", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8080/v1/AUTH_5b50efd009b540559104ee3c03bbb2b7"
                        }, 
                        {
                          "id": "500b7f066d39492faff8a3f710fb5a2f", 
                          "interface": "admin", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8080"
                        }, 
                        {
                          "id": "a33b0684f817405280df1f5600777a75", 
                          "interface": "internal", 
                          "region": "RegionOne", 
                          "region_id": "RegionOne", 
                          "url": "http://23.253.248.171:8080/v1/AUTH_5b50efd009b540559104ee3c03bbb2b7"
                        }
                      ], 
                      "id": "da1b1b5c529946fcb3ee3abdcf376fcb", 
                      "name": "swift", 
                      "type": "object-store"
                    }
                  ], 
                  "expires_at": "2015-11-05T22:00:11.000000Z", 
                  "extras": {}, 
                  "issued_at": "2015-11-05T21:32:30.505384Z", 
                  "methods": [
                    "token"
                  ], 
                  "project": {
                    "domain": {
                      "id": "default", 
                      "name": "Default"
                    }, 
                    "id": "5b50efd009b540559104ee3c03bbb2b7", 
                    "name": "admin"
                  }, 
                  "roles": [
                    {
                      "id": "5090055d6bd547dc83e0e8f070803708", 
                      "name": "admin"
                    }
                  ], 
                  "user": {
                    "domain": {
                      "id": "default", 
                      "name": "Default"
                    }, 
                    "id": "10a2e6e717a245d9acad3e5f97aeca3d", 
                    "name": "admin"
                  }
                }
              }
            }, 
            "headers": {
              "X-Auth-Token": {
                "description": "A valid authentication token for an administrative user.", 
                "format": "", 
                "type": "string"
              }, 
              "X-Subject-Token": {
                "description": "The authentication token.\n\nAn authentication response returns the token ID in this header\nrather than in the response body.", 
                "format": "", 
                "type": "string"
              }
            }, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Authenticates an identity and generates a token. Uses the token authentication method and scopes authorization to a project or domain.", 
        "tags": [
          "authenticate-v3"
        ], 
        "x-title": "Token authentication with scoped authorization"
      }, 
      "x-post-authenticateTokenUnscoped": {
        "consumes": [
          "application/json"
        ], 
        "description": "In the request body, provide the token ID.", 
        "operationId": "authenticateTokenUnscoped", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/authenticateTokenUnscoped"
            }
          }, 
          {
            "description": "(Since v3.1) The authentication response excludes the service\ncatalog. By default, the response includes the service catalog.", 
            "format": "", 
            "in": "query", 
            "name": "nocatalog", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "token": {
                  "audit_ids": [
                    "mAjXQhiYRyKwkB4qygdLVg"
                  ], 
                  "expires_at": "2015-11-05T22:00:11.000000Z", 
                  "extras": {}, 
                  "issued_at": "2015-11-05T21:00:33.819948Z", 
                  "methods": [
                    "token"
                  ], 
                  "user": {
                    "domain": {
                      "id": "default", 
                      "name": "Default"
                    }, 
                    "id": "10a2e6e717a245d9acad3e5f97aeca3d", 
                    "name": "admin"
                  }
                }
              }
            }, 
            "headers": {
              "X-Auth-Token": {
                "description": "A valid authentication token for an administrative user.", 
                "format": "", 
                "type": "string"
              }, 
              "X-Subject-Token": {
                "description": "The authentication token.\n\nAn authentication response returns the token ID in this header\nrather than in the response body.", 
                "format": "", 
                "type": "string"
              }
            }, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Authenticates an identity and generates a token. Uses the token authentication method. Authorization is unscoped.", 
        "tags": [
          "authenticate-v3"
        ], 
        "x-title": "Token authentication with unscoped authorization"
      }
    }, 
    "/v3/credentials": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Optionally, you can include the ``user_id`` query parameter in the\nURI to filter the response by a user.", 
        "operationId": "listCredentials", 
        "parameters": [
          {
            "description": "Filters the response by a user ID.", 
            "format": "", 
            "in": "query", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "credentials": [
                  {
                    "blob": "{\"access\": \"a42a27755ce6442596b049bd7dd8a563\", \"secret\": \"71faf1d40bb24c82b479b1c6fbbd9f0c\", \"trust_id\": null}", 
                    "id": "207e9b76935efc03804d3dd6ab52d22e9b22a0711e4ada4ff8b76165a07311d7", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/207e9b76935efc03804d3dd6ab52d22e9b22a0711e4ada4ff8b76165a07311d7"
                    }, 
                    "project_id": "6e01855f345f4c59812999b5e459137d", 
                    "type": "ec2", 
                    "user_id": "bb5476fd12884539b41d5a88f838d773"
                  }, 
                  {
                    "blob": "{\"access\": \"7da79ff0aa364e1396f067e352b9b79a\", \"secret\": \"7a18d68ba8834b799d396f3ff6f1e98c\", \"trust_id\": null}", 
                    "id": "2441494e52ab6d594a34d74586075cb299489bdd1e9389e3ab06467a4f460609", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/2441494e52ab6d594a34d74586075cb299489bdd1e9389e3ab06467a4f460609"
                    }, 
                    "project_id": "1a1d14690f3c4ec5bf5f321c5fde3c16", 
                    "type": "ec2", 
                    "user_id": "6f556708d04b4ea6bc72d7df2296b71a"
                  }, 
                  {
                    "blob": "{\"access\": \"db9c58a558534a10a070110de4f9f20c\", \"secret\": \"973e790b88db447ba6f93bca02bc745b\", \"trust_id\": null}", 
                    "id": "3397b204b5f04c495bcdc8f34c8a39996f280f9172658241873e15f070ec79d7", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/3397b204b5f04c495bcdc8f34c8a39996f280f9172658241873e15f070ec79d7"
                    }, 
                    "project_id": "7396e43183db40dcbf40dd727637b548", 
                    "type": "ec2", 
                    "user_id": "c14107e65d5c4a7f8894fc4b3fc209ff"
                  }, 
                  {
                    "blob": "{\"access\": \"817c6c3487a440c1a0b1d3f92b30ca37\", \"secret\": \"47d681117d1c46e69a0c9ec811dae2e9\", \"trust_id\": null}", 
                    "id": "352d5dd7a4aa19c4f2f23ee288bf65dc23a0bc293f40ffd2128ffe6a8cf3e871", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/352d5dd7a4aa19c4f2f23ee288bf65dc23a0bc293f40ffd2128ffe6a8cf3e871"
                    }, 
                    "project_id": "2bf9767f9db949ee8364262a28a23062", 
                    "type": "ec2", 
                    "user_id": "915cc5f8cca6466aba6c6be06cbabfdf"
                  }, 
                  {
                    "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
                    "id": "3d3367228f9c7665266604462ec60029bcd83ad89614021a80b2eb879c572510", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/3d3367228f9c7665266604462ec60029bcd83ad89614021a80b2eb879c572510"
                    }, 
                    "project_id": "731fc6f265cd486d900f16e84c5cb594", 
                    "type": "ec2", 
                    "user_id": "bb5476fd12884539b41d5a88f838d773"
                  }, 
                  {
                    "blob": "{\"access\": \"f2ba45670b504a518b46e920d760fde2\", \"secret\": \"bf7fff2b3a844730b2db793411756e55\", \"trust_id\": null}", 
                    "id": "6b7d803fc03b85866904b6b79e0a8fa1f4013b584163b4477eed96717eb402c0", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/6b7d803fc03b85866904b6b79e0a8fa1f4013b584163b4477eed96717eb402c0"
                    }, 
                    "project_id": "731fc6f265cd486d900f16e84c5cb594", 
                    "type": "ec2", 
                    "user_id": "bb5476fd12884539b41d5a88f838d773"
                  }, 
                  {
                    "blob": "{\"access\": \"a1525da4e7c0438ebf3058372d637b59\", \"secret\": \"c9165d2542b141e8b2a1ff61a5f5487c\", \"trust_id\": null}", 
                    "id": "7d391b869631e5c4836708ea3bb3e0a5cbe0481201b5f0ddd5685ad3b3faa564", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/7d391b869631e5c4836708ea3bb3e0a5cbe0481201b5f0ddd5685ad3b3faa564"
                    }, 
                    "project_id": "2bf9767f9db949ee8364262a28a23062", 
                    "type": "ec2", 
                    "user_id": "2b657f6742ac416697e6821b3b2ee785"
                  }, 
                  {
                    "blob": "{\"access\": \"7d7559359b57419eb5f5f5dcd65ab57d\", \"secret\": \"570652bcf8c2483c86eb29e9734eed3c\", \"trust_id\": null}", 
                    "id": "7ef4faa904ae7b8b4ddc7bad15b05ee359dad7d7a9b82861d4ad92fdbbb2eb4e", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/7ef4faa904ae7b8b4ddc7bad15b05ee359dad7d7a9b82861d4ad92fdbbb2eb4e"
                    }, 
                    "project_id": "731fc6f265cd486d900f16e84c5cb594", 
                    "type": "ec2", 
                    "user_id": "bb5476fd12884539b41d5a88f838d773"
                  }, 
                  {
                    "blob": "{\"access\": \"b3a6e5f4427c47e9b202264d91a19e49\", \"secret\": \"d9eb470f503f4b46932de38db7a79402\", \"trust_id\": null}", 
                    "id": "9c1c428d8e0e8338a5e16489ecfff9962f2b00f984ce4c7e9015e4003f478df8", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/9c1c428d8e0e8338a5e16489ecfff9962f2b00f984ce4c7e9015e4003f478df8"
                    }, 
                    "project_id": "a2672ecf9dd34c6980448b25a47e0947", 
                    "type": "ec2", 
                    "user_id": "aedb193e9bb8400485f8d8426f7a031f"
                  }, 
                  {
                    "blob": "{\"access\": \"1ed843b1bd4a409f9562400085adbaa4\", \"secret\": \"236ab24db1f04ec995fcf618ed4fc0f5\", \"trust_id\": null}", 
                    "id": "e2c35ac2becb0fca3c3c2f035692a4f46a9cbf3b6e86c8a47f5aafe837d78a05", 
                    "links": {
                      "self": "http://localhost:5000/v3/credentials/e2c35ac2becb0fca3c3c2f035692a4f46a9cbf3b6e86c8a47f5aafe837d78a05"
                    }, 
                    "project_id": "6e01855f345f4c59812999b5e459137d", 
                    "type": "ec2", 
                    "user_id": "c14107e65d5c4a7f8894fc4b3fc209ff"
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/credentials"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listCredentials_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all credentials.", 
        "tags": [
          "credentials"
        ], 
        "x-title": "List credentials"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The following example shows how to create an EC2-style credential.\nThe credential blob is a string that contains a JSON-serialized\ndictionary with the ``access`` and ``secret`` keys. This format is\nrequired when you specify the ``ec2`` type. To specify other\ncredentials, such as ``access_key``, change the type and contents\nof the data blob.", 
        "operationId": "createCredential", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createCredential"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "credential": {
                  "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
                  "id": "3d3367228f9c7665266604462ec60029bcd83ad89614021a80b2eb879c572510", 
                  "links": {
                    "self": "http://localhost:5000/v3/credentials/3d3367228f9c7665266604462ec60029bcd83ad89614021a80b2eb879c572510"
                  }, 
                  "project_id": "731fc6f265cd486d900f16e84c5cb594", 
                  "type": "ec2", 
                  "user_id": "bb5476fd12884539b41d5a88f838d773"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createCredential_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a credential.", 
        "tags": [
          "credentials"
        ], 
        "x-title": "Create credential"
      }
    }, 
    "/v3/credentials/{credential_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteCredential", 
        "parameters": [
          {
            "description": "The UUID for the credential.", 
            "format": "", 
            "in": "path", 
            "name": "credential_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a credential.", 
        "tags": [
          "credentials"
        ], 
        "x-title": "Delete credential"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showCredential", 
        "parameters": [
          {
            "description": "The UUID for the credential.", 
            "format": "", 
            "in": "path", 
            "name": "credential_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "credential": {
                  "blob": "{\"access\": \"a42a27755ce6442596b049bd7dd8a563\", \"secret\": \"71faf1d40bb24c82b479b1c6fbbd9f0c\", \"trust_id\": null}", 
                  "id": "207e9b76935efc03804d3dd6ab52d22e9b22a0711e4ada4ff8b76165a07311d7", 
                  "links": {
                    "self": "http://localhost:5000/v3/credentials/207e9b76935efc03804d3dd6ab52d22e9b22a0711e4ada4ff8b76165a07311d7"
                  }, 
                  "project_id": "6e01855f345f4c59812999b5e459137d", 
                  "type": "ec2", 
                  "user_id": "bb5476fd12884539b41d5a88f838d773"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showCredential_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a credential.", 
        "tags": [
          "credentials"
        ], 
        "x-title": "Show credential details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateCredential", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateCredential"
            }
          }, 
          {
            "description": "The UUID for the credential.", 
            "format": "", 
            "in": "path", 
            "name": "credential_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "credential": {
                  "blob": "{\"access\":\"181920\",\"secrete\":\"secretKey\"}", 
                  "id": "207e9b76935efc03804d3dd6ab52d22e9b22a0711e4ada4ff8b76165a07311d7", 
                  "links": {
                    "self": "http://localhost:5000/v3/credentials/207e9b76935efc03804d3dd6ab52d22e9b22a0711e4ada4ff8b76165a07311d7"
                  }, 
                  "project_id": "731fc6f265cd486d900f16e84c5cb594", 
                  "type": "ec2", 
                  "user_id": "bb5476fd12884539b41d5a88f838d773"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateCredential_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a credential.", 
        "tags": [
          "credentials"
        ], 
        "x-title": "Update credential"
      }
    }, 
    "/v3/domains": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listDomains", 
        "parameters": [
          {
            "description": "Filters the response by a domain name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by either enabled (``true``) or disabled\n(``false``) domains.\n\nUsers can authorize against an enabled domain and any of its\nprojects. Users that are owned by an enabled domain can\nauthenticate and receive additional authorization.\n\nUsers cannot authorize against a disabled domain or any of its\nprojects. Users that are owned by a disabled domain cannot\nauthenticate or receive additional authorization. All tokens that\nare authorized for a disabled domain or its projects become no\nlonger valid. If you reenable the domain, these tokens are not re-\nenabled.", 
            "format": "", 
            "in": "query", 
            "name": "enabled", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "domains": [
                  {
                    "description": "Used for swift functional testing", 
                    "enabled": true, 
                    "id": "5a75994a383c449184053ff7270c4e91", 
                    "links": {
                      "self": "http://localhost:5000/v3/domains/5a75994a383c449184053ff7270c4e91"
                    }, 
                    "name": "swift_test"
                  }, 
                  {
                    "description": "Owns users and tenants (i.e. projects) available on Identity API v2.", 
                    "enabled": true, 
                    "id": "default", 
                    "links": {
                      "self": "http://localhost:5000/v3/domains/default"
                    }, 
                    "name": "Default"
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/domains"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listDomains_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all domains.", 
        "tags": [
          "domains"
        ], 
        "x-title": "List domains"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createDomain", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createDomain"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "domain": {
                  "description": "Domain description", 
                  "enabled": true, 
                  "id": "161718", 
                  "links": {
                    "self": "http://identity:35357/v3/domains/161718"
                  }, 
                  "name": "myDomain"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createDomain_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a domain.", 
        "tags": [
          "domains"
        ], 
        "x-title": "Create domain"
      }
    }, 
    "/v3/domains/{domain_id}": {
      "delete": {
        "consumes": [], 
        "description": "To minimize the risk of accidentally deleting a domain, you must\nfirst disable the domain by using the update domain method.\n\nWhen you delete a domain, this call also deletes all entities owned\nby it, such as users, groups, and projects, and any credentials and\ngranted roles that relate to those entities.\n\n(Since v3.6) The deletion of a non-leaf domain in a domain\nhierarchy tree is not allowed and fails with a ``Bad Request\n(400)`` response code.\n\nIf you try to delete an enabled domain, this call returns the\n``Forbidden (403)`` response code.", 
        "operationId": "deleteDomain", 
        "parameters": [
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a domain.", 
        "tags": [
          "domains"
        ], 
        "x-title": "Delete domain"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showDomain", 
        "parameters": [
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "domain": {
                  "description": "Owns users and tenants (i.e. projects) available on Identity API v2.", 
                  "enabled": true, 
                  "id": "default", 
                  "links": {
                    "self": "http://localhost:5000/v3/domains/default"
                  }, 
                  "name": "Default"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showDomain_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a domain.", 
        "tags": [
          "domains"
        ], 
        "x-title": "Show domain details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateDomain", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateDomain"
            }
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "domain": {
                  "description": "Owns users and projects on Identity API v2.", 
                  "enabled": true, 
                  "id": "default", 
                  "links": {
                    "self": "http://localhost:5000/v3/domains/default"
                  }, 
                  "name": "Default"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateDomain_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a domain.", 
        "tags": [
          "domains"
        ], 
        "x-title": "Update domain"
      }
    }, 
    "/v3/domains/{domain_id}/config": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteDomainConfig", 
        "parameters": [
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a domain configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Delete domain configuration"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showDomainConfig", 
        "parameters": [
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "config": {
                  "identity": {
                    "driver": "keystone.identity.backends.ldap.Identity"
                  }, 
                  "ldap": {
                    "url": "http://myldap/root", 
                    "user_tree_dn": "ou=Users,dc=root,dc=org"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showDomainConfig_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a domain configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Show domain configuration"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateDomainConfig", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateDomainConfig"
            }
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "config": {
                  "identity": {
                    "driver": "keystone.identity.backends.ldap.Identity"
                  }, 
                  "ldap": {
                    "url": "http://myldap/my_new_root", 
                    "user_tree_dn": "ou=Users,dc=my_new_root,dc=org"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateDomainConfig_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a domain configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Update domain configuration"
      }
    }, 
    "/v3/domains/{domain_id}/config/{group}": {
      "delete": {
        "consumes": [], 
        "description": "The API supports only the ``identity`` and ``ldap`` groups.", 
        "operationId": "deleteDomainConfigGroup", 
        "parameters": [
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group name, which is ``ldap`` or ``identity``.", 
            "format": "", 
            "in": "path", 
            "name": "group", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a domain group configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Delete domain group configuration"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The API supports only the ``identity`` and ``ldap`` groups.", 
        "operationId": "showDomainConfigGroup", 
        "parameters": [
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group name, which is ``ldap`` or ``identity``.", 
            "format": "", 
            "in": "path", 
            "name": "group", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ldap": {
                  "url": "http://myldap/root", 
                  "user_tree_dn": "ou=Users,dc=root,dc=org"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showDomainConfigGroup_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a domain group configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Show domain group configuration"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "The API supports only the ``identity`` and ``ldap`` groups. If you\ntry to set configuration options for other groups, this call fails\nwith the ``Forbidden (403)`` response code.", 
        "operationId": "updateDomainConfigGroup", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateDomainConfigGroup"
            }
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group name, which is ``ldap`` or ``identity``.", 
            "format": "", 
            "in": "path", 
            "name": "group", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "config": {
                  "identity": {
                    "driver": "keystone.identity.backends.ldap.Identity"
                  }, 
                  "ldap": {
                    "url": "http://myldap/my_new_root", 
                    "user_tree_dn": "ou=Users,dc=my_new_root,dc=org"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateDomainConfigGroup_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a domain group configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Update domain group configuration"
      }
    }, 
    "/v3/domains/{domain_id}/config/{group}/{option}": {
      "delete": {
        "consumes": [], 
        "description": "The API supports only the ``identity`` and ``ldap`` groups. For the\n``ldap`` group, a valid value is ``url`` or ``user_tree_dn``. For\nthe ``identity`` group, a valid value is ``driver``.", 
        "operationId": "deleteDomainConfigGroupOption", 
        "parameters": [
          {
            "description": "The option name. For the ``ldap`` group, a valid value is ``url``\nor ``user_tree_dn``. For the ``identity`` group, a valid value is\n``driver``.", 
            "format": "", 
            "in": "path", 
            "name": "option", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group name, which is ``ldap`` or ``identity``.", 
            "format": "", 
            "in": "path", 
            "name": "group", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a domain group option configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Delete domain group option configuration"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The API supports only the ``identity`` and ``ldap`` groups. For the\n``ldap`` group, a valid value is ``url`` or ``user_tree_dn``. For\nthe ``identity`` group, a valid value is ``driver``.", 
        "operationId": "showDomainConfigGroupOption", 
        "parameters": [
          {
            "description": "The option name. For the ``ldap`` group, a valid value is ``url``\nor ``user_tree_dn``. For the ``identity`` group, a valid value is\n``driver``.", 
            "format": "", 
            "in": "path", 
            "name": "option", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group name, which is ``ldap`` or ``identity``.", 
            "format": "", 
            "in": "path", 
            "name": "group", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "url": "http://myldap/root"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showDomainConfigGroupOption_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a domain group option configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Show domain group option configuration"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "The API supports only the ``identity`` and ``ldap`` groups. For the\n``ldap`` group, a valid value is ``url`` or ``user_tree_dn``. For\nthe ``identity`` group, a valid value is ``driver``.", 
        "operationId": "updateDomainConfigGroupOption", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateDomainConfigGroupOption"
            }
          }, 
          {
            "description": "The option name. For the ``ldap`` group, a valid value is ``url``\nor ``user_tree_dn``. For the ``identity`` group, a valid value is\n``driver``.", 
            "format": "", 
            "in": "path", 
            "name": "option", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group name, which is ``ldap`` or ``identity``.", 
            "format": "", 
            "in": "path", 
            "name": "group", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "config": {
                  "identity": {
                    "driver": "keystone.identity.backends.ldap.Identity"
                  }, 
                  "ldap": {
                    "url": "http://myldap/my_other_root", 
                    "user_tree_dn": "ou=Users,dc=my_new_root,dc=org"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateDomainConfigGroupOption_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a domain group option configuration.", 
        "tags": [
          "domains-config-v3"
        ], 
        "x-title": "Update domain group option configuration"
      }
    }, 
    "/v3/domains/{domain_id}/groups/{group_id}/roles": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listDomainGroupRoles", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/domains/161718/groups/101112/roles"
                }, 
                "roles": [
                  {
                    "id": "123456", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123456"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "123457", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123457"
                    }, 
                    "name": "manager"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists roles for a group on a domain.", 
        "tags": [
          "roles"
        ], 
        "x-title": "List roles for group on domain"
      }
    }, 
    "/v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "revokeDomainGroupRole", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Revokes a role from a group on a domain.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Revoke role from group on domain"
      }, 
      "head": {
        "consumes": [], 
        "description": "", 
        "operationId": "checkDomainGroupRole", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Validates that a group has a role on a domain.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Check whether group has role on domain"
      }, 
      "put": {
        "consumes": [], 
        "description": "", 
        "operationId": "grantDomainGroupRole", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Grants a role to a group on a domain.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Grant role to group on domain"
      }
    }, 
    "/v3/domains/{domain_id}/users/{user_id}/roles": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listDomainUserRoles", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/domains/161718/users/313233/roles"
                }, 
                "roles": [
                  {
                    "id": "123456", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123456"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "123457", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123457"
                    }, 
                    "name": "manager"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listDomainUserRoles_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists roles for a user on a domain.", 
        "tags": [
          "roles"
        ], 
        "x-title": "List roles for user on domain"
      }
    }, 
    "/v3/domains/{domain_id}/users/{user_id}/roles/{role_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "revokeDomainUserRole", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Revokes a role from a user on a domain.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Revoke role from user on domain"
      }, 
      "head": {
        "consumes": [], 
        "description": "", 
        "operationId": "checkDomainUserRole", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Validates that a user has a role on a domain.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Check whether user has role on domain"
      }, 
      "put": {
        "consumes": [], 
        "description": "", 
        "operationId": "grantDomainUserRole", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Grants a role to a user on a domain.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Grant role to user on domain"
      }
    }, 
    "/v3/endpoints": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listEndpoints", 
        "parameters": [
          {
            "description": "Filters the response by an interface.", 
            "format": "", 
            "in": "query", 
            "name": "interface", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a service ID.", 
            "format": "", 
            "in": "query", 
            "name": "service_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "endpoints": [
                  {
                    "enabled": true, 
                    "id": "0649c5be323f4792afbc1efdd480847d", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/0649c5be323f4792afbc1efdd480847d"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "ef6b15e425814dc69d830361baae0e33", 
                    "url": "http://23.253.211.234:8080/v1/AUTH_$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "06b85ed2aa57413ca0b1813daed329a9", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/06b85ed2aa57413ca0b1813daed329a9"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "98cfd5347fb84601b2f88f3afd8dddd4", 
                    "url": "http://23.253.211.234:8776/v1/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "070102f162e04f91a52c7887d0604163", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/070102f162e04f91a52c7887d0604163"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "312f401c14d143d8b3e3f4daf0418add", 
                    "url": "http://23.253.211.234:8774/v2.1/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "0fd73b621e424cc0a172853264519cbc", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/0fd73b621e424cc0a172853264519cbc"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "17a877162c8e405b81d563d95ec4e3f8", 
                    "url": "http://23.253.211.234:8776/v2/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "1899667a3b1544ccb355fdfc4184d7d7", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/1899667a3b1544ccb355fdfc4184d7d7"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "9b67aed49e0d4c2fb46ca9476a3b9243", 
                    "url": "http://23.253.211.234:9292"
                  }, 
                  {
                    "enabled": true, 
                    "id": "3b3611ea2e554ee7b85e7f2213b02c33", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/3b3611ea2e554ee7b85e7f2213b02c33"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "2a662f90700b4478929d4b24cc6a320b", 
                    "url": "http://23.253.211.234:9696/"
                  }, 
                  {
                    "enabled": true, 
                    "id": "3ea2b420306f48c6bf0cf51c2fefea03", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/3ea2b420306f48c6bf0cf51c2fefea03"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "736fb9bb21ef498287db9abcc55b20d9", 
                    "url": "http://23.253.211.234:8774/v2/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "41b122182f574a44b0e246aff6ca29c5", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/41b122182f574a44b0e246aff6ca29c5"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "9b67aed49e0d4c2fb46ca9476a3b9243", 
                    "url": "http://23.253.211.234:9292"
                  }, 
                  {
                    "enabled": true, 
                    "id": "44a736dd5eeb4347acec66b5f11c8f80", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/44a736dd5eeb4347acec66b5f11c8f80"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "2a662f90700b4478929d4b24cc6a320b", 
                    "url": "http://23.253.211.234:9696/"
                  }, 
                  {
                    "enabled": true, 
                    "id": "499e8f6718ef466ba3fb315fa8f9e0b8", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/499e8f6718ef466ba3fb315fa8f9e0b8"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "312f401c14d143d8b3e3f4daf0418add", 
                    "url": "http://23.253.211.234:8774/v2.1/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "545b1e9f126248428c5cdbec7420c353", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/545b1e9f126248428c5cdbec7420c353"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "736fb9bb21ef498287db9abcc55b20d9", 
                    "url": "http://23.253.211.234:8774/v2/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "629dc5a64e954ad09a45e87bc48299ba", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/629dc5a64e954ad09a45e87bc48299ba"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "2a662f90700b4478929d4b24cc6a320b", 
                    "url": "http://23.253.211.234:9696/"
                  }, 
                  {
                    "enabled": true, 
                    "id": "642a329a660544fdaab2420c0da7d49b", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/642a329a660544fdaab2420c0da7d49b"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "ef6b15e425814dc69d830361baae0e33", 
                    "url": "http://23.253.211.234:8080/v1/AUTH_$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "72f8fc8536e44a19bc3388218efcc741", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/72f8fc8536e44a19bc3388218efcc741"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "9b67aed49e0d4c2fb46ca9476a3b9243", 
                    "url": "http://23.253.211.234:9292"
                  }, 
                  {
                    "enabled": true, 
                    "id": "74121e71962e4947ac622c41706f0ee7", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/74121e71962e4947ac622c41706f0ee7"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "17a877162c8e405b81d563d95ec4e3f8", 
                    "url": "http://23.253.211.234:8776/v2/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "7431a4f971dc4abb8d0e387434a06817", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/7431a4f971dc4abb8d0e387434a06817"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "9242e05f0c23467bbd1cf1f7a6e5e596", 
                    "url": "http://23.253.211.234:8773/"
                  }, 
                  {
                    "enabled": true, 
                    "id": "7cffc75a14ca4334b458e475750bd84f", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/7cffc75a14ca4334b458e475750bd84f"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "efeb249cbcd3412496bc4b194ea058da", 
                    "url": "http://23.253.211.234:5000/v2.0"
                  }, 
                  {
                    "enabled": true, 
                    "id": "a422a6fa163b4a6ba8309e067ce3750b", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/a422a6fa163b4a6ba8309e067ce3750b"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "312f401c14d143d8b3e3f4daf0418add", 
                    "url": "http://23.253.211.234:8774/v2.1/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "ac6a74efe9944afdb129d4df70cde0ec", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/ac6a74efe9944afdb129d4df70cde0ec"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "9242e05f0c23467bbd1cf1f7a6e5e596", 
                    "url": "http://23.253.211.234:8773/"
                  }, 
                  {
                    "enabled": true, 
                    "id": "adf43d7ff0d14d0fa1e8a5187f40e1af", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/adf43d7ff0d14d0fa1e8a5187f40e1af"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "efeb249cbcd3412496bc4b194ea058da", 
                    "url": "http://23.253.211.234:5000/v2.0"
                  }, 
                  {
                    "enabled": true, 
                    "id": "b18be64a118244d39217db72534f8b33", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/b18be64a118244d39217db72534f8b33"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "736fb9bb21ef498287db9abcc55b20d9", 
                    "url": "http://23.253.211.234:8774/v2/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "c828983c9c214d819674649aa693cdff", 
                    "interface": "public", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/c828983c9c214d819674649aa693cdff"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "98cfd5347fb84601b2f88f3afd8dddd4", 
                    "url": "http://23.253.211.234:8776/v1/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "d062ebdb244f447498768fc0ced32e2d", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/d062ebdb244f447498768fc0ced32e2d"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "98cfd5347fb84601b2f88f3afd8dddd4", 
                    "url": "http://23.253.211.234:8776/v1/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "d281219ec0df4cf2b7c681463d5dcf51", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/d281219ec0df4cf2b7c681463d5dcf51"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "17a877162c8e405b81d563d95ec4e3f8", 
                    "url": "http://23.253.211.234:8776/v2/$(tenant_id)s"
                  }, 
                  {
                    "enabled": true, 
                    "id": "d8e0824a17404431b5d978a87ac1bede", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/d8e0824a17404431b5d978a87ac1bede"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "efeb249cbcd3412496bc4b194ea058da", 
                    "url": "http://23.253.211.234:35357/v2.0"
                  }, 
                  {
                    "enabled": true, 
                    "id": "d9b54bdc063046828ac3c6487bea8047", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/d9b54bdc063046828ac3c6487bea8047"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "9242e05f0c23467bbd1cf1f7a6e5e596", 
                    "url": "http://23.253.211.234:8773/"
                  }, 
                  {
                    "enabled": true, 
                    "id": "ea74f9771dec475eabfc2cdff5364413", 
                    "interface": "admin", 
                    "links": {
                      "self": "http://localhost:5000/v3/endpoints/ea74f9771dec475eabfc2cdff5364413"
                    }, 
                    "region": "RegionOne", 
                    "region_id": "RegionOne", 
                    "service_id": "ef6b15e425814dc69d830361baae0e33", 
                    "url": "http://23.253.211.234:8080"
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/endpoints"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listEndpoints_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all available endpoints.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "List endpoints"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createEndpoint", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createEndpoint"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "endpoint": {
                  "enabled": true, 
                  "id": "e9b475a8742d4ff1a81b353c5a37e138", 
                  "interface": "public", 
                  "links": {
                    "self": "http://localhost:5000/v3/endpoints/e9b475a8742d4ff1a81b353c5a37e138"
                  }, 
                  "name": "ec2-2", 
                  "region": "RegionOne", 
                  "region_id": "RegionOne", 
                  "service_id": "9242e05f0c23467bbd1cf1f7a6e5e596", 
                  "url": "http://identity:35357/v3/endpoints/828384"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createEndpoint_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates an endpoint.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "Create endpoint"
      }
    }, 
    "/v3/endpoints/{endpoint_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteEndpoint", 
        "parameters": [
          {
            "description": "The endpoint ID.", 
            "format": "", 
            "in": "path", 
            "name": "endpoint_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes an endpoint.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "Delete endpoint"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showEndpoint", 
        "parameters": [
          {
            "description": "The endpoint ID.", 
            "format": "", 
            "in": "path", 
            "name": "endpoint_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "endpoint": {
                  "enabled": true, 
                  "id": "01c3d5b92f7841ac83fb4b26173c12c7", 
                  "interface": "admin", 
                  "links": {
                    "self": "http://localhost:5000/v3/endpoints/01c3d5b92f7841ac83fb4b26173c12c7"
                  }, 
                  "region": "RegionOne", 
                  "region_id": "RegionOne", 
                  "service_id": "3b2d6ad7e02c4cde8498a547601f1b8f", 
                  "url": "http://23.253.211.234:9696/"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showEndpoint_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for an endpoint.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "Show endpoint details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateEndpoint", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateEndpoint"
            }
          }, 
          {
            "description": "The endpoint ID.", 
            "format": "", 
            "in": "path", 
            "name": "endpoint_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "endpoint": {
                  "id": "828384", 
                  "interface": "internal", 
                  "links": {
                    "self": "http://identity:35357/v3/endpoints/828384"
                  }, 
                  "name": "the internal volume endpoint", 
                  "region_id": "north", 
                  "service_id": "686766", 
                  "url": "http://identity:35357/v3/endpoints/828384"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateEndpoint_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates an endpoint.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "Update endpoint"
      }
    }, 
    "/v3/groups": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listGroups", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "groups": [
                  {
                    "description": "non-admin group", 
                    "domain_id": "default", 
                    "id": "96372bbb152f475aa37e9a76a25a029c", 
                    "links": {
                      "self": "http://localhost:5000/v3/groups/96372bbb152f475aa37e9a76a25a029c"
                    }, 
                    "name": "nonadmins"
                  }, 
                  {
                    "description": "openstack admin group", 
                    "domain_id": "default", 
                    "id": "9ce0ad4e58a84d7a97b92f7955d10c92", 
                    "links": {
                      "self": "http://localhost:5000/v3/groups/9ce0ad4e58a84d7a97b92f7955d10c92"
                    }, 
                    "name": "admins"
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/groups"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listGroups_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists groups.", 
        "tags": [
          "groups"
        ], 
        "x-title": "List groups"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createGroup", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createGroup"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "group": {
                  "description": "Contract developers", 
                  "domain_id": "default", 
                  "id": "c0d675eac29945ad9dfd08aa1bb75751", 
                  "links": {
                    "self": "http://localhost:5000/v3/groups/c0d675eac29945ad9dfd08aa1bb75751"
                  }, 
                  "name": "Contract developers"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createGroup_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a group.", 
        "tags": [
          "groups"
        ], 
        "x-title": "Create group"
      }
    }, 
    "/v3/groups/{group_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteGroup", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a group.", 
        "tags": [
          "groups"
        ], 
        "x-title": "Delete group"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showGroup", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "group": {
                  "description": "Contract developers", 
                  "domain_id": "default", 
                  "id": "c0d675eac29945ad9dfd08aa1bb75751", 
                  "links": {
                    "self": "http://localhost:5000/v3/groups/c0d675eac29945ad9dfd08aa1bb75751"
                  }, 
                  "name": "Contract developers"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showGroup_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a group.", 
        "tags": [
          "groups"
        ], 
        "x-title": "Show group details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the back-end driver does not support this functionality, the\ncall returns the ``Not Implemented (501)`` response code.", 
        "operationId": "updateGroup", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateGroup"
            }
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "group": {
                  "description": "Contract developers 2016", 
                  "domain_id": "default", 
                  "id": "c0d675eac29945ad9dfd08aa1bb75751", 
                  "links": {
                    "self": "http://localhost:5000/v3/groups/c0d675eac29945ad9dfd08aa1bb75751"
                  }, 
                  "name": "Contract developers 2016"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateGroup_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a group.", 
        "tags": [
          "groups"
        ], 
        "x-title": "Update group"
      }
    }, 
    "/v3/groups/{group_id}/users": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listGroupUsers", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/groups/9ce0ad4e58a84d7a97b92f7955d10c92/users"
                }, 
                "users": [
                  {
                    "domain_id": "default", 
                    "email": null, 
                    "enabled": true, 
                    "id": "fff603a0829d41e48bc0dd0d72ad61ce", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/fff603a0829d41e48bc0dd0d72ad61ce"
                    }, 
                    "name": "admin"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listGroupUsers_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists the users that belong to a group.", 
        "tags": [
          "groups"
        ], 
        "x-title": "List users in group"
      }
    }, 
    "/v3/groups/{group_id}/users/{user_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "removeUserFromGroup", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a user from a group.", 
        "tags": [
          "groups"
        ], 
        "x-title": "Remove user from group"
      }, 
      "head": {
        "consumes": [], 
        "description": "", 
        "operationId": "checkUserInGroup", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Validates that a user belongs to a group.", 
        "tags": [
          "groups"
        ], 
        "x-title": "Check whether user belongs to group"
      }, 
      "put": {
        "consumes": [], 
        "description": "", 
        "operationId": "addUserToGroup", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Adds a user to a group.", 
        "tags": [
          "groups"
        ], 
        "x-title": "Add user to group"
      }
    }, 
    "/v3/policies": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listPolicies", 
        "parameters": [
          {
            "description": "Filters the response by a MIME media type for the serialized policy\nblob. For example, ``application/json``.", 
            "format": "", 
            "in": "query", 
            "name": "type", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/policies"
                }, 
                "policies": [
                  {
                    "blob": {
                      "foobar_user": [
                        "role:compute-user"
                      ]
                    }, 
                    "id": "717273", 
                    "links": {
                      "self": "http://identity:35357/v3/policies/717273"
                    }, 
                    "project_id": "456789", 
                    "type": "application/json", 
                    "user_id": "616263"
                  }, 
                  {
                    "blob": {
                      "foobar_user": [
                        "role:compute-user"
                      ]
                    }, 
                    "id": "717274", 
                    "links": {
                      "self": "http://identity:35357/v3/policies/717274"
                    }, 
                    "project_id": "456789", 
                    "type": "application/json", 
                    "user_id": "616263"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listPolicies_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists policies.", 
        "tags": [
          "policies"
        ], 
        "x-title": "List policies"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createPolicy"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "policy": {
                  "blob": "{'foobar_user': 'role:compute-user'}", 
                  "id": "88f5b83f8f8e41daba4c25eed1a7bbc6", 
                  "links": {
                    "self": "http://identity:35357/v3/policies/88f5b83f8f8e41daba4c25eed1a7bbc6"
                  }, 
                  "project_id": "0426ac1e48f642ef9544c2251e07e261", 
                  "type": "application/json", 
                  "user_id": "0ffd248c55b443eaac5253b4e9cbf9b5"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createPolicy_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a policy.", 
        "tags": [
          "policies"
        ], 
        "x-title": "Create policy"
      }
    }, 
    "/v3/policies/{policy_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deletePolicy", 
        "parameters": [
          {
            "description": "The policy ID.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a policy.", 
        "tags": [
          "policies"
        ], 
        "x-title": "Delete policy"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showPolicy", 
        "parameters": [
          {
            "description": "The policy ID.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "policy": {
                  "blob": {
                    "foobar_user": [
                      "role:compute-user"
                    ]
                  }, 
                  "id": "717273", 
                  "links": {
                    "self": "http://identity:35357/v3/policies/717273"
                  }, 
                  "project_id": "456789", 
                  "type": "application/json", 
                  "user_id": "616263"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showPolicy_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a policy.", 
        "tags": [
          "policies"
        ], 
        "x-title": "Show policy details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updatePolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updatePolicy"
            }
          }, 
          {
            "description": "The policy ID.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "policy": {
                  "blob": {
                    "foobar_user": [
                      "role:compute-user"
                    ]
                  }, 
                  "id": "717273", 
                  "links": {
                    "self": "http://identity:35357/v3/policies/717273"
                  }, 
                  "project_id": "456789", 
                  "type": "application/json", 
                  "user_id": "616263"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updatePolicy_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a policy.", 
        "tags": [
          "policies"
        ], 
        "x-title": "Update policy"
      }
    }, 
    "/v3/projects": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listProjects", 
        "parameters": [
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "query", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "(Since v3.4) Filters the response by a parent ID.", 
            "format": "", 
            "in": "query", 
            "name": "parent_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a project name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by either enabled (``true``) or disabled\n(``false``) projects.", 
            "format": "", 
            "in": "query", 
            "name": "enabled", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/projects"
                }, 
                "projects": [
                  {
                    "description": null, 
                    "domain_id": "default", 
                    "enabled": true, 
                    "id": "0c4e939acacf4376bdcd1129f1a054ad", 
                    "links": {
                      "self": "http://localhost:5000/v3/projects/0c4e939acacf4376bdcd1129f1a054ad"
                    }, 
                    "name": "admin", 
                    "parent_id": null
                  }, 
                  {
                    "description": null, 
                    "domain_id": "default", 
                    "enabled": true, 
                    "id": "0cbd49cbf76d405d9c86562e1d579bd3", 
                    "links": {
                      "self": "http://localhost:5000/v3/projects/0cbd49cbf76d405d9c86562e1d579bd3"
                    }, 
                    "name": "demo", 
                    "parent_id": null
                  }, 
                  {
                    "description": null, 
                    "domain_id": "default", 
                    "enabled": true, 
                    "id": "2db68fed84324f29bb73130c6c2094fb", 
                    "links": {
                      "self": "http://localhost:5000/v3/projects/2db68fed84324f29bb73130c6c2094fb"
                    }, 
                    "name": "swifttenanttest2", 
                    "parent_id": null
                  }, 
                  {
                    "description": null, 
                    "domain_id": "default", 
                    "enabled": true, 
                    "id": "3d594eb0f04741069dbbb521635b21c7", 
                    "links": {
                      "self": "http://localhost:5000/v3/projects/3d594eb0f04741069dbbb521635b21c7"
                    }, 
                    "name": "service", 
                    "parent_id": null
                  }, 
                  {
                    "description": null, 
                    "domain_id": "default", 
                    "enabled": true, 
                    "id": "43ebde53fc314b1c9ea2b8c5dc744927", 
                    "links": {
                      "self": "http://localhost:5000/v3/projects/43ebde53fc314b1c9ea2b8c5dc744927"
                    }, 
                    "name": "swifttenanttest1", 
                    "parent_id": null
                  }, 
                  {
                    "description": "", 
                    "domain_id": "1bc2169ca88e4cdaaba46d4c15390b65", 
                    "enabled": true, 
                    "id": "4b1eb781a47440acb8af9850103e537f", 
                    "links": {
                      "self": "http://localhost:5000/v3/projects/4b1eb781a47440acb8af9850103e537f"
                    }, 
                    "name": "swifttenanttest4", 
                    "parent_id": null
                  }, 
                  {
                    "description": null, 
                    "domain_id": "default", 
                    "enabled": true, 
                    "id": "5961c443439d4fcebe42643723755e9d", 
                    "links": {
                      "self": "http://localhost:5000/v3/projects/5961c443439d4fcebe42643723755e9d"
                    }, 
                    "name": "invisible_to_admin", 
                    "parent_id": null
                  }, 
                  {
                    "description": null, 
                    "domain_id": "default", 
                    "enabled": true, 
                    "id": "fdb8424c4e4f4c0ba32c52e2de3bd80e", 
                    "links": {
                      "self": "http://localhost:5000/v3/projects/fdb8424c4e4f4c0ba32c52e2de3bd80e"
                    }, 
                    "name": "alt_demo", 
                    "parent_id": null
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listProjects_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists projects.", 
        "tags": [
          "projects"
        ], 
        "x-title": "List projects"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createProject", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createProject"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "project": {
                  "description": "My new project", 
                  "domain_id": "default", 
                  "enabled": true, 
                  "id": "93ebbcc35335488b96ff9cd7d18cbb2e", 
                  "is_domain": true, 
                  "links": {
                    "self": "http://localhost:5000/v3/projects/93ebbcc35335488b96ff9cd7d18cbb2e"
                  }, 
                  "name": "myNewProject", 
                  "parent_id": null
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createProject_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a project.", 
        "tags": [
          "projects"
        ], 
        "x-title": "Create project"
      }
    }, 
    "/v3/projects/{project_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteProject", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a project.", 
        "tags": [
          "projects"
        ], 
        "x-title": "Delete project"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showProject", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "project": {
                  "description": null, 
                  "domain_id": "default", 
                  "enabled": true, 
                  "id": "0c4e939acacf4376bdcd1129f1a054ad", 
                  "links": {
                    "self": "http://localhost:5000/v3/projects/0c4e939acacf4376bdcd1129f1a054ad"
                  }, 
                  "name": "admin", 
                  "parent_id": null
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showProject_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a project.", 
        "tags": [
          "projects"
        ], 
        "x-title": "Show project details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateProject", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateProject"
            }
          }, 
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "project": {
                  "description": "My updated project", 
                  "domain_id": "default", 
                  "enabled": true, 
                  "extra": {
                    "is_domain": true
                  }, 
                  "id": "93ebbcc35335488b96ff9cd7d18cbb2e", 
                  "is_domain": true, 
                  "links": {
                    "self": "http://localhost:5000/v3/projects/93ebbcc35335488b96ff9cd7d18cbb2e"
                  }, 
                  "name": "myUpdatedProject", 
                  "parent_id": null
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateProject_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a project.", 
        "tags": [
          "projects"
        ], 
        "x-title": "Update project"
      }
    }, 
    "/v3/projects/{project_id}/cascade": {
      "delete": {
        "consumes": [], 
        "description": "A project subtree includes all projects beneath the parent project\nin the hierarchy. You must disable the projects in the subtree\nbefore you perform this operation.", 
        "operationId": "deleteProjectSubtree", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since v3.6) Deletes a project and its entire subtree.", 
        "tags": [
          "projects"
        ], 
        "x-title": "Delete project subtree"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "A project subtree includes all projects beneath the parent project\nin the hierarchy.\n\nIf you include attributes other than the ``enabled`` attribute,\nthis call fails and returns the ``Bad Request (400)`` response\ncode.\n\nIf you perform this action against a project that acts as a domain\n(``is_domain`` is set to ``true``, this call fails and returns the\n``Forbidden (403)`` response code.", 
        "operationId": "enableProject", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/enableProject"
            }
          }, 
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "project": {
                  "description": "My updated project", 
                  "domain_id": "default", 
                  "enabled": true, 
                  "extra": {
                    "is_domain": true
                  }, 
                  "id": "93ebbcc35335488b96ff9cd7d18cbb2e", 
                  "is_domain": true, 
                  "links": {
                    "self": "http://localhost:5000/v3/projects/93ebbcc35335488b96ff9cd7d18cbb2e"
                  }, 
                  "name": "myUpdatedProject", 
                  "parent_id": null
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/enableProject_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since v3.6) Enables or disables a project and its entire subtree.", 
        "tags": [
          "projects"
        ], 
        "x-title": "Enable or disable project and its subtree"
      }
    }, 
    "/v3/projects/{project_id}/groups/{group_id}/roles": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listProjectGroupRoles", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/projects/456789/groups/101112/roles"
                }, 
                "roles": [
                  {
                    "id": "123456", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123456"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "123457", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123457"
                    }, 
                    "name": "manager"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists roles for a group on a project.", 
        "tags": [
          "roles"
        ], 
        "x-title": "List roles for group on project"
      }
    }, 
    "/v3/projects/{project_id}/groups/{group_id}/roles/{role_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "revokeProjectGroupRole", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Revokes a role from a group on a project.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Revoke role from group on project"
      }, 
      "head": {
        "consumes": [], 
        "description": "", 
        "operationId": "checkProjectGroupRole", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Validates that a group has a role on a project.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Check whether group has role on project"
      }, 
      "put": {
        "consumes": [], 
        "description": "", 
        "operationId": "grantProjectGroupRole", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Grants a role to a group on a project.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Grant role to group on project"
      }
    }, 
    "/v3/projects/{project_id}/users/{user_id}/roles": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listProjectUserRoles", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/projects/9e5a15e2c0dd42aab0990a463e839ac1/users/b964a9e51c0046a4a84d3f83a135a97c/roles"
                }, 
                "roles": [
                  {
                    "id": "3b5347fa7a144008ba57c0acea469cc3", 
                    "links": {
                      "self": "http://localhost:5000/v3/roles/3b5347fa7a144008ba57c0acea469cc3"
                    }, 
                    "name": "admin"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists roles for a user on a project.", 
        "tags": [
          "roles"
        ], 
        "x-title": "List roles for user on project"
      }
    }, 
    "/v3/projects/{project_id}/users/{user_id}/roles/{role_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "revokeProjectUserRole", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Revokes a role from a user on a project.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Revoke role from user on project"
      }, 
      "head": {
        "consumes": [], 
        "description": "", 
        "operationId": "checkProjectUserRole", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Validates that a user has a role on a project.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Check whether user has role on project"
      }, 
      "put": {
        "consumes": [], 
        "description": "", 
        "operationId": "grantProjectUserRole", 
        "parameters": [
          {
            "description": "The project ID.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Grants a role to a user on a project.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Grant role to user on project"
      }
    }, 
    "/v3/regions": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listRegions", 
        "parameters": [
          {
            "description": "Filters the response by a parent region, by ID.", 
            "format": "", 
            "in": "query", 
            "name": "parent_region_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/regions"
                }, 
                "regions": [
                  {
                    "description": "", 
                    "id": "RegionOne", 
                    "links": {
                      "self": "http://localhost:5000/v3/regions/RegionOne"
                    }, 
                    "parent_region_id": null
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listRegions_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists regions.", 
        "tags": [
          "regions-v3"
        ], 
        "x-title": "List regions"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "When you create the region, you can optionally specify a region ID.\nIf you include characters in the region ID that are not allowed in\na URI, you must URL-encode the ID. If you omit an ID, the API\nassigns an ID to the region.\n\nThe following errors might occur:\n\n- ``Not Found (404)``. The parent region ID does not exist.\n\n- ``Conflict (409)``. The parent region ID would form a circular\n  relationship.\n\n- ``Conflict (409)``. The user-defined region ID is not unique to\n  the OpenStack deployment.", 
        "operationId": "createRegion", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createRegion"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "region": {
                  "description": "My subregion", 
                  "id": "RegionOneSubRegion", 
                  "links": {
                    "self": "http://localhost:5000/v3/regions/RegionOneSubRegion"
                  }, 
                  "parent_region_id": "RegionOne"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createRegion_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a region.", 
        "tags": [
          "regions-v3"
        ], 
        "x-title": "Create region"
      }
    }, 
    "/v3/regions/{region_id}": {
      "delete": {
        "consumes": [], 
        "description": "The following error might occur:\n\n- ``Conflict (409)``. The region cannot be deleted because it has\n  child regions.", 
        "operationId": "deleteRegion", 
        "parameters": [
          {
            "description": "The region ID.", 
            "format": "", 
            "in": "path", 
            "name": "region_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a region.", 
        "tags": [
          "regions-v3"
        ], 
        "x-title": "Delete region"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showRegion", 
        "parameters": [
          {
            "description": "The region ID.", 
            "format": "", 
            "in": "path", 
            "name": "region_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "region": {
                  "description": "My subregion 3", 
                  "id": "RegionThree", 
                  "links": {
                    "self": "http://localhost:5000/v3/regions/RegionThree"
                  }, 
                  "parent_region_id": "RegionOne"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showRegion_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a region, by ID.", 
        "tags": [
          "regions-v3"
        ], 
        "x-title": "Show region details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "You can update the description or parent region ID for a region.\nYou cannot update the region ID.\n\nThe following error might occur:\n\n- ``Not Found (404)``. The parent region ID does not exist.", 
        "operationId": "updateRegion", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateRegion"
            }
          }, 
          {
            "description": "The region ID.", 
            "format": "", 
            "in": "path", 
            "name": "region_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "region": {
                  "description": "My subregion 3", 
                  "id": "RegionThree", 
                  "links": {
                    "self": "http://localhost:5000/v3/regions/RegionThree"
                  }, 
                  "parent_region_id": "RegionOne"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateRegion_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a region.", 
        "tags": [
          "regions-v3"
        ], 
        "x-title": "Update region"
      }
    }, 
    "/v3/role_assignments": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listRoleAssignments", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/role_assignments"
                }, 
                "role_assignments": [
                  {
                    "links": {
                      "assignment": "http://identity:35357/v3/domains/161718/users/313233/roles/123456"
                    }, 
                    "role": {
                      "id": "123456"
                    }, 
                    "scope": {
                      "domain": {
                        "id": "161718"
                      }
                    }, 
                    "user": {
                      "id": "313233"
                    }
                  }, 
                  {
                    "group": {
                      "id": "101112"
                    }, 
                    "links": {
                      "assignment": "http://identity:35357/v3/projects/456789/groups/101112/roles/123456"
                    }, 
                    "role": {
                      "id": "123456"
                    }, 
                    "scope": {
                      "project": {
                        "id": "456789"
                      }
                    }
                  }
                ]
              }, 
              "text/plain": "GET /role_assignments?user.id={user_id}&scope.project.id={project_id}&effective\n"
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listRoleAssignments_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists role assignments.", 
        "tags": [
          "roles"
        ], 
        "x-title": "List role assignments"
      }
    }, 
    "/v3/roles": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listRoles", 
        "parameters": [
          {
            "description": "Filters the response by a role name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/roles"
                }, 
                "roles": [
                  {
                    "id": "5318e65d75574c17bf5339d3df33a5a3", 
                    "links": {
                      "self": "http://localhost:5000/v3/roles/5318e65d75574c17bf5339d3df33a5a3"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "642bcfc75c384fd181adf34d9b2df897", 
                    "links": {
                      "self": "http://localhost:5000/v3/roles/642bcfc75c384fd181adf34d9b2df897"
                    }, 
                    "name": "anotherrole"
                  }, 
                  {
                    "id": "779a76d74f544224a7ef8762ca0de627", 
                    "links": {
                      "self": "http://localhost:5000/v3/roles/779a76d74f544224a7ef8762ca0de627"
                    }, 
                    "name": "Member"
                  }, 
                  {
                    "id": "9fe2ff9ee4384b1894a90878d3e92bab", 
                    "links": {
                      "self": "http://localhost:5000/v3/roles/9fe2ff9ee4384b1894a90878d3e92bab"
                    }, 
                    "name": "_member_"
                  }, 
                  {
                    "id": "ba2dfba61c934ee89e3110de36273229", 
                    "links": {
                      "self": "http://localhost:5000/v3/roles/ba2dfba61c934ee89e3110de36273229"
                    }, 
                    "name": "ResellerAdmin"
                  }, 
                  {
                    "id": "f127b97616f24d3ebceb7be840210adc", 
                    "links": {
                      "self": "http://localhost:5000/v3/roles/f127b97616f24d3ebceb7be840210adc"
                    }, 
                    "name": "service"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listRoles_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists roles.", 
        "tags": [
          "roles"
        ], 
        "x-title": "List roles"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createRole", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createRole"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "role": {
                  "id": "1e443fa8cee3482a8a2b6954dd5c8f12", 
                  "links": {
                    "self": "http://localhost:5000/v3/roles/1e443fa8cee3482a8a2b6954dd5c8f12"
                  }, 
                  "name": "developer"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createRole_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a role.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Create role"
      }
    }, 
    "/v3/roles/{role_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteRole", 
        "parameters": [
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a role.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Delete role"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showRole", 
        "parameters": [
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "role": {
                  "id": "1e443fa8cee3482a8a2b6954dd5c8f12", 
                  "links": {
                    "self": "http://localhost:5000/v3/roles/1e443fa8cee3482a8a2b6954dd5c8f12"
                  }, 
                  "name": "Developer"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showRole_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a role.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Show role details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateRole", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateRole"
            }
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "role": {
                  "id": "1e443fa8cee3482a8a2b6954dd5c8f12", 
                  "links": {
                    "self": "http://localhost:5000/v3/roles/1e443fa8cee3482a8a2b6954dd5c8f12"
                  }, 
                  "name": "Developer"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateRole_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a role.", 
        "tags": [
          "roles"
        ], 
        "x-title": "Update role"
      }
    }, 
    "/v3/services": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listServices", 
        "parameters": [
          {
            "description": "Filters the response by a service type. A valid value is\n``compute``, ``ec2``, ``identity``, ``image``, ``network``, or\n``volume``.", 
            "format": "", 
            "in": "query", 
            "name": "type", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/services"
                }, 
                "services": [
                  {
                    "description": "Nova Compute Service", 
                    "enabled": true, 
                    "id": "1999c3a858c7408fb586817620695098", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/1999c3a858c7408fb586817620695098"
                    }, 
                    "name": "nova", 
                    "type": "compute"
                  }, 
                  {
                    "description": "Cinder Volume Service V2", 
                    "enabled": true, 
                    "id": "39216610e75547f1883037e11976fc0f", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/39216610e75547f1883037e11976fc0f"
                    }, 
                    "name": "cinderv2", 
                    "type": "volumev2"
                  }, 
                  {
                    "description": "Neutron Service", 
                    "enabled": true, 
                    "id": "4fe41a27de3341af9100123f765eac0d", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/4fe41a27de3341af9100123f765eac0d"
                    }, 
                    "name": "neutron", 
                    "type": "network"
                  }, 
                  {
                    "description": "EC2 Compatibility Layer", 
                    "enabled": true, 
                    "id": "61d3d05bdd1449f18923c83f52a4d762", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/61d3d05bdd1449f18923c83f52a4d762"
                    }, 
                    "name": "ec2", 
                    "type": "ec2"
                  }, 
                  {
                    "description": "Glance Image Service", 
                    "enabled": true, 
                    "id": "69afa3d57d1948ea988beeb252bbaa5d", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/69afa3d57d1948ea988beeb252bbaa5d"
                    }, 
                    "name": "glance", 
                    "type": "image"
                  }, 
                  {
                    "description": "Nova Compute Service V2.1", 
                    "enabled": true, 
                    "id": "79b691ee7be649d9bf8613efc0960206", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/79b691ee7be649d9bf8613efc0960206"
                    }, 
                    "name": "novav21", 
                    "type": "computev21"
                  }, 
                  {
                    "description": "Swift Service", 
                    "enabled": true, 
                    "id": "92419b70ebe64c6c873bd20b14360e6b", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/92419b70ebe64c6c873bd20b14360e6b"
                    }, 
                    "name": "swift", 
                    "type": "object-store"
                  }, 
                  {
                    "description": "Keystone Identity Service", 
                    "enabled": true, 
                    "id": "b8f8454fc07b46b781204d2a436f9d1c", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/b8f8454fc07b46b781204d2a436f9d1c"
                    }, 
                    "name": "keystone", 
                    "type": "identity"
                  }, 
                  {
                    "description": "Cinder Volume Service", 
                    "enabled": true, 
                    "id": "cdda3bea0742407f95e70f4758f46558", 
                    "links": {
                      "self": "http://localhost:5000/v3/services/cdda3bea0742407f95e70f4758f46558"
                    }, 
                    "name": "cinder", 
                    "type": "volume"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listServices_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all services.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "List services"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createService", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createService"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "service": {
                  "description": "Compute service 2", 
                  "enabled": true, 
                  "id": "3f552eb79c48436db2868e948d8cf330", 
                  "links": {
                    "self": "http://localhost:5000/v3/services/3f552eb79c48436db2868e948d8cf330"
                  }, 
                  "name": "compute2", 
                  "type": "compute"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createService_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a service.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "Create service"
      }
    }, 
    "/v3/services/{service_id}": {
      "delete": {
        "consumes": [], 
        "description": "If you try to delete a service that still has associated endpoints,\nthis call either deletes all associated endpoints or fails until\nall endpoints are deleted.", 
        "operationId": "deleteService", 
        "parameters": [
          {
            "description": "The service ID.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a service.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "Delete service"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showService", 
        "parameters": [
          {
            "description": "The service ID.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "service": {
                  "description": "Keystone Identity Service", 
                  "enabled": true, 
                  "id": "686766", 
                  "links": {
                    "self": "http://identity:5000/v3/services/686766"
                  }, 
                  "name": "keystone", 
                  "type": "identity"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showService_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a service.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "Show service details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "The request body is the same as the create service request body,\nexcept that you include only those attributes that you want to\nupdate.", 
        "operationId": "updateService", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateService"
            }
          }, 
          {
            "description": "The service ID.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "service": {
                  "description": "Block Storage Service V2", 
                  "enabled": true, 
                  "id": "5789da9864004dd088fce14c1c626a4b", 
                  "links": {
                    "self": "http://localhost:5000/v3/services/5789da9864004dd088fce14c1c626a4b"
                  }, 
                  "name": "cinderv2", 
                  "type": "volumev2"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateService_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a service.", 
        "tags": [
          "service-catalog"
        ], 
        "x-title": "Update service"
      }
    }, 
    "/v3/users": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listUsers", 
        "parameters": [
          {
            "description": "Filters the response by a domain ID.", 
            "format": "", 
            "in": "query", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a user name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by either enabled (``true``) or disabled\n(``false``) users.", 
            "format": "", 
            "in": "query", 
            "name": "enabled", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://localhost:5000/v3/users"
                }, 
                "users": [
                  {
                    "domain_id": "default", 
                    "email": null, 
                    "enabled": true, 
                    "id": "2844b2a08be147a08ef58317d6471f1f", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/2844b2a08be147a08ef58317d6471f1f"
                    }, 
                    "name": "glance"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": "test@example.com", 
                    "enabled": true, 
                    "id": "4ab84ab39de54f4d96eaff8f2145a7cd", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/4ab84ab39de54f4d96eaff8f2145a7cd"
                    }, 
                    "name": "swiftusertest1"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": null, 
                    "enabled": true, 
                    "id": "56696a9a04864d63877a3d06a6f0b24b", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/56696a9a04864d63877a3d06a6f0b24b"
                    }, 
                    "name": "swift"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": "alt_demo@example.com", 
                    "enabled": true, 
                    "id": "5acb638d15da44fc8de41b9a4bd41875", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/5acb638d15da44fc8de41b9a4bd41875"
                    }, 
                    "name": "alt_demo"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": "demo@example.com", 
                    "enabled": true, 
                    "id": "7596e862b1af473c8ed6ae99d35b51e3", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/7596e862b1af473c8ed6ae99d35b51e3"
                    }, 
                    "name": "demo"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": null, 
                    "enabled": true, 
                    "id": "802edb2141b44e77bbde241417450749", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/802edb2141b44e77bbde241417450749"
                    }, 
                    "name": "nova"
                  }, 
                  {
                    "domain_id": "592ab0800d3745baaf45c610fa41950a", 
                    "email": "test4@example.com", 
                    "enabled": true, 
                    "id": "9aca3883784647fe9aff3a50d922489a", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/9aca3883784647fe9aff3a50d922489a"
                    }, 
                    "name": "swiftusertest4"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": "test3@example.com", 
                    "enabled": true, 
                    "id": "a1251b011f9345e68c2458b841152034", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/a1251b011f9345e68c2458b841152034"
                    }, 
                    "name": "swiftusertest3"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": null, 
                    "enabled": true, 
                    "id": "a43f46eb318041f6b712143862e3ad70", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/a43f46eb318041f6b712143862e3ad70"
                    }, 
                    "name": "neutron"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": null, 
                    "enabled": true, 
                    "id": "b964a9e51c0046a4a84d3f83a135a97c", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/b964a9e51c0046a4a84d3f83a135a97c"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": null, 
                    "enabled": true, 
                    "id": "dc87e591c0d247d5ac04e873bd8a1646", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/dc87e591c0d247d5ac04e873bd8a1646"
                    }, 
                    "name": "cinder"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": "glance-swift@example.com", 
                    "enabled": true, 
                    "id": "ed214dc1c2c6468b926c96eca6c8aee9", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/ed214dc1c2c6468b926c96eca6c8aee9"
                    }, 
                    "name": "glance-swift"
                  }, 
                  {
                    "domain_id": "default", 
                    "email": "test2@example.com", 
                    "enabled": true, 
                    "id": "f4f6587b058a4f46a00242549b430d37", 
                    "links": {
                      "self": "http://localhost:5000/v3/users/f4f6587b058a4f46a00242549b430d37"
                    }, 
                    "name": "swiftusertest2"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listUsers_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists users.", 
        "tags": [
          "users"
        ], 
        "x-title": "List users"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createUser", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createUser"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "user": {
                  "default_project_id": "263fd9", 
                  "description": "James Doe user", 
                  "domain_id": "1789d1", 
                  "email": "jdoe@example.com", 
                  "enabled": true, 
                  "id": "ff4e51", 
                  "links": {
                    "self": "https://identity:35357/v3/users/ff4e51"
                  }, 
                  "name": "James Doe"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createUser_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a user.", 
        "tags": [
          "users"
        ], 
        "x-title": "Create user"
      }
    }, 
    "/v3/users/{user_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteUser", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a user.", 
        "tags": [
          "users"
        ], 
        "x-title": "Delete user"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showUser", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "user": {
                  "default_project_id": "263fd9", 
                  "description": "John Smith's user", 
                  "domain_id": "1789d1", 
                  "email": "jsmith@example.com", 
                  "enabled": true, 
                  "id": "9fe1d3", 
                  "links": {
                    "self": "https://identity:35357/v3/users/9fe1d3"
                  }, 
                  "name": "jsmith"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showUser_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a user.", 
        "tags": [
          "users"
        ], 
        "x-title": "Show user details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the back-end driver does not support this functionality, this\ncall might return the HTTP ``Not Implemented (501)`` response code.", 
        "operationId": "updateUser", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateUser"
            }
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "user": {
                  "default_project_id": "263fd9", 
                  "description": "James Doe's user", 
                  "domain_id": "1789d1", 
                  "email": "jamesdoe@example.com", 
                  "enabled": true, 
                  "id": "ff4e51", 
                  "links": {
                    "self": "https://identity:35357/v3/users/ff4e51"
                  }, 
                  "name": "jamesdoe"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateUser_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates the password for or enables or disables a user.", 
        "tags": [
          "users"
        ], 
        "x-title": "Update user"
      }
    }, 
    "/v3/users/{user_id}/groups": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listUserGroups", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "groups": [
                  {
                    "description": "Developers cleared for work on all general projects", 
                    "domain_id": "1789d1", 
                    "id": "ea167b", 
                    "links": {
                      "self": "https://identity:35357/v3/groups/ea167b"
                    }, 
                    "name": "Developers"
                  }, 
                  {
                    "description": "Developers cleared for work on secret projects", 
                    "domain_id": "1789d1", 
                    "id": "a62db1", 
                    "links": {
                      "self": "https://identity:35357/v3/groups/a62db1"
                    }, 
                    "name": "Secure Developers"
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/users/9fe1d3/groups"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists groups to which a user belongs.", 
        "tags": [
          "users"
        ], 
        "x-title": "List groups to which a user belongs"
      }
    }, 
    "/v3/users/{user_id}/password": {
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "changeUserPassword", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/changeUserPassword"
            }
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "415": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Changes the password for a user.", 
        "tags": [
          "users"
        ], 
        "x-title": "Change password for user"
      }
    }, 
    "/v3/users/{user_id}/projects": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listUserProjects", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/users/313233/projects"
                }, 
                "projects": [
                  {
                    "description": "description of this project", 
                    "domain_id": "161718", 
                    "enabled": true, 
                    "id": "456788", 
                    "links": {
                      "self": "http://identity:35357/v3/projects/456788"
                    }, 
                    "name": "a project name", 
                    "parent_id": "212223"
                  }, 
                  {
                    "description": "description of this project", 
                    "domain_id": "161718", 
                    "enabled": true, 
                    "id": "456789", 
                    "links": {
                      "self": "http://identity:35357/v3/projects/456789"
                    }, 
                    "name": "another domain", 
                    "parent_id": "212223"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "List projects for a user.", 
        "tags": [
          "users"
        ], 
        "x-title": "List projects for user"
      }
    }
  }, 
  "produces": [
    "application/json"
  ], 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "Authentication and token management (auth, tokens)", 
      "name": "authenticate-v3", 
      "x-summary": "In exchange for a set of authentication credentials, the Identity\nservice generates tokens. A token represents the authenticated\nidentity of a user and, optionally, grants authorization on a\nspecific project or domain.\n\nThe body of an authentication request must include a payload that\nspecifies the authentication method, which is ``password`` or\n``token``, the credentials, and, optionally, the authorization\nscope. You can scope a token to a project or domain, or the token\ncan be unscoped. You cannot scope a token to both a project and\ndomain.\n\nTokens have IDs, which the Identity API returns in the ``X-Subject-\nToken`` response header.\n\nAlso, validates an authentication token and lists the domains,\nprojects, roles, and endpoints to which the token gives access.\nForces the immediate revocation of a token.\n\nAfter you obtain an authentication token, you can:\n\n- Make REST API requests to other OpenStack services. You supply the\n  ID of your authentication token in the ``X-Auth-Token`` request\n  header.\n\n- Validate your authentication token and list the domains, projects,\n  roles, and endpoints that your token gives you access to.\n\n- Use your token to request another token scoped for a different\n  domain and project.\n\n- Force the immediate revocation of a token.\n\n- List revoked public key infrastructure (PKI) tokens.\n\nThe Identity API treats expired tokens as no longer valid tokens.\nThe deployment determines how long expired tokens are stored.\n\nThese authentication errors can occur:\n\n**Authentication errors**\n\n+------------------------+----------------------------------------------------------------------+\n| Response code          | Description                                                          |\n+------------------------+----------------------------------------------------------------------+\n| ``Bad Request (400)``  | The Identity service failed to parse the request as expected. One    |\n|                        | of the following errors occurred:                                    |\n|                        |                                                                      |\n|                        | - A required attribute was missing.                                  |\n|                        |                                                                      |\n|                        | - An attribute that is not allowed was specified, such as an ID on a |\n|                        |   POST request in a basic CRUD operation.                            |\n|                        |                                                                      |\n|                        | - An attribute of an unexpected data type was specified.             |\n+------------------------+----------------------------------------------------------------------+\n| ``Unauthorized (401)`` | One of the following errors occurred:                                |\n|                        |                                                                      |\n|                        | - Authentication was not performed.                                  |\n|                        |                                                                      |\n|                        | - The specified ``X-Auth-Token`` header is not valid.                |\n|                        |                                                                      |\n|                        | - The authentication credentials are not valid.                      |\n+------------------------+----------------------------------------------------------------------+\n| ``Forbidden (403)``    | The identity was successfully authenticated but it is not            |\n|                        | authorized to perform the requested action.                          |\n+------------------------+----------------------------------------------------------------------+\n| ``Not Found (404)``    | An operation failed because a referenced entity cannot be found by   |\n|                        | ID. For a POST request, the referenced entity might be specified in  |\n|                        | the request body rather than in the resource path.                   |\n+------------------------+----------------------------------------------------------------------+\n| ``Conflict (409)``     | A POST or PATCH operation failed. For example, a client tried to     |\n|                        | update a unique attribute for an entity, which conflicts with that   |\n|                        | of another entity in the same collection.                            |\n|                        |                                                                      |\n|                        | Or, a client issued a create operation twice on a collection with a  |\n|                        | user-defined, unique attribute. For example, a client made a POST    |\n|                        | ``/users`` request two times for the unique, user-defined name       |\n|                        | attribute for a user entity.                                         |\n+------------------------+----------------------------------------------------------------------+"
    }, 
    {
      "description": "Credentials (credentials)", 
      "name": "credentials", 
      "x-summary": "In exchange for a set of authentication credentials that the user\nsubmits, the Identity service generates and returns a token. A\ntoken represents the authenticated identity of a user and,\noptionally, grants authorization on a specific project or domain.\n\nYou can list all credentials, and create, show details for, update,\nand delete a credential."
    }, 
    {
      "description": "Domains (domains, users, groups, roles)", 
      "name": "domains", 
      "x-summary": "A domain is a collection of users, groups, and projects. Each group\nand project is owned by exactly one domain.\n\nEach domain defines a namespace where certain API-visible name\nattributes exist, which affects whether those names must be\nglobally unique or unique within that domain. In the Identity API,\nthe uniqueness of these attributes is as follows:\n\n- *Domain name*. Globally unique across all domains.\n\n- *Role name*. Globally unique across all domains.\n\n- *User name*. Unique within the owning domain.\n\n- *Project name*. Unique within the owning domain.\n\n- *Group name*. Unique within the owning domain."
    }, 
    {
      "description": "Domain configuration (domains, config) (since v3.4) (EXPERIMENTAL)", 
      "name": "domains-config-v3", 
      "x-summary": "You can manage domain-specific configuration options.\n\nDomain-specific configuration options are structured within their\ngroup objects. The API supports only the ``identity`` and ``ldap``\ngroups. These groups override the default configuration settings\nfor the storage of users and groups by the Identity server.\n\nYou can create, update, and delete domain-specific configuration\noptions by using the HTTP PUT , PATCH , and DELETE methods. When\nupdating, it is only necessary to include those options that are\nbeing updated.\n\nTo create an option, use the PUT method. The Identity API does not\nreturn options that are considered sensitive, although you can\ncreate and update these options. The only option currently\nconsidered sensitive is the ``password`` option within the ``ldap``\ngroup.\n\nThe API enables you to include sensitive options as part of non-\nsensitive options. For example, you can include the password as\npart of the ``url`` option.\n\nIf you try to create or update configuration options for groups\nother than the ``identity`` or ``ldap`` groups, the ``Forbidden\n(403)`` response code is returned.\n\nFor information about how to integrate the Identity service with\nLDAP, see `Integrate Identity with LDAP <http://docs.openstack.org\n/admin-guide/keystone_integrate_with_ldap.html>`_."
    }, 
    {
      "description": "Groups (groups, users)", 
      "name": "groups", 
      "x-summary": "A group is a collection of users. Each group is owned by a domain.\n\nWhen you grant a role to a group, you explicitly associate that\ngroup with a project or domain. This action is equivalent to\ngranting the role to each group member on that project and domain.\n\nWhen you grant a role to a group, that role is automatically\ngranted to any user that you add to the group. When you revoke a\nrole from a group, that role is automatically revoked from any user\nthat you remove from the group. Any token that authenticates that\nuser, project, and domain is revoked.\n\nAs with users, a group without any role grants is useless from the\nperspective an OpenStack service and has no access to resources.\nHowever, a group without role grants is permitted as a way of\nacquiring or loading users and groups from external sources before\nmapping them to projects and domains."
    }, 
    {
      "description": "Policies (policies)", 
      "name": "policies", 
      "x-summary": "A policy is an arbitrarily serialized policy engine rule set to be\nconsumed by a remote service.\n\nYou encode policy rule sets into a blob that remote services can\nconsume. To do so, set ``type`` to ``application/json`` and specify\npolicy rules as JSON strings in a ``blob``. For example:\n\n::\n\n   {\n       \"blob\":{\n           \"foobar_user\":[\n               \"role:compute-user\"\n           ]\n       }\n   }"
    }, 
    {
      "description": "Projects (projects, users, groups, roles)", 
      "name": "projects", 
      "x-summary": "A project is the base unit of ownership. Resources are owned by a\nspecific project. A project is owned by a specific domain.\n\n(Since v3.4) You can create a hierarchy of projects by setting a\nparent ID when you create projects. All projects in a hierarchy\nmust be owned by the same domain.\n\n(Since v3.6) Optionally, you can create a project that behaves both\nas a project and a domain. As a domain, the project provides a name\nspace in which you can create users, groups, and other projects. If\nyou create a project that behaves as a domain, you cannot update\nthis project to behave like a regular project."
    }, 
    {
      "description": "Regions (regions) (since v3.2)", 
      "name": "regions-v3", 
      "x-summary": "A region is a general division of an OpenStack deployment. You can\nassociate zero or more sub-regions with a region to create a tree-\nlike structured hierarchy.\n\nAlthough a region does not have a geographical connotation, a\ndeployment can use a geographical name for a region, such as ``us-\neast``.\n\nYou can list, create, update, show details for, and delete regions."
    }, 
    {
      "description": "Roles (roles)", 
      "name": "roles", 
      "x-summary": "Roles grant a user a set of permitted actions for either a specific\nproject or an entire domain.\n\nYou can grant roles to a user on a project, including projects\nowned by other domains.\n\nYou can create, list, and delete roles. You can also list roles\nassigned to a specified domain, project, or user.\n\nYou can list role assignments and, since v3.6, all role assignments\nwithin a tree of projects. Use the query parameters to filter the\nlist because the role assignments list can be long. Some typical\nexamples are:\n\n- List role assignments for the specified user:\n\n  ::     GET /role_assignments?user.id={user_id}\n\n- List role assignments for the specified project:\n\n  ::     GET /role_assignments?scope.project.id={project_id}\n\n- List all role assignments for a specified project and its sub-\n  projects:\n\n  ::     GET /role_assignments?scope.project.id={project_id}?includ\n  e_subtree=true\n\n  If you specify ``include_subtree=true``, you must also specify\n  the ``scope.project.id``. Otherwise, this call returns the ``Bad\n  Request (400)`` response code.\n\nEach role assignment entity in the collection contains a link to\nthe assignment that created the entity.\n\nUse the ``effective`` query parameter to list effective assignments\nat the user, project, and domain level. This parameter allows for\nthe effects of group membership. The group role assignment entities\nthemselves are not returned in the collection. This represents the\neffective role assignments that would be included in a scoped\ntoken.\n\nIn the response, the ``links`` entity section for entities for\ngroup members also contains a URL that enables access to the\nmembership of the group.\n\nYou can use the other query parameters with the ``effective``\nparameter, such as:\n\n- Determine what a user can actually do:\n\n  ::     GET /role_assignments?user.id={user_id}    &    effective\n\n- Get the equivalent set of role assignments that are included in a\n  project-scoped token response:\n\n  ::     GET /role_assignments?user.id={user_id}    &\n  scope.project.id={project_id}    &    effective"
    }, 
    {
      "description": "Service catalog and endpoints (services, endpoints)", 
      "name": "service-catalog", 
      "x-summary": "A service is an OpenStack web service that you can access through a\nURL, or endpoint.\n\nA service catalog lists the services that are available to the\ncaller based upon the current authorization.\n\nYou can create, list, show details for, update, and delete\nservices. When you create or update a service, you can enable the\nservice, which causes it and its endpoints to appear in the service\ncatalog.\n\nYou can create, list, show details for, update, and delete\nendpoints."
    }, 
    {
      "description": "Users (users, groups, projects, roles)", 
      "name": "users", 
      "x-summary": "A user is an individual API consumer that is owned by a domain. A\nrole explicitly associates a user with projects or domains. A user\nwith no assigned roles has no access to OpenStack resources.\n\nYou can list, create, show details for, update, delete, and change\nthe password for users.\n\nYou can also list groups, projects, and roles for a specified user.\nTo list user roles, see `Roles <http://developer.openstack.org/api-\nref-identity-v3.html#roles-v3>`_."
    }, 
    {
      "description": "OAuth OAuth (OS-OAUTH1)", 
      "name": "identity_v3_OS-OAUTH1", 
      "x-summary": "Enables users to delegate roles to third-party consumers through\n`The OAuth 1.0 Protocol <http://tools.ietf.org/html/rfc5849>`_.\n\nA user is an Identity API user who delegates its roles and who\nauthorizes request tokens.\n\nA consumer is a third-party application that uses OAuth to access a\nprotected resource.\n\nAdministrative users use an OAuth-derived token to act on behalf of\nthe authorizing user.\n\nThe consumer uses a request token to get authorization from the\nuser. The consumer provides an OAuth verifier string with the\nrequest token in exchange for an access token.\n\nThe consumer uses an access token to request Identity API tokens on\nbehalf of the authorizing user instead of using the credentials for\nthe user.\n\nRequest and access tokens use token keys to identify themselves.\nFor OpenStack purposes, the token key is the token ID. The consumer\nuses a token secret to establish ownership of a token. Both request\nand access tokens have token secrets.\n\nDelegated authentication through OAuth occurs as follows:\n\n- A user creates a consumer.\n\n- The consumer gets an unauthorized request token. Then, the\n  consumer uses the request token to initiate user authorization.\n\n- The user authorizes the request token.\n\n- The consumer exchanges the authorized request token and the OAuth\n  verifier for an access token.\n\n The authorizing user receives the request token key from the\n  consumer out-of-band.\n\n- The consumer uses the access token to request an Identity API\n  token."
    }
  ]
}