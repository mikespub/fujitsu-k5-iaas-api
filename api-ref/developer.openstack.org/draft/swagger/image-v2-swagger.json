{
  "basePath": "/", 
  "consumes": [
    "application/json"
  ], 
  "definitions": {
    "addTag-v2_200": {
      "properties": {
        "name": {
          "description": "The name of the tag.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name"
      ], 
      "type": "object"
    }, 
    "createImage-v2": {
      "example": {
        "application/json": {
          "container_format": "bare", 
          "disk_format": "raw", 
          "id": "b2173dd3-7ad6-4362-baa6-a68bce3565cb", 
          "name": "Ubuntu"
        }
      }, 
      "properties": {
        "container_format": {
          "description": "Format of the container. A valid value is ``ami``, ``ari``,\n``aki``, ``bare``, ``ovf``, ``ova``, or ``docker``.", 
          "format": "", 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The format of the disk. A valid value is ``ami``, ``ari``, ``aki``,\n``vhd``, ``vmdk``, ``raw``, ``qcow2``, ``vdi``, or ``iso``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "A unique, user-defined image UUID, in the format:\n\n::\n\n   nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn\n\nWhere **n** is a hexadecimal digit from 0 to f, or F.\n\nFor example:\n\n::\n\n   b2173dd3-7ad6-4362-baa6-a68bce3565cb\n\nIf you omit this value, the API generates a UUID for the image.", 
          "format": "", 
          "type": "string"
        }, 
        "min_disk": {
          "description": "Amount of disk space in GB that is required to boot the image.", 
          "format": "", 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "Amount of RAM in MB that is required to boot the image.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Name for the image. Note that the name of an image is not unique to\nan Image service node. The API cannot expect users to know the\nnames of images that other users own.", 
          "format": "", 
          "type": "string"
        }, 
        "properties": {
          "description": "The image properties, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "protected": {
          "description": "Image protection for deletion. Valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tags": {
          "description": "Image tags.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "visibility": {
          "description": "Image visibility. Valid value is ``public`` or ``private``. Default\nis ``public``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createImage-v2_201": {
      "properties": {
        "checksum": {
          "description": "Hash that is used over the image data. The Image service uses this\nvalue for verification.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "container_format": {
          "description": "The container format of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The disk format of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "file": {
          "description": "The URL for the virtual machine image file.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the image.", 
          "format": "", 
          "type": "string"
        }, 
        "locations": {
          "description": "A list of URLs to access the image file in external store. This\nlist appears if the ``show_multiple_locations`` option is set to\n``true`` in the Image service ' s configuration file.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "min_disk": {
          "description": "The minimum disk size in GB that is required to boot the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "The minimum amount of RAM in MB that is required to boot the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The name of the image.\n\nValue might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "owner": {
          "description": "The ID of the owner, or tenant, of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "properties": {
          "description": "The image properties, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "protected": {
          "description": "Image protection for deletion. A valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "schema": {
          "description": "The URL for schema of the virtual machine image.", 
          "format": "", 
          "type": "string"
        }, 
        "self": {
          "description": "The URL for the virtual machine image.", 
          "format": "", 
          "type": "string"
        }, 
        "size": {
          "description": "The size of the image data, in bytes.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "virtual_size": {
          "description": "The virtual size of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "visibility": {
          "description": "The image visibility. A valid value is ``public`` or ``private``.\nDefault is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "container_format", 
        "min_ram", 
        "updated_at", 
        "owner", 
        "min_disk", 
        "tags", 
        "locations", 
        "visibility", 
        "id", 
        "size", 
        "virtual_size", 
        "name", 
        "checksum", 
        "created_at", 
        "disk_format", 
        "properties", 
        "protected", 
        "self", 
        "file", 
        "schema"
      ], 
      "type": "object"
    }, 
    "createImageMember-v2": {
      "example": {
        "application/json": {
          "member": "8989447062e04a818baf9e073fd04fa7"
        }
      }, 
      "properties": {
        "member": {
          "description": "The ID of the image member. An image member is a tenant with whom\nthe image is shared.\n\nThis call accepts either the ``member_id`` or ``member`` attribute\nin the request body. If you specify both attributes, the API uses\nthe ``member_id`` value and ignores the ``member`` value. Use of\nthe ``member`` attribute is supported but deprecated. Use of the\n``member_id`` attribute is preferred.", 
          "format": "", 
          "type": "string"
        }, 
        "member_id": {
          "description": "The ID of the image member. An image member is a tenant with whom\nthe image is shared.\n\nThis call accepts either the ``member_id`` or ``member`` attribute\nin the request body. If you specify both attributes, the API uses\nthe ``member_id`` value and ignores the ``member`` value. Use of\nthe ``member`` attribute is supported but deprecated. Use of the\n``member_id`` attribute is preferred.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createImageMember-v2_200": {
      "properties": {
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "member_id": {
          "description": "The ID of the image member. An image member is a tenant with whom\nthe image is shared.\n\nThis call accepts either the ``member_id`` or ``member`` attribute\nin the request body. If you specify both attributes, the API uses\nthe ``member_id`` value and ignores the ``member`` value. Use of\nthe ``member`` attribute is supported but deprecated. Use of the\n``member_id`` attribute is preferred.", 
          "format": "", 
          "type": "string"
        }, 
        "schema": {
          "description": "The URL for schema of the member.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "created_at", 
        "member_id", 
        "schema", 
        "status", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "createNamespace-v2_201": {
      "properties": {
        "description": {
          "description": "The description of the namespace.", 
          "format": "", 
          "type": "string"
        }, 
        "display_name": {
          "description": "User-friendly name to use in a UI to display the namespace name.", 
          "format": "", 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumerated list of property values.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "hypervisor_type": {
          "description": "Hypervisor type of property values.", 
          "format": "", 
          "type": "object"
        }, 
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "type": "string"
        }, 
        "objects": {
          "description": "One or more object definitions of the namespace.", 
          "format": "", 
          "type": "string"
        }, 
        "properties": {
          "description": "One or more property definitions for the namespace.", 
          "format": "", 
          "type": "object"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. A valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_type_associations": {
          "description": "One or more namespace resource types.", 
          "format": "", 
          "type": "string"
        }, 
        "visibility": {
          "description": "The namespace visibility. A valid value is ``public`` or\n``private``. Default is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "namespace", 
        "display_name", 
        "description", 
        "visibility", 
        "protected", 
        "properties", 
        "objects", 
        "resource_type_associations", 
        "hypervisor_type", 
        "enum"
      ], 
      "type": "object"
    }, 
    "createObject-v2": {
      "example": {
        "application/json": {
          "description": "You can configure the CPU limits with control parameters.", 
          "name": "CPU Limits", 
          "properties": {
            "quota:cpu_period": {
              "description": "Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value.", 
              "maximum": 1000000, 
              "minimum": 1000, 
              "title": "Quota: CPU Period", 
              "type": "integer"
            }, 
            "quota:cpu_quota": {
              "description": "Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.", 
              "title": "Quota: CPU Quota", 
              "type": "integer"
            }, 
            "quota:cpu_shares": {
              "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
              "title": "Quota: CPU Shares", 
              "type": "integer"
            }
          }, 
          "required": []
        }
      }, 
      "properties": {
        "description": {
          "description": "Detailed description for the namespace.", 
          "format": "", 
          "type": "string"
        }, 
        "display_name": {
          "description": "User-friendly name to use in a UI to display the namespace name.", 
          "format": "", 
          "type": "string"
        }, 
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "type": "string"
        }, 
        "objects": {
          "description": "Namespace object definitions, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "properties": {
          "description": "Namespace property definitions, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. Valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "resource_type_associations": {
          "description": "Namespace resource types, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "visibility": {
          "description": "Namespace visibility. Valid value is ``public`` or ``private``.\nDefault is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "namespace"
      ], 
      "type": "object"
    }, 
    "createObject-v2_201": {
      "properties": {
        "description": {
          "description": "The description of the namespace.", 
          "format": "", 
          "type": "string"
        }, 
        "display_name": {
          "description": "User-friendly name to use in a UI to display the namespace name.", 
          "format": "", 
          "type": "string"
        }, 
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "type": "string"
        }, 
        "objects": {
          "description": "One or more object definitions of the namespace.", 
          "format": "", 
          "type": "string"
        }, 
        "properties": {
          "description": "One or more property definitions for the namespace.", 
          "format": "", 
          "type": "object"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. A valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_type_associations": {
          "description": "One or more namespace resource types.", 
          "format": "", 
          "type": "string"
        }, 
        "visibility": {
          "description": "The namespace visibility. A valid value is ``public`` or\n``private``. Default is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "namespace", 
        "display_name", 
        "description", 
        "visibility", 
        "protected", 
        "properties", 
        "objects", 
        "resource_type_associations"
      ], 
      "type": "object"
    }, 
    "createProperty-v2": {
      "example": {
        "application/json": {
          "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
          "enum": [
            "xen", 
            "qemu", 
            "kvm", 
            "lxc", 
            "uml", 
            "vmware", 
            "hyperv"
          ], 
          "name": "hypervisor_type", 
          "title": "Hypervisor Type", 
          "type": "string"
        }
      }, 
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items``, the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false``, the instance cannot be longer than the\nlist of schemas in ``items``.\n\nIf this value is ``true``, that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumerated list of property values.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression ( `ECMA 262 <http://www.ecma-\ninternational.org/publications/standards/Ecma-262.htm>`_ ) that a\nstring value must match.", 
          "format": "", 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name", 
        "title", 
        "type"
      ], 
      "type": "object"
    }, 
    "createProperty-v2_201": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items``, the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false``, the instance cannot be longer than the\nlist of schemas in ``items``.\n\nIf this value is ``true``, that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumerated list of property values.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name", 
        "title", 
        "type", 
        "enum", 
        "items", 
        "description", 
        "operators", 
        "default", 
        "readonly", 
        "minimum", 
        "maximum", 
        "minLength", 
        "maxLength", 
        "pattern", 
        "minItems", 
        "maxItems", 
        "uniqueItems", 
        "additionalItems"
      ], 
      "type": "object"
    }, 
    "createResourceTypeAssoc-v2": {
      "example": {
        "application/json": {
          "name": "OS::Cinder::Volume", 
          "prefix": "hw_", 
          "properties_target": "image"
        }
      }, 
      "properties": {
        "name": {
          "description": "Name of the resource type.", 
          "format": "", 
          "type": "string"
        }, 
        "prefix": {
          "description": "Prefix for any properties in the namespace that you want to apply\nto the resource type. If you specify a prefix, you must append a\nprefix separator, such as the colon (``:``) character.", 
          "format": "", 
          "type": "string"
        }, 
        "properties_target": {
          "description": "Some resource types allow more than one key and value pair for each\ninstance. For example, the Image service allows both user and image\nmetadata on volumes. The ``properties_target`` parameter enables a\nnamespace target to remove the ambiguity.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name"
      ], 
      "type": "object"
    }, 
    "createResourceTypeAssoc-v2_201": {
      "properties": {
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the resource type.", 
          "format": "", 
          "type": "string"
        }, 
        "prefix": {
          "description": "The prefix of the resource type.", 
          "format": "", 
          "type": "string"
        }, 
        "properties_target": {
          "description": "The properties target of the resource type.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "created_at", 
        "name", 
        "prefix", 
        "properties_target", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "createTags-v2": {
      "properties": {
        "name": {
          "description": "The name of the tag.", 
          "format": "", 
          "type": "string"
        }, 
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "namespace", 
        "tags", 
        "name"
      ], 
      "type": "object"
    }, 
    "createTags-v2_201": {
      "properties": {
        "name": {
          "description": "The name of the tag.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "tags", 
        "name"
      ], 
      "type": "object"
    }, 
    "deleteAllTags-v2": {
      "properties": {
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "namespace"
      ], 
      "type": "object"
    }, 
    "deleteProperty-v2": {
      "properties": {
        "property_name": {
          "description": "The name of the property.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "property_name"
      ], 
      "type": "object"
    }, 
    "listImageMembers-v2_200": {
      "properties": {
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "A list of ``member`` objects. Each ``member`` object describes a\nmember with whom this image is being shared.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "schema": {
          "description": "The URL for schema of the members.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "members", 
        "status", 
        "created_at", 
        "updated_at", 
        "schema"
      ], 
      "type": "object"
    }, 
    "listImages-v2_200": {
      "properties": {
        "checksum": {
          "description": "Hash that is used over the image data. The Image service uses this\nvalue for verification.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "container_format": {
          "description": "The container format of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The disk format of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "file": {
          "description": "The URL for the virtual machine image file.", 
          "format": "", 
          "type": "string"
        }, 
        "first": {
          "description": "The URL for the first page of response.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the image.", 
          "format": "", 
          "type": "string"
        }, 
        "images": {
          "description": "A list of ``image`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "min_disk": {
          "description": "The minimum disk size in GB that is required to boot the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "The minimum amount of RAM in MB that is required to boot the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The name of the image.\n\nValue might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "owner": {
          "description": "The ID of the owner, or tenant, of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "protected": {
          "description": "Image protection for deletion. A valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "schema": {
          "description": "The URL for schema of the virtual machine images.", 
          "format": "", 
          "type": "string"
        }, 
        "self": {
          "description": "The URL for the virtual machine image.", 
          "format": "", 
          "type": "string"
        }, 
        "size": {
          "description": "The size of the image data, in bytes.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "virtual_size": {
          "description": "The virtual size of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "visibility": {
          "description": "The image visibility. A valid value is ``public`` or ``private``.\nDefault is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "images", 
        "status", 
        "name", 
        "tags", 
        "container_format", 
        "created_at", 
        "disk_format", 
        "updated_at", 
        "min_disk", 
        "protected", 
        "id", 
        "min_ram", 
        "checksum", 
        "owner", 
        "visibility", 
        "virtual_size", 
        "size", 
        "self", 
        "file", 
        "schema", 
        "first"
      ], 
      "type": "object"
    }, 
    "listNamespaces-v2_200": {
      "properties": {
        "description": {
          "description": "The description of the namespace.", 
          "format": "", 
          "type": "string"
        }, 
        "display_name": {
          "description": "User-friendly name to use in a UI to display the namespace name.", 
          "format": "", 
          "type": "string"
        }, 
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "type": "string"
        }, 
        "namespaces": {
          "description": "A list of ``namespace`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. A valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_type_associations": {
          "description": "One or more namespace resource types.", 
          "format": "", 
          "type": "string"
        }, 
        "visibility": {
          "description": "The namespace visibility. A valid value is ``public`` or\n``private``. Default is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "namespaces", 
        "namespace", 
        "display_name", 
        "description", 
        "visibility", 
        "protected", 
        "resource_type_associations"
      ], 
      "type": "object"
    }, 
    "listObjects-v2_200": {
      "properties": {
        "description": {
          "description": "The description of the namespace.", 
          "format": "", 
          "type": "string"
        }, 
        "display_name": {
          "description": "User-friendly name to use in a UI to display the namespace name.", 
          "format": "", 
          "type": "string"
        }, 
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "type": "string"
        }, 
        "namespaces": {
          "description": "A list of ``namespace`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. A valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_type_associations": {
          "description": "One or more namespace resource types.", 
          "format": "", 
          "type": "string"
        }, 
        "visibility": {
          "description": "The namespace visibility. A valid value is ``public`` or\n``private``. Default is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "namespaces", 
        "namespace", 
        "display_name", 
        "description", 
        "visibility", 
        "protected", 
        "resource_type_associations"
      ], 
      "type": "object"
    }, 
    "listProperties-v2_200": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items``, the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false``, the instance cannot be longer than the\nlist of schemas in ``items``.\n\nIf this value is ``true``, that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumerated list of property values.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "type": "string"
        }, 
        "properties": {
          "description": "A list of ``property`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "properties", 
        "name", 
        "title", 
        "type", 
        "enum", 
        "items", 
        "description", 
        "operators", 
        "default", 
        "readonly", 
        "minimum", 
        "maximum", 
        "minLength", 
        "maxLength", 
        "pattern", 
        "minItems", 
        "maxItems", 
        "uniqueItems", 
        "additionalItems"
      ], 
      "type": "object"
    }, 
    "listResourceTypeAssocs-v2_200": {
      "properties": {
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the resource type.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "created_at", 
        "name", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "listResourceTypes-v2_200": {
      "properties": {
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the resource type.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "created_at", 
        "name", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "listTags-v2": {
      "properties": {
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "namespace"
      ], 
      "type": "object"
    }, 
    "listTags-v2_200": {
      "properties": {
        "name": {
          "description": "The name of the tag.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "tags", 
        "name"
      ], 
      "type": "object"
    }, 
    "listTasks-v2_200": {
      "properties": {
        "id": {
          "description": "The UUID of the task.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The current status of this task. The value can be \"pending\",\n\"processing\", \"success\" or \"failure\".", 
          "format": "", 
          "type": "string"
        }, 
        "tasks": {
          "description": "A list of ``task`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "type": {
          "description": "The type of task represented by this content.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "tasks", 
        "id", 
        "type", 
        "status"
      ], 
      "type": "object"
    }, 
    "showImage-v2_200": {
      "properties": {
        "checksum": {
          "description": "Hash that is used over the image data. The Image service uses this\nvalue for verification.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "container_format": {
          "description": "The container format of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "direct_url": {
          "description": "The URL to access the image file kept in external store. It appears\nwhen you set the ``show_image_direct_url`` option to ``true`` in\nthe Image service ' s configuration file.", 
          "format": "", 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The disk format of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "file": {
          "description": "The URL for the virtual machine image file.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the image.", 
          "format": "", 
          "type": "string"
        }, 
        "locations": {
          "description": "A list of URLs to access the image file in external store. This\nlist appears if the ``show_multiple_locations`` option is set to\n``true`` in the Image service ' s configuration file.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "metadata": {
          "description": "The location metadata.", 
          "format": "", 
          "type": "object"
        }, 
        "min_disk": {
          "description": "The minimum disk size in GB that is required to boot the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "The minimum amount of RAM in MB that is required to boot the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The name of the image.\n\nValue might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "owner": {
          "description": "The ID of the owner, or tenant, of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "properties": {
          "description": "The image properties, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "protected": {
          "description": "Image protection for deletion. A valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "schema": {
          "description": "The URL for schema of the virtual machine image.", 
          "format": "", 
          "type": "string"
        }, 
        "self": {
          "description": "The URL for the virtual machine image.", 
          "format": "", 
          "type": "string"
        }, 
        "size": {
          "description": "The size of the image data, in bytes.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "visibility": {
          "description": "The image visibility. A valid value is ``public`` or ``private``.\nDefault is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "name", 
        "tags", 
        "container_format", 
        "created_at", 
        "disk_format", 
        "updated_at", 
        "min_disk", 
        "protected", 
        "id", 
        "min_ram", 
        "checksum", 
        "owner", 
        "visibility", 
        "size", 
        "locations", 
        "metadata", 
        "properties", 
        "direct_url", 
        "self", 
        "file", 
        "schema"
      ], 
      "type": "object"
    }, 
    "showImageMember-v2_200": {
      "properties": {
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "image_id": {
          "description": "The UUID of the image.", 
          "format": "", 
          "type": "string"
        }, 
        "member_id": {
          "description": "The ID of the image member. An image member is a tenant with whom\nthe image is shared.\n\nThis call accepts either the ``member_id`` or ``member`` attribute\nin the request body. If you specify both attributes, the API uses\nthe ``member_id`` value and ignores the ``member`` value. Use of\nthe ``member`` attribute is supported but deprecated. Use of the\n``member_id`` attribute is preferred.", 
          "format": "", 
          "type": "string"
        }, 
        "schema": {
          "description": "The URL for schema of the member.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "created_at", 
        "updated_at", 
        "image_id", 
        "member_id", 
        "schema"
      ], 
      "type": "object"
    }, 
    "showProperty-v2": {
      "properties": {
        "property_name": {
          "description": "The name of the property.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "property_name"
      ], 
      "type": "object"
    }, 
    "showProperty-v2_200": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items``, the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false``, the instance cannot be longer than the\nlist of schemas in ``items``.\n\nIf this value is ``true``, that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumerated list of property values.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name", 
        "title", 
        "type", 
        "enum", 
        "items", 
        "description", 
        "operators", 
        "default", 
        "readonly", 
        "minimum", 
        "maximum", 
        "minLength", 
        "maxLength", 
        "pattern", 
        "minItems", 
        "maxItems", 
        "uniqueItems", 
        "additionalItems"
      ], 
      "type": "object"
    }, 
    "showTag-v2_200": {
      "properties": {
        "name": {
          "description": "The name of the tag.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name"
      ], 
      "type": "object"
    }, 
    "showTask-v2_200": {
      "properties": {
        "id": {
          "description": "The UUID of the task.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The current status of this task. The value can be \"pending\",\n\"processing\", \"success\" or \"failure\".", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The type of task represented by this content.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "type", 
        "status"
      ], 
      "type": "object"
    }, 
    "updateImage-v2": {
      "example": {
        "application/json": [
          {
            "op": "replace", 
            "path": "/name", 
            "value": "Fedora 17"
          }, 
          {
            "op": "replace", 
            "path": "/tags", 
            "value": [
              "fedora", 
              "beefy"
            ]
          }
        ]
      }, 
      "properties": {
        "metadata": {
          "description": "The location metadata.", 
          "format": "", 
          "type": "object"
        }, 
        "op": {
          "description": "The operation. A valid value is:\n\n- ``add``. Adds a property or location in the image.\n\n- ``remove``. Removes an image ' s property or location.\n\n- ``replace``. Replaces the value of an image ' s property or\n  location.", 
          "format": "", 
          "type": "string"
        }, 
        "path": {
          "description": "An image property.", 
          "format": "", 
          "type": "string"
        }, 
        "url": {
          "description": "The URL to access the image file kept in external store.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "Value of image property used in add or replace operations expressed\nin JSON notation. For example, you must enclose strings in\nquotation marks, and you do not enclose numeric values in quotation\nmarks.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "path", 
        "value", 
        "op", 
        "url", 
        "metadata"
      ], 
      "type": "object"
    }, 
    "updateImage-v2_200": {
      "properties": {
        "checksum": {
          "description": "Hash that is used over the image data. The Image service uses this\nvalue for verification.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "container_format": {
          "description": "The container format of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "direct_url": {
          "description": "The URL to access the image file kept in external store. It appears\nwhen you set the ``show_image_direct_url`` option to ``true`` in\nthe Image service ' s configuration file.", 
          "format": "", 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The disk format of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "file": {
          "description": "The URL for the virtual machine image file.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the image.", 
          "format": "", 
          "type": "string"
        }, 
        "locations": {
          "description": "A list of URLs to access the image file in external store. This\nlist appears if the ``show_multiple_locations`` option is set to\n``true`` in the Image service ' s configuration file.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "metadata": {
          "description": "The location metadata.", 
          "format": "", 
          "type": "object"
        }, 
        "min_disk": {
          "description": "The minimum disk size in GB that is required to boot the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "The minimum amount of RAM in MB that is required to boot the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The name of the image.\n\nValue might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "owner": {
          "description": "The ID of the owner, or tenant, of the image.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "string"
        }, 
        "properties": {
          "description": "The image properties, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "protected": {
          "description": "Image protection for deletion. A valid value is ``true`` or\n``false``. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "schema": {
          "description": "The URL for schema of the virtual machine image.", 
          "format": "", 
          "type": "string"
        }, 
        "self": {
          "description": "The URL for the virtual machine image.", 
          "format": "", 
          "type": "string"
        }, 
        "size": {
          "description": "The size of the image data, in bytes.\n\nThe value might be ``null`` (JSON null data type).", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "visibility": {
          "description": "The image visibility. A valid value is ``public`` or ``private``.\nDefault is ``private``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "name", 
        "tags", 
        "container_format", 
        "created_at", 
        "disk_format", 
        "updated_at", 
        "min_disk", 
        "protected", 
        "id", 
        "min_ram", 
        "checksum", 
        "owner", 
        "visibility", 
        "size", 
        "locations", 
        "metadata", 
        "properties", 
        "direct_url", 
        "self", 
        "file", 
        "schema"
      ], 
      "type": "object"
    }, 
    "updateImageMember-v2": {
      "example": {
        "application/json": {
          "status": "accepted"
        }
      }, 
      "properties": {
        "status": {
          "description": "The status of this image member.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status"
      ], 
      "type": "object"
    }, 
    "updateImageMember-v2_200": {
      "properties": {
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "member_id": {
          "description": "The ID of the image member. An image member is a tenant with whom\nthe image is shared.\n\nThis call accepts either the ``member_id`` or ``member`` attribute\nin the request body. If you specify both attributes, the API uses\nthe ``member_id`` value and ignores the ``member`` value. Use of\nthe ``member`` attribute is supported but deprecated. Use of the\n``member_id`` attribute is preferred.", 
          "format": "", 
          "type": "string"
        }, 
        "schema": {
          "description": "The URL for schema of the member.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "created_at", 
        "member_id", 
        "schema", 
        "status", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "updateProperty-v2": {
      "example": {
        "application/json": {
          "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
          "enum": [
            "xen", 
            "qemu", 
            "kvm", 
            "lxc", 
            "uml", 
            "vmware", 
            "hyperv"
          ], 
          "name": "hypervisor_type", 
          "title": "Hypervisor Type", 
          "type": "string"
        }
      }, 
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items``, the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false``, the instance cannot be longer than the\nlist of schemas in ``items``.\n\nIf this value is ``true``, that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumerated list of property values.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression ( `ECMA 262 <http://www.ecma-\ninternational.org/publications/standards/Ecma-262.htm>`_ ) that a\nstring value must match.", 
          "format": "", 
          "type": "string"
        }, 
        "property_name": {
          "description": "The name of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "property_name", 
        "title", 
        "type"
      ], 
      "type": "object"
    }, 
    "updateProperty-v2_200": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items``, the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false``, the instance cannot be longer than the\nlist of schemas in ``items``.\n\nIf this value is ``true``, that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumerated list of property values.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name", 
        "title", 
        "type", 
        "enum", 
        "items", 
        "description", 
        "operators", 
        "default", 
        "readonly", 
        "minimum", 
        "maximum", 
        "minLength", 
        "maxLength", 
        "pattern", 
        "minItems", 
        "maxItems", 
        "uniqueItems", 
        "additionalItems"
      ], 
      "type": "object"
    }, 
    "updateTag-v2_200": {
      "properties": {
        "name": {
          "description": "The name of the tag.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name"
      ], 
      "type": "object"
    }
  }, 
  "externalDocs": {
    "description": "OpenStack Docs", 
    "url": "http://docs.openstack.org"
  }, 
  "host": "developer.openstack.org", 
  "info": {
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "title": "Image service", 
    "version": "v2", 
    "x-service": "image"
  }, 
  "paths": {
    "/": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listVersions-image-v2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "300": {
            "description": "", 
            "examples": {
              "application/json": {
                "versions": [
                  {
                    "id": "v3.0", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v3/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "EXPERIMENTAL"
                  }, 
                  {
                    "id": "v2.3", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "CURRENT"
                  }, 
                  {
                    "id": "v2.2", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v2.1", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v2.0", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v1.1", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v1/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v1.0", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v1/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists version information for all Image service API versions.", 
        "tags": [
          "versions-images"
        ], 
        "x-title": "List API versions"
      }
    }, 
    "/v2/images": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Returns a subset of the larger collection of images and a link that\nyou can use to get the next set of images. You should always check\nfor the presence of a ``next`` link and use it as the URI in a\nsubsequent HTTP GET request. You should follow this pattern until a\n``next`` link is no longer provided. The next link preserves any\nquery parameters that you send in your initial request. You can use\nthe ``first`` link to jump back to the first page of the\ncollection. If you prefer to paginate through images manually, use\nthe ``limit`` and ``marker`` parameters.\n\nThe list operation accepts query parameters to filter the response.\n\nA client can provide direct comparison filters by using most image\nattributes, such as ``name=Ubuntu``, ``visibility=public``, and so\non. A client cannot use tags or any ``link`` in the json-schema,\nsuch as self, file, or schema, to filter the response.\n\nYou can use the ``size_min`` and ``size_max`` query parameters to\nfilter images that are greater than or less than the image size.\nThe size, in bytes, is the size of an image on disk.\n\nFor example, to filter the container to include only images that\nare from 1 to 4 MB, set the ``size_min`` query parameter to\n``1048576`` and the ``size_max`` query parameter to ``4194304``.\n\nYou can list VM images that have a status of ``active``,\n``queued``, or ``saving``.\n\nYou can use query parameters to sort the results of this operation.\n\n- ``sort_key``. Sorts by an image attribute. Sorts in the natural\n  sorting direction of the image attribute.\n\n- ``sort_dir``. Sorts in a sort direction.\n\n- ``sort``. Sorts by one or more sets of attribute and sort\n  direction combinations. If you omit the sort direction in a set,\n  the default is ``desc``.\n\nTo sort the response, use the ``sort_key`` and ``sort_dir`` query\nparameters:\n\n.. code-block:: json\n\n   GET /v2/images?sort_key=name\n   &\n   sort_dir=asc\n   &\n   sort_key=status\n   &\n   sort_dir=desc\n\nAlternatively, specify the ``sort`` query parameter:\n\n.. code-block:: json\n\n   GET /v2/images?sort=name:asc,status:desc", 
        "operationId": "listImages-v2", 
        "parameters": [
          {
            "description": "Requests a page size of items. Returns a number of items up to a\nlimit value. Use the ``limit`` parameter to make an initial limited\nrequest and use the ID of the last-seen item from the response as\nthe ``marker`` parameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "The ID of the last-seen item. Use the ``limit`` parameter to make\nan initial limited request and use the ID of the last-seen item\nfrom the response as the ``marker`` parameter value in a subsequent\nlimited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a name, as a string.\n\nA valid value is the name of an image.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by an image visibility value or values.\n\nUse the comma (``,``) character to separate multiple values. A\nvalid value is ``public``, ``private``, or ``shared``. If you omit\nthis parameter, the response shows ``public``, ``private``, and\n``shared`` images with a member status of ``accepted``.", 
            "format": "", 
            "in": "query", 
            "name": "visibility", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a member status.\n\nA valid value is ``accepted``, ``pending``, ``rejected``, or\n``all``. Default is ``accepted``.", 
            "format": "", 
            "in": "query", 
            "name": "member_status", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a tenant ID.\n\nShows only images that are shared with this tenant owner.", 
            "format": "", 
            "in": "query", 
            "name": "owner", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by an image status.\n\nA valid value is ``queued``, ``saving``, ``active``, ``killed``,\n``deleted``, or ``pending_delete``.", 
            "format": "", 
            "in": "query", 
            "name": "status", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Filters the response by a minimum image size, in bytes.", 
            "format": "", 
            "in": "query", 
            "name": "size_min", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a maximum image size, in bytes.", 
            "format": "", 
            "in": "query", 
            "name": "size_max", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the response by an attribute, such as ``name``, ``id``, or\n``updated_at``. Default is ``created_at``. The API uses the natural\nsorting direction of the ``sort_key`` image attribute.", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the response by a set of one or more sort direction and\nattribute (``sort_key``) combinations. A valid value for the sort\ndirection is ``asc`` (ascending) or ``desc`` (descending). If you\nomit the sort direction in a set, the default is ``desc``.", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the response by one or more attribute and sort direction\ncombinations. You can also set multiple sort keys and directions.\nDefault direction is ``desc``.\n\nUse the comma (``,``) character to separate multiple values. For\nexample:\n\n.. code-block:: json\n\n   GET /v2/images?sort=name:asc,status:desc", 
            "format": "", 
            "in": "query", 
            "name": "sort", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by an image tag. For example,\n``?tag=\"cirros\"``.", 
            "format": "", 
            "in": "query", 
            "name": "tag", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by the date and time when the resource was\ncreated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nThe ``\u00b1hh:mm`` value, if included, returns the time zone as an\noffset from UTC.\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nIf you omit the ``created_at`` date and time stamp, its value is\n``null``.", 
            "format": "", 
            "in": "query", 
            "name": "created_at", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by the date and time when the resource was\nupdated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nIf you omit the time zone, the UTC time zone is assumed.\n\nIf you omit the ``updated_at`` date and time stamp, its value is\n``null``.", 
            "format": "", 
            "in": "query", 
            "name": "updated_at", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "first": "/v2/images", 
                "images": [
                  {
                    "checksum": "64d7c1cd2b6f60c92c14662941cb7913", 
                    "container_format": "bare", 
                    "created_at": "2014-11-07T17:07:06Z", 
                    "disk_format": "qcow2", 
                    "file": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27/file", 
                    "id": "1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                    "min_disk": 0, 
                    "min_ram": 0, 
                    "name": "cirros-0.3.2-x86_64-disk", 
                    "owner": "5ef70662f8b34079a6eddb8da9d75fe8", 
                    "protected": false, 
                    "schema": "/v2/schemas/image", 
                    "self": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                    "size": 13167616, 
                    "status": "active", 
                    "tags": [], 
                    "updated_at": "2014-11-07T17:19:09Z", 
                    "virtual_size": null, 
                    "visibility": "public"
                  }, 
                  {
                    "checksum": "afab0f79bac770d61d24b4d0560b5f70", 
                    "container_format": "bare", 
                    "created_at": "2014-10-30T08:23:39Z", 
                    "disk_format": "qcow2", 
                    "file": "/v2/images/781b3762-9469-4cec-b58d-3349e5de4e9c/file", 
                    "id": "781b3762-9469-4cec-b58d-3349e5de4e9c", 
                    "min_disk": 0, 
                    "min_ram": 0, 
                    "name": "F17-x86_64-cfntools", 
                    "owner": "5ef70662f8b34079a6eddb8da9d75fe8", 
                    "protected": false, 
                    "schema": "/v2/schemas/image", 
                    "self": "/v2/images/781b3762-9469-4cec-b58d-3349e5de4e9c", 
                    "size": 476704768, 
                    "status": "active", 
                    "tags": [], 
                    "updated_at": "2014-11-03T16:40:10Z", 
                    "virtual_size": null, 
                    "visibility": "public"
                  }
                ], 
                "schema": "/v2/schemas/images"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listImages-v2_200"
            }
          }
        }, 
        "summary": "(Since Image API v2.0) Lists public virtual machine (VM) images.", 
        "tags": [
          "images-images-v2"
        ], 
        "x-title": "List images"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The ``Location`` response header contains the URI for the image.\nThe response body contains the new image entity.\n\nSynchronous Postconditions\n\n- With correct permissions, you can see the image status as\n  ``queued`` through API calls.", 
        "operationId": "createImage-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createImage-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "checksum": null, 
                "container_format": "bare", 
                "created_at": "2015-11-29T22:21:42Z", 
                "disk_format": "raw", 
                "file": "/v2/images/b2173dd3-7ad6-4362-baa6-a68bce3565cb/file", 
                "id": "b2173dd3-7ad6-4362-baa6-a68bce3565cb", 
                "locations": [], 
                "min_disk": 0, 
                "min_ram": 0, 
                "name": "Ubuntu", 
                "owner": "bab7d5c60cd041a0a36f7c4b6e1dd978", 
                "protected": false, 
                "schema": "/v2/schemas/image", 
                "self": "/v2/images/b2173dd3-7ad6-4362-baa6-a68bce3565cb", 
                "size": null, 
                "status": "queued", 
                "tags": [], 
                "updated_at": "2015-11-29T22:21:42Z", 
                "virtual_size": null, 
                "visibility": "private"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createImage-v2_201"
            }
          }
        }, 
        "summary": "(Since Image API v2.0) Creates a virtual machine (VM) image.", 
        "tags": [
          "images-images-v2"
        ], 
        "x-title": "Create image"
      }
    }, 
    "/v2/images/{image_id}": {
      "delete": {
        "consumes": [], 
        "description": "You cannot delete images with the ``protected`` attribute set to\n``true`` (boolean).\n\nPreconditions\n\n- You can delete an image in any status except ``deleted``.\n\n- First, set the ``protected`` attribute to ``false`` (boolean).\n  Then, perform the delete.\n\nSynchronous Postconditions\n\n- The response is empty and returns the HTTP ``204`` response code.\n\n- The API deletes the image from the images index.\n\n- If the image stores binary image data in the storage node, the\n  OpenStack Image service deletes the data from the node.\n\nTroubleshooting\n\n- The call returns the HTTP ``403`` response code when the\n  ``protected`` attribute is set to ``true`` even if you have\n  correct permissions. Ensure that you meet the preconditions and\n  run the request again. If the request fails again, review your\n  API request.", 
        "operationId": "deleteImage-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Deletes an image.", 
        "tags": [
          "images-images-v2"
        ], 
        "x-title": "Delete image"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body contains a single image entity.\n\nPreconditions\n\n- The image must exist.", 
        "operationId": "showImage-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "checksum": "64d7c1cd2b6f60c92c14662941cb7913", 
                "container_format": "bare", 
                "created_at": "2014-05-05T17:15:10Z", 
                "disk_format": "qcow2", 
                "file": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27/file", 
                "id": "1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                "min_disk": 0, 
                "min_ram": 0, 
                "name": "cirros-0.3.2-x86_64-disk", 
                "owner": "5ef70662f8b34079a6eddb8da9d75fe8", 
                "protected": false, 
                "schema": "/v2/schemas/image", 
                "self": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                "size": 13167616, 
                "status": "active", 
                "tags": [], 
                "updated_at": "2014-05-05T17:15:11Z", 
                "virtual_size": null, 
                "visibility": "public"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showImage-v2_200"
            }
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Shows details for an image.", 
        "tags": [
          "images-images-v2"
        ], 
        "x-title": "Show image details"
      }, 
      "patch": {
        "consumes": [
          "application/json"
        ], 
        "description": "Depending on the referenced target location, this operation\nperforms one of these actions:\n\n**Image update actions**\n\n+--------------------------------------+----------------------------------------------------------+\n| Target location                      | Update action                                            |\n+--------------------------------------+----------------------------------------------------------+\n| An array index                       | The API inserts a new value into the array at the index. |\n+--------------------------------------+----------------------------------------------------------+\n| An object member that does not exist | The API adds a member to the object.                     |\n+--------------------------------------+----------------------------------------------------------+\n| An object member that exists         | The member value is replaced.                            |\n+--------------------------------------+----------------------------------------------------------+\n\nThe operation object must contain a ``value`` member that contains\nthe value to add. For example:\n\n.. code-block:: json\n\n   {\n       \"op\": \"add\",\n       \"path\": \"/a/b/c\",\n       \"value\": [\n           \"foo\",\n           \"bar\"\n       ]\n   }\n\nThe target location must reference one of these values:\n\n- The root of the target document. The value is the entire content\n  of the target document.\n\n- A member value to add to an object. The API adds the value to the\n  object at the location. If the member already exists, the API\n  replaces it with the value.\n\n- An element to add to the array. The API adds the element value to\n  the array at the location. The API shifts any element that is at\n  or above the index one position to the right. The index must not\n  be greater than the number of elements in the array. If you use\n  the hyphen (-) character to index the end of the array, the API\n  appends the value to the array. See `JavaScript Object Notation\n  (JSON) Pointer <http://tools.ietf.org/html/rfc6901>`_.\n\nBecause this operation adds to existing objects and arrays, its\ntarget location often does not exist.\n\nThe request body must conform to one of these media types:\n\n- ``application/openstack-images-v2.0-json-patch``\n\n- ``application/openstack-images-v2.1-json-patch`` (since Image API\n  v2.2)\n\nYou can also use the PATCH method to add or remove image\nproperties.\n\nFor information about the PATCH method and the available media\ntypes, see `Image API v2 HTTP PATCH media types\n<http://specs.openstack.org/openstack/glance-specs/specs/api/v2\n/http-patch-image-api-v2.html>`_.\n\nPreconditions\n\n- When you add a location to or replace a location in the image, you\n  must set the ``disk_format`` and ``container_format`` parameters\n  in the image.\n\n- When you replace a location, that location must be previously set\n  in the image.\n\nSynchronous Postconditions\n\n- With correct permissions, you can view the updated values of the\n  attributes of the image.\n\n- After you add a location to an image that had no location and with\n  correct permissions, you can use API calls to view the image\n  status as ``active``.\n\n- After you remove all locations from the image and with correct\n  permissions, you can use API calls to view the image status as\n  ``queued``.\n\nTroubleshooting\n\n- If you cannot update locations, your request might be missing some\n  information. Make sure that you meet the preconditions and run\n  the request again. If the request fails again, review your API\n  request.", 
        "operationId": "updateImage-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateImage-v2"
            }
          }, 
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "checksum": "2cec138d7dae2aa59038ef8c9aec2390", 
                "container_format": null, 
                "created_at": "2012-08-10T19:23:50Z", 
                "disk_format": null, 
                "file": "/v2/images/da3b75d9-3f4a-40e7-8a2c-bfab23927dea/file", 
                "id": "da3b75d9-3f4a-40e7-8a2c-bfab23927dea", 
                "min_disk": null, 
                "min_ram": null, 
                "name": "Fedora 17", 
                "owner": null, 
                "schema": "/v2/schemas/image", 
                "self": "/v2/images/da3b75d9-3f4a-40e7-8a2c-bfab23927dea", 
                "size": 2254249, 
                "status": "active", 
                "tags": [
                  "fedora", 
                  "beefy"
                ], 
                "updated_at": "2012-08-12T11:11:33Z", 
                "virtual_size": null, 
                "visibility": "public"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateImage-v2_200"
            }
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Updates an image.", 
        "tags": [
          "images-images-v2"
        ], 
        "x-title": "Update image"
      }
    }, 
    "/v2/images/{image_id}/actions/deactivate": {
      "post": {
        "consumes": [], 
        "description": "If you try to download a deactivated image, the call returns the\n``Forbidden (403)`` response code. Also, only administrative users\ncan view image locations for deactivated images.\n\nThe deactivate operation returns an error if the image status is\nnot ``active`` or ``deactivated``.\n\nPreconditions\n\n- The image must exist.", 
        "operationId": "deactivateImage-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Deactivates an image.", 
        "tags": [
          "images-images-v2"
        ], 
        "x-title": "Deactivate image"
      }
    }, 
    "/v2/images/{image_id}/actions/reactivate": {
      "post": {
        "consumes": [], 
        "description": "The reactivate operation returns an error if the image status is\nnot ``active`` or ``deactivated``.\n\nPreconditions\n\n- The image must exist.", 
        "operationId": "reactivateImage-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Reactivates an image.", 
        "tags": [
          "images-images-v2"
        ], 
        "x-title": "Reactivate image"
      }
    }, 
    "/v2/images/{image_id}/file": {
      "get": {
        "consumes": [], 
        "description": "Example call: ``curl -i -X GET -H \"X-Auth-Token: $token\"\n$image_url/v2/images/{image_id}/file``\n\nThe response body contains the raw binary data that represents the\nactual virtual disk. The ``Content-Type`` header contains the\n``application/octet-stream`` value. The ``Content-MD5`` header\ncontains an MD5 checksum of the image data. Use this checksum to\nverify the integrity of the image data.\n\n\n\nPreconditions\n\n- The images must exist.\n\nSynchronous Postconditions\n\n- You can download the binary image data in your machine if the\n  image has image data.\n\n- If image data exists, the call returns the HTTP ``200`` response\n  code.\n\n- If no image data exists, the call returns the HTTP ``204``\n  response code.", 
        "operationId": "showImageFile-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The content range of image data. For details, see `Hypertext\nTransfer Protocol (HTTP/1.1): Range Requests\n<http://tools.ietf.org/html/rfc7233>`_.", 
            "format": "", 
            "in": "header", 
            "name": "Content-Range", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Downloads binary image data.", 
        "tags": [
          "image-data"
        ], 
        "x-title": "Download binary image data"
      }, 
      "put": {
        "consumes": [], 
        "description": "Set the ``Content-Type`` request header to ``application/octet-\nstream``.\n\nExample call:\n\n::\n\n   curl -i -X PUT -H \"X-Auth-Token: $token\" -H \"Content-Type: application/octet-stream\" \\\n      -d @/home/glance/ubuntu-12.10.qcow2 $image_url/v2/images/{image_id}/file\n\nPreconditions\n\nBefore you can store binary image data, you must meet the following\npreconditions:\n\n- The image must exist.\n\n- You must set the disk and container formats in the image.\n\n- The image status must be ``queued``.\n\n- Your image storage quota must be sufficient.\n\n- The size of the data that you want to store must not exceed the\n  size that the OpenStack Image service allows.\n\nSynchronous Postconditions\n\n- With correct permissions, you can see the image status as\n  ``active`` through API calls.\n\n- With correct access, you can see the stored data in the storage\n  system that OpenStack Image service manages.\n\nTroubleshooting\n\n- If you cannot store the data, either your request lacks required\n  information or you exceeded your allotted quota. Ensure that you\n  meet the preconditions and run the request again. If the request\n  fails again, review your API request.\n\n- The storage back ends for storing the data must have enough free\n  storage space to accommodate the size of the data.", 
        "operationId": "storeImageFile-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Uploads binary image data.", 
        "tags": [
          "image-data"
        ], 
        "x-title": "Upload binary image data"
      }
    }, 
    "/v2/images/{image_id}/members": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "If a user who shares this image makes this call, the member list\ncontains only information for that user.\n\nIf a user who does not share this image makes this call, the call\nreturns the HTTP ``404`` response code.\n\nPreconditions\n\n- The image must exist.\n\n- You must be the owner or a member of the image.", 
        "operationId": "listImageMembers-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "members": [
                  {
                    "created_at": "2013-10-07T17:58:03Z", 
                    "image_id": "dbc999e3-c52f-4200-bedd-3b18fe7f87fe", 
                    "member_id": "123456789", 
                    "schema": "/v2/schemas/member", 
                    "status": "pending", 
                    "updated_at": "2013-10-07T17:58:03Z"
                  }, 
                  {
                    "created_at": "2013-10-07T17:58:55Z", 
                    "image_id": "dbc999e3-c52f-4200-bedd-3b18fe7f87fe", 
                    "member_id": "987654321", 
                    "schema": "/v2/schemas/member", 
                    "status": "accepted", 
                    "updated_at": "2013-10-08T12:08:55Z"
                  }
                ], 
                "schema": "/v2/schemas/members"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listImageMembers-v2_200"
            }
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.1) Lists the tenants that share this image.", 
        "tags": [
          "members"
        ], 
        "x-title": "List image members"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This call accepts either the ``member_id`` or ``member`` attribute\nin the request body. If you specify both attributes, the API uses\nthe ``member_id`` value and ignores the ``member`` value. Use of\nthe ``member`` attribute is supported but deprecated. Use of the\n``member_id`` attribute is preferred.\n\nPreconditions\n\n- The images must exist.\n\n- You can add a member to a private image.\n\n- You must be the owner of the image.\n\nSynchronous Postconditions\n\n- With correct permissions, you can see the member status of the\n  image as ``pending`` through API calls.\n\nTroubleshooting\n\n- Even if you have correct permissions, if the ``visibility``\n  attribute is set to ``public``, the request returns the HTTP\n  ``403`` response code. Ensure that you meet the preconditions and\n  run the request again. If the request fails again, review your\n  API request.\n\n- If the member is already a member for the image, the service\n  returns the ``Conflict (409)`` response code. If you meant to\n  specify a different member, run the request again.", 
        "operationId": "createImageMember-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createImageMember-v2"
            }
          }, 
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2013-09-20T19:22:19Z", 
                "image_id": "a96be11e-8536-4910-92cb-de50aa19dfe6", 
                "member_id": "8989447062e04a818baf9e073fd04fa7", 
                "schema": "/v2/schemas/member", 
                "status": "pending", 
                "updated_at": "2013-09-20T19:25:31Z"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createImageMember-v2_200"
            }
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.1) Adds a tenant ID as an image member.", 
        "tags": [
          "members"
        ], 
        "x-title": "Create image member"
      }
    }, 
    "/v2/images/{image_id}/members/{member_id}": {
      "delete": {
        "consumes": [], 
        "description": "Preconditions\n\n- The image must exist.\n\n- You must be the owner of the image.\n\nSynchronous Postconditions\n\n- The API removes the member from the image members.\n\nTroubleshooting\n\n- Even if you have correct permissions, if you are not the owner of\n  the image or you specify an incorrect image ID or member ID, the\n  call returns the HTTP ``403`` or ``404`` response code. Ensure\n  that you meet the preconditions and run the request again. If the\n  request fails again, review your API request URI.", 
        "operationId": "deleteImageMember-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The ID of the image member. An image member is a tenant with whom\nthe image is shared.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.1) Deletes a tenant ID from the member list of an image.", 
        "tags": [
          "members"
        ], 
        "x-title": "Delete image member"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Response body is a single image member entity.\n\nPreconditions\n\n- The image must exist.\n\n- You must be the owner or a member of the image.", 
        "operationId": "showImageMember-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The ID of the image member. An image member is a tenant with whom\nthe image is shared.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2013-11-26T07:21:21Z", 
                "image_id": "0ae74cc5-5147-4239-9ce2-b0c580f7067e", 
                "member_id": "8989447062e04a818baf9e073fd04fa7", 
                "schema": "/v2/schemas/member", 
                "status": "pending", 
                "updated_at": "2013-11-26T07:21:21Z"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showImageMember-v2_200"
            }
          }
        }, 
        "summary": "(Since Image API v2.2) Shows image member details.", 
        "tags": [
          "members"
        ], 
        "x-title": "Show image member details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "Preconditions\n\n- The images must exist.\n\n- You must be a member of the image.\n\nSynchronous Postconditions\n\n- If you update the member status to ``accepted`` and have the\n  correct permissions, you see the image in list images responses.\n\n- With correct permissions, you can make API calls to see the\n  updated member status of the image.", 
        "operationId": "updateImageMember-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateImageMember-v2"
            }
          }, 
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The ID of the image member. An image member is a tenant with whom\nthe image is shared.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2013-09-20T19:22:19Z", 
                "image_id": "a96be11e-8536-4910-92cb-de50aa19dfe6", 
                "member_id": "8989447062e04a818baf9e073fd04fa7", 
                "schema": "/v2/schemas/member", 
                "status": "accepted", 
                "updated_at": "2013-09-20T20:15:31Z"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateImageMember-v2_200"
            }
          }
        }, 
        "summary": "(Since Image API v2.1) Sets the status for an image member.", 
        "tags": [
          "members"
        ], 
        "x-title": "Update image member"
      }
    }, 
    "/v2/images/{image_id}/tags/{tag}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteImageTag-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The image tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Deletes a tag from an image.", 
        "tags": [
          "image-tags"
        ], 
        "x-title": "Delete image tag"
      }, 
      "put": {
        "consumes": [], 
        "description": "", 
        "operationId": "addImageTag-v2", 
        "parameters": [
          {
            "description": "The UUID of the image.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The image tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Image API v2.0) Adds a tag to an image.", 
        "tags": [
          "image-tags"
        ], 
        "x-title": "Add image tag"
      }
    }, 
    "/v2/metadefs/namespaces": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Returns a subset in the larger collection of namespaces and a link\nthat you can use to get the next set of namespaces. Check for the\npresence of a ``next`` link and use it as the URI in a subsequent\nHTTP GET request. Follow this pattern until a ``next`` link is no\nlonger provided. The ``next`` link preserves any query parameters\nthat you send in your initial request. You can use the ``first``\nlink to return to the first page in the collection. If you prefer\nto paginate through namespaces manually, use the ``limit`` and\n``marker`` parameters.\n\nThe list operation accepts the ``resource_types`` and\n``visibility`` query parameters, which you can use to filter the\nresponse.\n\nTo sort the results of this operation, use the ``sort_key`` and\n``sort_dir`` parameters. The API uses the natural sorting order in\nthe namespace attribute that you provide as the ``sort_key``\nparameter.", 
        "operationId": "listNamespaces-v2", 
        "parameters": [
          {
            "description": "Requests a page size of items. Returns a number of items up to a\nlimit value. Use the ``limit`` parameter to make an initial limited\nrequest and use the ID of the last-seen item from the response as\nthe ``marker`` parameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "The ID of the last-seen item. Use the ``limit`` parameter to make\nan initial limited request and use the ID of the last-seen item\nfrom the response as the ``marker`` parameter value in a subsequent\nlimited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by an image visibility value or values.\n\nUse the comma (``,``) character to separate multiple values. A\nvalid value is ``public``, ``private``, or ``shared``. If you omit\nthis parameter, the response shows ``public``, ``private``, and\n``shared`` images with a member status of ``accepted``.", 
            "format": "", 
            "in": "query", 
            "name": "visibility", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a resource type or types.\n\nUse the comma (``,``) character to separate multiple values. For\nexample, ``OS::Glance::Image,OS::Nova::Flavor`` shows only\nnamespaces for these resource types.", 
            "format": "", 
            "in": "query", 
            "name": "resource_types", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Sorts the response by an attribute, such as ``name``, ``id``, or\n``updated_at``. Default is ``created_at``. The API uses the natural\nsorting direction of the ``sort_key`` image attribute.", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the response by a set of one or more sort direction and\nattribute (``sort_key``) combinations. A valid value for the sort\ndirection is ``asc`` (ascending) or ``desc`` (descending). If you\nomit the sort direction in a set, the default is ``desc``.", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "first": "/v2/metadefs/namespaces?sort_key=created_at&sort_dir=asc", 
                "namespaces": [
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "description": "The libvirt compute driver options. These are properties specific to compute drivers.  For a list of all hypervisors, see here: https://wiki.openstack.org/wiki/HypervisorSupportMatrix.", 
                    "display_name": "libvirt Driver Options", 
                    "namespace": "OS::Compute::Libvirt", 
                    "owner": "admin", 
                    "protected": true, 
                    "resource_type_associations": [
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Glance::Image", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }
                    ], 
                    "schema": "/v2/schemas/metadefs/namespace", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Libvirt", 
                    "updated_at": "2014-08-28T17:13:06Z", 
                    "visibility": "public"
                  }, 
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "description": "Compute drivers may enable quotas on CPUs available to a VM, disk tuning, bandwidth I/O, and instance VIF traffic control.  See: http://docs.openstack.org/admin-guide-cloud/compute-flavors.html", 
                    "display_name": "Flavor Quota", 
                    "namespace": "OS::Compute::Quota", 
                    "owner": "admin", 
                    "protected": true, 
                    "resource_type_associations": [
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Nova::Flavor", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }
                    ], 
                    "schema": "/v2/schemas/metadefs/namespace", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Quota", 
                    "updated_at": "2014-08-28T17:13:06Z", 
                    "visibility": "public"
                  }, 
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "description": "Trusted compute pools with Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) support IT compliance by protecting virtualized data centers - private, public, and hybrid clouds against attacks toward hypervisor and BIOS, firmware, and other pre-launch software components.", 
                    "display_name": "Trusted Compute Pools (Intel\u00ae TXT)", 
                    "namespace": "OS::Compute::Trust", 
                    "owner": "admin", 
                    "protected": true, 
                    "resource_type_associations": [
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Nova::Flavor", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }
                    ], 
                    "schema": "/v2/schemas/metadefs/namespace", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Trust", 
                    "updated_at": "2014-08-28T17:13:06Z", 
                    "visibility": "public"
                  }, 
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "description": "This provides the preferred socket/core/thread counts for the virtual CPU instance exposed to guests. This enables the ability to avoid hitting limitations on vCPU topologies that OS vendors place on their products. See also: http://git.openstack.org/cgit/openstack/nova-specs/tree/specs/juno/virt-driver-vcpu-topology.rst", 
                    "display_name": "Virtual CPU Topology", 
                    "namespace": "OS::Compute::VirtCPUTopology", 
                    "owner": "admin", 
                    "protected": true, 
                    "resource_type_associations": [
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Glance::Image", 
                        "prefix": "hw_", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }, 
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Cinder::Volume", 
                        "prefix": "hw_", 
                        "properties_target": "image", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }, 
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Nova::Flavor", 
                        "prefix": "hw:", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }
                    ], 
                    "schema": "/v2/schemas/metadefs/namespace", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::VirtCPUTopology", 
                    "updated_at": "2014-08-28T17:13:06Z", 
                    "visibility": "public"
                  }
                ], 
                "schema": "/v2/schemas/metadefs/namespaces"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listNamespaces-v2_200"
            }
          }
        }, 
        "summary": "Lists public namespaces.", 
        "tags": [
          "metadefs-namespaces-v2"
        ], 
        "x-title": "List namespaces"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The ``Location`` response header contains the newly-created URI for\nthe namespace.", 
        "operationId": "createNamespace-v2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "description": "Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the hardware specification required when a new vm is requested.", 
                "display_name": "Hypervisor Selection", 
                "namespace": "OS::Compute::Hypervisor", 
                "properties": {
                  "hypervisor_type": {
                    "description": "The hypervisor type.", 
                    "enum": [
                      "xen", 
                      "qemu", 
                      "kvm", 
                      "lxc", 
                      "uml", 
                      "vmware", 
                      "hyperv"
                    ], 
                    "title": "Hypervisor Type", 
                    "type": "string"
                  }, 
                  "vm_mode": {
                    "description": "The virtual machine mode.", 
                    "enum": [
                      "hvm", 
                      "xen", 
                      "uml", 
                      "exe"
                    ], 
                    "title": "VM Mode", 
                    "type": "string"
                  }
                }, 
                "protected": true, 
                "resource_type_associations": [
                  {
                    "name": "OS::Glance::Image"
                  }
                ], 
                "schema": "/v2/schemas/metadefs/namespace", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Hypervisor", 
                "visibility": "public"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createNamespace-v2_201"
            }
          }
        }, 
        "summary": "Creates a namespace.", 
        "tags": [
          "metadefs-namespaces-v2"
        ], 
        "x-title": "Create namespace"
      }
    }, 
    "/v2/metadefs/namespaces/tags/{namespace_id}": {
      "delete": {
        "consumes": [], 
        "description": "You cannot delete tags in a namespace with the 'protected'\nattribute set to true (boolean); the response returns the HTTP 403\nstatus code.\n\nYou must first set the ``protected`` attribute to false (boolean)\non the namespace and then perform the delete. The response is empty\nand returns the HTTP 204 status code.", 
        "operationId": "deleteAllTags-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/deleteAllTags-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes all tag definitions within a namespace.", 
        "tags": [
          "metadefs-namespaces-tags-v2"
        ], 
        "x-title": "Delete all tag definitions"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "To manually paginate through the list of tags, use the ``limit``\nand ``marker`` parameters.\n\nTo sort the results of this operation use the ``sort_key`` and\n``sort_dir`` parameters. The API uses the natural sort order of the\ntag attribute of the ``sort_key`` parameter.", 
        "operationId": "listTags-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/listTags-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Requests a page size of items. Returns a number of items up to a\nlimit value. Use the ``limit`` parameter to make an initial limited\nrequest and use the ID of the last-seen item from the response as\nthe ``marker`` parameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "The ID of the last-seen item. Use the ``limit`` parameter to make\nan initial limited request and use the ID of the last-seen item\nfrom the response as the ``marker`` parameter value in a subsequent\nlimited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the response by an attribute, such as ``name``, ``id``, or\n``updated_at``. Default is ``created_at``. The API uses the natural\nsorting direction of the ``sort_key`` image attribute.", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the response by a set of one or more sort direction and\nattribute (``sort_key``) combinations. A valid value for the sort\ndirection is ``asc`` (ascending) or ``desc`` (descending). If you\nomit the sort direction in a set, the default is ``desc``.", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "tags": [
                  {
                    "name": "sample-tag1"
                  }, 
                  {
                    "name": "sample-tag2"
                  }, 
                  {
                    "name": "sample-tag3"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listTags-v2_200"
            }
          }
        }, 
        "summary": "Lists the tag definitions within a namespace.", 
        "tags": [
          "metadefs-namespaces-tags-v2"
        ], 
        "x-title": "List tags"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createTags-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createTags-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "tags": [
                  {
                    "name": "sample-tag1"
                  }, 
                  {
                    "name": "sample-tag2"
                  }, 
                  {
                    "name": "sample-tag3"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createTags-v2_201"
            }
          }
        }, 
        "summary": "Creates one or more tag definitions in a namespace.", 
        "tags": [
          "metadefs-namespaces-tags-v2"
        ], 
        "x-title": "Create tags"
      }
    }, 
    "/v2/metadefs/namespaces/tags/{namespace_id}/{tag_name}": {
      "delete": {
        "consumes": [], 
        "description": "You cannot delete tags in a namespace with the 'protected'\nattribute set to true (boolean); the response returns the HTTP 403\nstatus code.\n\nYou must first set the ``protected`` attribute to false (boolean)\non the namespace and then perform the delete. The response is empty\nand returns the HTTP 204 status code.", 
        "operationId": "deleteTag-v2", 
        "parameters": [
          {
            "description": "The name of the tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a tag definition within a namespace.", 
        "tags": [
          "metadefs-namespaces-tags-v2"
        ], 
        "x-title": "Delete tag definition"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body shows a single tag entity.", 
        "operationId": "showTag-v2", 
        "parameters": [
          {
            "description": "The name of the tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2015-05-06T23:16:12Z", 
                "name": "sample-tag2", 
                "updated_at": "2015-05-06T23:16:12Z"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showTag-v2_200"
            }
          }
        }, 
        "summary": "Gets a definition for a tag.", 
        "tags": [
          "metadefs-namespaces-tags-v2"
        ], 
        "x-title": "Get tag definition"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "addTag-v2", 
        "parameters": [
          {
            "description": "The name of the tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2015-05-09T01:12:31Z", 
                "name": "added-sample-tag", 
                "updated_at": "2015-05-09T01:12:31Z"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/addTag-v2_200"
            }
          }
        }, 
        "summary": "Adds a tag to the list of namespace tag definitions.", 
        "tags": [
          "metadefs-namespaces-tags-v2"
        ], 
        "x-title": "Add tag definition"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateTag-v2", 
        "parameters": [
          {
            "description": "The name of the tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "name": "new-tag-name"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateTag-v2_200"
            }
          }
        }, 
        "summary": "Renames a tag definition.", 
        "tags": [
          "metadefs-namespaces-tags-v2"
        ], 
        "x-title": "Update tag definition"
      }
    }, 
    "/v2/metadefs/namespaces/{namespace_id}": {
      "delete": {
        "consumes": [], 
        "description": "You cannot delete namespaces with the ``protected`` attribute set\nto ``true`` (boolean); the response returns the HTTP ``403``\nresponse code.\n\nTo delete a namespace, you must first make an update namespace\nrequest to set the ``protected`` attribute to false (boolean) on\nthe namespace. Then, delete the namespace.\n\nA successful operation returns the HTTP ``204`` response code.\n\nIf you try to remove a namespace with the ``protected`` attribute\nset to true (boolean), the operation fails and the response returns\nthe HTTP ``403`` response code.", 
        "operationId": "deleteNamespace-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a namespace and its properties, objects, and any resource type associations.", 
        "tags": [
          "metadefs-namespaces-v2"
        ], 
        "x-title": "Delete namespace"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body shows a single namespace entity with all details\nincluding properties and objects.", 
        "operationId": "showNamespace-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2014-08-28T17:13:06Z", 
                "description": "The libvirt compute driver options. These are properties specific to compute drivers.  For a list of all hypervisors, see here: https://wiki.openstack.org/wiki/HypervisorSupportMatrix.", 
                "display_name": "libvirt Driver Options", 
                "namespace": "OS::Compute::Libvirt", 
                "owner": "admin", 
                "properties": {
                  "hw_disk_bus": {
                    "description": "Specifies the type of disk controller to attach disk devices to.", 
                    "enum": [
                      "scsi", 
                      "virtio", 
                      "uml", 
                      "xen", 
                      "ide", 
                      "usb"
                    ], 
                    "title": "Disk Bus", 
                    "type": "string"
                  }, 
                  "hw_machine_type": {
                    "description": "Enables booting an ARM system using the specified machine type. By default, if an ARM image is used and its type is not specified, Compute uses vexpress-a15 (for ARMv7) or virt (for AArch64) machine types. Valid types can be viewed by using the virsh capabilities command (machine types are displayed in the machine tag).", 
                    "title": "Machine Type", 
                    "type": "string"
                  }, 
                  "hw_qemu_guest_agent": {
                    "description": "It is a daemon program running inside the domain which is supposed to help management applications with executing functions which need assistance of the guest OS. For example, freezing and thawing filesystems, entering suspend. However, guest agent (GA) is not bullet proof, and hostile guest OS can send spurious replies.", 
                    "enum": [
                      "yes", 
                      "no"
                    ], 
                    "title": "QEMU Guest Agent", 
                    "type": "string"
                  }, 
                  "hw_rng_model": {
                    "default": "virtio", 
                    "description": "Adds a random-number generator device to the image's instances. The cloud administrator can enable and control device behavior by configuring the instance's flavor. By default: The generator device is disabled. /dev/random is used as the default entropy source. To specify a physical HW RNG device, use the following option in the nova.conf file: rng_dev_path=/dev/hwrng", 
                    "title": "Random Number Generator Device", 
                    "type": "string"
                  }, 
                  "hw_scsi_model": {
                    "default": "virtio-scsi", 
                    "description": "Enables the use of VirtIO SCSI (virtio-scsi) to provide block device access for compute instances; by default, instances use VirtIO Block (virtio-blk). VirtIO SCSI is a para-virtualized SCSI controller device that provides improved scalability and performance, and supports advanced SCSI hardware.", 
                    "title": "SCSI Model", 
                    "type": "string"
                  }, 
                  "hw_video_model": {
                    "description": "The video image driver used.", 
                    "enum": [
                      "vga", 
                      "cirrus", 
                      "vmvga", 
                      "xen", 
                      "qxl"
                    ], 
                    "title": "Video Model", 
                    "type": "string"
                  }, 
                  "hw_video_ram": {
                    "description": "Maximum RAM for the video image. Used only if a hw_video:ram_max_mb value has been set in the flavor's extra_specs and that value is higher than the value set in hw_video_ram.", 
                    "title": "Max Video Ram", 
                    "type": "integer"
                  }, 
                  "hw_vif_model": {
                    "description": "Specifies the model of virtual network interface device to use. The valid options depend on the configured hypervisor. KVM and QEMU: e1000, ne2k_pci, pcnet, rtl8139, and virtio. VMware: e1000, e1000e, VirtualE1000, VirtualE1000e, VirtualPCNet32, VirtualSriovEthernetCard, and VirtualVmxnet. Xen: e1000, netfront, ne2k_pci, pcnet, and rtl8139.", 
                    "enum": [
                      "e1000", 
                      "ne2k_pci", 
                      "pcnet", 
                      "rtl8139", 
                      "virtio", 
                      "e1000", 
                      "e1000e", 
                      "VirtualE1000", 
                      "VirtualE1000e", 
                      "VirtualPCNet32", 
                      "VirtualSriovEthernetCard", 
                      "VirtualVmxnet", 
                      "netfront", 
                      "ne2k_pci"
                    ], 
                    "title": "Virtual Network Interface", 
                    "type": "string"
                  }, 
                  "os_command_line": {
                    "description": "The kernel command line to be used by the libvirt driver, instead of the default. For linux containers (LXC), the value is used as arguments for initialization. This key is valid only for Amazon kernel, ramdisk, or machine images (aki, ari, or ami).", 
                    "title": "Kernel Command Line", 
                    "type": "string"
                  }
                }, 
                "protected": true, 
                "resource_type_associations": [
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "name": "OS::Glance::Image", 
                    "updated_at": "2014-08-28T17:13:06Z"
                  }
                ], 
                "schema": "/v2/schemas/metadefs/namespace", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Libvirt", 
                "updated_at": "2014-08-28T17:13:06Z", 
                "visibility": "public"
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Gets details for a namespace.", 
        "tags": [
          "metadefs-namespaces-v2"
        ], 
        "x-title": "Get namespaces details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateNamespace-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T13:31:37Z", 
                "description": "Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the harware specification required when a new vm is requested.", 
                "display_name": "Hypervisor Selection", 
                "namespace": "OS::Compute::Hypervisor", 
                "owner": "7ec22942411e427692e8a3436be1031a", 
                "protected": false, 
                "schema": "/v2/schemas/metadefs/namespace", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Hypervisor", 
                "updated_at": "2014-09-19T13:31:37Z", 
                "visibility": "public"
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a namespace.", 
        "tags": [
          "metadefs-namespaces-v2"
        ], 
        "x-title": "Update namespace"
      }
    }, 
    "/v2/metadefs/namespaces/{namespace_id}/objects": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Returns a subset of the larger collection of namespaces and a link\nthat you can use to get the next set of namespaces. You should\nalways check for the presence of a ``next`` link and use it as the\nURI in a subsequent HTTP GET request. You should follow this\npattern until a ``next`` link is no longer provided. The next link\npreserves any query parameters that you send in your initial\nrequest. You can use the ``first`` link to jump back to the first\npage of the collection. If you prefer to paginate through\nnamespaces manually, use the ``limit`` and ``marker`` parameters.\n\nUse the ``resource_types`` and ``visibility`` query parameters to\nfilter the response.\n\nFor example, set the ``resource_types`` query parameter to\n``OS::Glance::Image,OS::Nova::Flavor`` to filter the response to\ninclude only namespaces that are associated with the given resource\ntypes.\n\nYou can sort the results of this operation by using the\n``sort_key`` and ``sort_dir`` parameters. The API uses the natural\nsorting of whatever namespace attribute is provided as the\n``sort_key``.", 
        "operationId": "listObjects-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a namespace visibility value.\n\nA valid value is ``public`` or ``private``. If you omit this\nparameter, the response shows ``public`` and ``private``\nnamespaces.", 
            "format": "", 
            "in": "query", 
            "name": "visibility", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a resource type or types.\n\nUse the comma (``,``) character to separate multiple values. For\nexample, ``OS::Glance::Image,OS::Nova::Flavor`` shows only\nnamespaces for these resource types.", 
            "format": "", 
            "in": "query", 
            "name": "resource_types", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Sorts the response by an attribute, such as ``name``, ``id``, or\n``updated_at``. Default is ``created_at``. The API uses the natural\nsorting direction of the ``sort_key`` image attribute.", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the response by a set of one or more sort direction and\nattribute (``sort_key``) combinations. A valid value for the sort\ndirection is ``asc`` (ascending) or ``desc`` (descending). If you\nomit the sort direction in a set, the default is ``desc``.", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "objects": [
                  {
                    "created_at": "2014-09-18T18:16:35Z", 
                    "description": "You can configure the CPU limits with control parameters.", 
                    "name": "CPU Limits", 
                    "properties": {
                      "quota:cpu_period": {
                        "description": "Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value.", 
                        "maximum": 1000000, 
                        "minimum": 1000, 
                        "title": "Quota: CPU Period", 
                        "type": "integer"
                      }, 
                      "quota:cpu_quota": {
                        "description": "Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.", 
                        "title": "Quota: CPU Quota", 
                        "type": "integer"
                      }, 
                      "quota:cpu_shares": {
                        "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                        "title": "Quota: CPU Shares", 
                        "type": "integer"
                      }
                    }, 
                    "required": [], 
                    "schema": "/v2/schemas/metadefs/object", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/CPU Limits"
                  }, 
                  {
                    "created_at": "2014-09-18T18:16:35Z", 
                    "description": "Using disk I/O quotas, you can set maximum disk write to 10 MB per second for a VM user.", 
                    "name": "Disk QoS", 
                    "properties": {
                      "quota:disk_read_bytes_sec": {
                        "description": "Sets disk I/O quota for disk read bytes / sec.", 
                        "title": "Quota: Disk read bytes / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_read_iops_sec": {
                        "description": "Sets disk I/O quota for disk read IOPS / sec.", 
                        "title": "Quota: Disk read IOPS / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_total_bytes_sec": {
                        "description": "Sets disk I/O quota for total disk bytes / sec.", 
                        "title": "Quota: Disk Total Bytes / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_total_iops_sec": {
                        "description": "Sets disk I/O quota for disk total IOPS / sec.", 
                        "title": "Quota: Disk Total IOPS / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_write_bytes_sec": {
                        "description": "Sets disk I/O quota for disk write bytes / sec.", 
                        "title": "Quota: Disk Write Bytes / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_write_iops_sec": {
                        "description": "Sets disk I/O quota for disk write IOPS / sec.", 
                        "title": "Quota: Disk Write IOPS / sec", 
                        "type": "integer"
                      }
                    }, 
                    "required": [], 
                    "schema": "/v2/schemas/metadefs/object", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/Disk QoS"
                  }, 
                  {
                    "created_at": "2014-09-18T18:16:35Z", 
                    "description": "Bandwidth QoS tuning for instance virtual interfaces (VIFs) may be specified with these properties. Incoming and outgoing traffic can be shaped independently. If not specified, no quality of service (QoS) is applied on that traffic direction. So, if you want to shape only the network's incoming traffic, use inbound only (and vice versa). The OpenStack Networking service abstracts the physical implementation of the network, allowing plugins to configure and manage physical resources. Virtual Interfaces (VIF) in the logical model are analogous to physical network interface cards (NICs). VIFs are typically owned a managed by an external service; for instance when OpenStack Networking is used for building OpenStack networks, VIFs would be created, owned, and managed in Nova. VIFs are connected to OpenStack Networking networks via ports. A port is analogous to a port on a network switch, and it has an administrative state. When a VIF is attached to a port the OpenStack Networking API creates an attachment object, which specifies the fact that a VIF with a given identifier is plugged into the port.", 
                    "name": "Virtual Interface QoS", 
                    "properties": {
                      "quota:vif_inbound_average": {
                        "description": "Network Virtual Interface (VIF) inbound average in kilobytes per second. Specifies average bit rate on the interface being shaped.", 
                        "title": "Quota: VIF Inbound Average", 
                        "type": "integer"
                      }, 
                      "quota:vif_inbound_burst": {
                        "description": "Network Virtual Interface (VIF) inbound burst in total kilobytes. Specifies the amount of bytes that can be burst at peak speed.", 
                        "title": "Quota: VIF Inbound Burst", 
                        "type": "integer"
                      }, 
                      "quota:vif_inbound_peak": {
                        "description": "Network Virtual Interface (VIF) inbound peak in kilobytes per second. Specifies maximum rate at which an interface can receive data.", 
                        "title": "Quota: VIF Inbound Peak", 
                        "type": "integer"
                      }, 
                      "quota:vif_outbound_average": {
                        "description": "Network Virtual Interface (VIF) outbound average in kilobytes per second. Specifies average bit rate on the interface being shaped.", 
                        "title": "Quota: VIF Outbound Average", 
                        "type": "integer"
                      }, 
                      "quota:vif_outbound_burst": {
                        "description": "Network Virtual Interface (VIF) outbound burst in total kilobytes. Specifies the amount of bytes that can be burst at peak speed.", 
                        "title": "Quota: VIF Outbound Burst", 
                        "type": "integer"
                      }, 
                      "quota:vif_outbound_peak": {
                        "description": "Network Virtual Interface (VIF) outbound peak in kilobytes per second. Specifies maximum rate at which an interface can send data.", 
                        "title": "Quota: VIF Outbound Burst", 
                        "type": "integer"
                      }
                    }, 
                    "required": [], 
                    "schema": "/v2/schemas/metadefs/object", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/Virtual Interface QoS"
                  }
                ], 
                "schema": "v2/schemas/metadefs/objects"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listObjects-v2_200"
            }
          }
        }, 
        "summary": "Lists object definitions in a namespace.", 
        "tags": [
          "metadefs-namespaces-objects-v2"
        ], 
        "x-title": "List object definitions"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createObject-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createObject-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T18:20:56Z", 
                "description": "You can configure the CPU limits with control parameters.", 
                "name": "CPU Limits", 
                "properties": {
                  "quota:cpu_period": {
                    "description": "Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value.", 
                    "maximum": 1000000, 
                    "minimum": 1000, 
                    "title": "Quota: CPU Period", 
                    "type": "integer"
                  }, 
                  "quota:cpu_quota": {
                    "description": "Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.", 
                    "title": "Quota: CPU Quota", 
                    "type": "integer"
                  }, 
                  "quota:cpu_shares": {
                    "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                    "title": "Quota: CPU Shares", 
                    "type": "integer"
                  }
                }, 
                "required": [], 
                "schema": "/v2/schemas/metadefs/object", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/CPU Limits", 
                "updated_at": "2014-09-19T18:20:56Z"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createObject-v2_201"
            }
          }
        }, 
        "summary": "Creates an object definition in a namespace.", 
        "tags": [
          "metadefs-namespaces-objects-v2"
        ], 
        "x-title": "Create object"
      }
    }, 
    "/v2/metadefs/namespaces/{namespace_id}/objects/{object_name}": {
      "delete": {
        "consumes": [], 
        "description": "To delete a protected object from a namespace, you must first set\nthe ``protected`` attribute to false (boolean) on the namespace and\nthen perform the delete. If you try to delete a protected object,\nthe call returns the ``403`` response code.\n\nWhen you successfully delete an object from a namespace, the\nresponse is empty and the response code is ``204``.", 
        "operationId": "deleteObject-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of the object.", 
            "format": "", 
            "in": "path", 
            "name": "object_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes an object definition from a namespace.", 
        "tags": [
          "metadefs-namespaces-objects-v2"
        ], 
        "x-title": "Delete property definition"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body shows a single object entity.", 
        "operationId": "showObject-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of the object.", 
            "format": "", 
            "in": "path", 
            "name": "object_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T18:20:56Z", 
                "description": "You can configure the CPU limits with control parameters.", 
                "name": "CPU Limits", 
                "properties": {
                  "quota:cpu_period": {
                    "description": "Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value.", 
                    "maximum": 1000000, 
                    "minimum": 1000, 
                    "title": "Quota: CPU Period", 
                    "type": "integer"
                  }, 
                  "quota:cpu_quota": {
                    "description": "Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.", 
                    "title": "Quota: CPU Quota", 
                    "type": "integer"
                  }, 
                  "quota:cpu_shares": {
                    "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                    "title": "Quota: CPU Shares", 
                    "type": "integer"
                  }
                }, 
                "required": [], 
                "schema": "/v2/schemas/metadefs/object", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/CPU Limits", 
                "updated_at": "2014-09-19T18:20:56Z"
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows the definition for an object.", 
        "tags": [
          "metadefs-namespaces-objects-v2"
        ], 
        "x-title": "Show object definition"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateObject-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of the object.", 
            "format": "", 
            "in": "path", 
            "name": "object_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T19:20:56Z", 
                "description": "You can configure the CPU limits with control parameters.", 
                "name": "CPU Limits", 
                "properties": {
                  "quota:cpu_shares": {
                    "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                    "title": "Quota: CPU Shares", 
                    "type": "integer"
                  }
                }, 
                "required": [], 
                "schema": "/v2/schemas/metadefs/object", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/CPU Limits", 
                "updated_at": "2014-09-19T19:20:56Z"
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates an object definition in a namespace.", 
        "tags": [
          "metadefs-namespaces-objects-v2"
        ], 
        "x-title": "Update object definition"
      }
    }, 
    "/v2/metadefs/namespaces/{namespace_id}/properties": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listProperties-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "properties": {
                  "hw_disk_bus": {
                    "description": "Specifies the type of disk controller to attach disk devices to.", 
                    "enum": [
                      "scsi", 
                      "virtio", 
                      "uml", 
                      "xen", 
                      "ide", 
                      "usb"
                    ], 
                    "title": "Disk Bus", 
                    "type": "string"
                  }, 
                  "hw_machine_type": {
                    "description": "Enables booting an ARM system using the specified machine type. By default, if an ARM image is used and its type is not specified, Compute uses vexpress-a15 (for ARMv7) or virt (for AArch64) machine types. Valid types can be viewed by using the virsh capabilities command (machine types are displayed in the machine tag).", 
                    "title": "Machine Type", 
                    "type": "string"
                  }, 
                  "hw_qemu_guest_agent": {
                    "description": "It is a daemon program running inside the domain which is supposed to help management applications with executing functions which need assistance of the guest OS. For example, freezing and thawing filesystems, entering suspend. However, guest agent (GA) is not bullet proof, and hostile guest OS can send spurious replies.", 
                    "enum": [
                      "yes", 
                      "no"
                    ], 
                    "title": "QEMU Guest Agent", 
                    "type": "string"
                  }, 
                  "hw_rng_model": {
                    "default": "virtio", 
                    "description": "Adds a random-number generator device to the image's instances. The cloud administrator can enable and control device behavior by configuring the instance's flavor. By default: The generator device is disabled. /dev/random is used as the default entropy source. To specify a physical HW RNG device, use the following option in the nova.conf file: rng_dev_path=/dev/hwrng", 
                    "title": "Random Number Generator Device", 
                    "type": "string"
                  }, 
                  "hw_scsi_model": {
                    "default": "virtio-scsi", 
                    "description": "Enables the use of VirtIO SCSI (virtio-scsi) to provide block device access for compute instances; by default, instances use VirtIO Block (virtio-blk). VirtIO SCSI is a para-virtualized SCSI controller device that provides improved scalability and performance, and supports advanced SCSI hardware.", 
                    "title": "SCSI Model", 
                    "type": "string"
                  }, 
                  "hw_video_model": {
                    "description": "The video image driver used.", 
                    "enum": [
                      "vga", 
                      "cirrus", 
                      "vmvga", 
                      "xen", 
                      "qxl"
                    ], 
                    "title": "Video Model", 
                    "type": "string"
                  }, 
                  "hw_video_ram": {
                    "description": "Maximum RAM for the video image. Used only if a hw_video:ram_max_mb value has been set in the flavor's extra_specs and that value is higher than the value set in hw_video_ram.", 
                    "title": "Max Video Ram", 
                    "type": "integer"
                  }, 
                  "hw_vif_model": {
                    "description": "Specifies the model of virtual network interface device to use. The valid options depend on the configured hypervisor. KVM and QEMU: e1000, ne2k_pci, pcnet, rtl8139, and virtio. VMware: e1000, e1000e, VirtualE1000, VirtualE1000e, VirtualPCNet32, VirtualSriovEthernetCard, and VirtualVmxnet. Xen: e1000, netfront, ne2k_pci, pcnet, and rtl8139.", 
                    "enum": [
                      "e1000", 
                      "ne2k_pci", 
                      "pcnet", 
                      "rtl8139", 
                      "virtio", 
                      "e1000", 
                      "e1000e", 
                      "VirtualE1000", 
                      "VirtualE1000e", 
                      "VirtualPCNet32", 
                      "VirtualSriovEthernetCard", 
                      "VirtualVmxnet", 
                      "netfront", 
                      "ne2k_pci"
                    ], 
                    "title": "Virtual Network Interface", 
                    "type": "string"
                  }, 
                  "os_command_line": {
                    "description": "The kernel command line to be used by the libvirt driver, instead of the default. For linux containers (LXC), the value is used as arguments for initialization. This key is valid only for Amazon kernel, ramdisk, or machine images (aki, ari, or ami).", 
                    "title": "Kernel Command Line", 
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listProperties-v2_200"
            }
          }
        }, 
        "summary": "Lists property definitions in a namespace.", 
        "tags": [
          "metadefs-namespaces-properties-v2"
        ], 
        "x-title": "List property definitions"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The schema is a subset of the JSON property definition schema.", 
        "operationId": "createProperty-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createProperty-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
                "enum": [
                  "xen", 
                  "qemu", 
                  "kvm", 
                  "lxc", 
                  "uml", 
                  "vmware", 
                  "hyperv"
                ], 
                "name": "hypervisor_type", 
                "title": "Hypervisor Type", 
                "type": "string"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createProperty-v2_201"
            }
          }
        }, 
        "summary": "Creates a property definition in a namespace.", 
        "tags": [
          "metadefs-namespaces-properties-v2"
        ], 
        "x-title": "Create property"
      }
    }, 
    "/v2/metadefs/namespaces/{namespace_id}/properties/{property_name}": {
      "delete": {
        "consumes": [], 
        "description": "To remove a property, first make an update namespace request to set\nthe ``protected`` attribute to false (boolean) on the namespace.\nThen, remove the property. If the operation succeeds, the response\nreturns the HTTP 204 status code.\n\nIf you try to remove a property in a namespace with the\n``protected`` attribute set to true (boolean), the operation fails\nand the response returns the HTTP 403 error code.", 
        "operationId": "deleteProperty-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/deleteProperty-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of the property.", 
            "format": "", 
            "in": "path", 
            "name": "property_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a property definition in a namespace.", 
        "tags": [
          "metadefs-namespaces-properties-v2"
        ], 
        "x-title": "Remove property definition"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "If you use the ``resource_type`` query parameter, the API removes\nthe prefix of the resource type from the property name before it\nsubmits the query. This enables you to look for a property name\nthat starts with a prefix from an associated resource type.\n\nThe response body shows a single property entity.", 
        "operationId": "showProperty-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/showProperty-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of the property.", 
            "format": "", 
            "in": "path", 
            "name": "property_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by property names that start with a prefix\nfrom an associated resource type.\n\nThe API removes the prefix of the resource type from the property\nname in the response.", 
            "format": "", 
            "in": "query", 
            "name": "resource_type", 
            "required": false, 
            "type": "integer"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
                "enum": [
                  "xen", 
                  "qemu", 
                  "kvm", 
                  "lxc", 
                  "uml", 
                  "vmware", 
                  "hyperv"
                ], 
                "name": "hypervisor_type", 
                "title": "Hypervisor Type", 
                "type": "string"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showProperty-v2_200"
            }
          }
        }, 
        "summary": "Shows the definition for a property.", 
        "tags": [
          "metadefs-namespaces-properties-v2"
        ], 
        "x-title": "Show property definition"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateProperty-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateProperty-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of the property.", 
            "format": "", 
            "in": "path", 
            "name": "property_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
                "enum": [
                  "xen", 
                  "qemu", 
                  "kvm", 
                  "lxc", 
                  "uml", 
                  "vmware", 
                  "hyperv"
                ], 
                "name": "hypervisor_type", 
                "title": "Hypervisor Type", 
                "type": "string"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateProperty-v2_200"
            }
          }
        }, 
        "summary": "Updates a property definition.", 
        "tags": [
          "metadefs-namespaces-properties-v2"
        ], 
        "x-title": "Update property definition"
      }
    }, 
    "/v2/metadefs/namespaces/{namespace_id}/resource_types": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body lists resource type association entities.", 
        "operationId": "listResourceTypeAssocs-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "resource_types": [
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Glance::Image", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Cinder::Volume", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Flavor", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Aggregate", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Instance", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listResourceTypeAssocs-v2_200"
            }
          }
        }, 
        "summary": "Lists resource type associations in a namespace.", 
        "tags": [
          "metadef-resourcetype"
        ], 
        "x-title": "List resource type associations"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createResourceTypeAssoc-v2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createResourceTypeAssoc-v2"
            }
          }, 
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T16:09:13Z", 
                "name": "OS::Cinder::Volume", 
                "prefix": "hw_", 
                "properties_target": "image", 
                "updated_at": "2014-09-19T16:09:13Z"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createResourceTypeAssoc-v2_201"
            }
          }
        }, 
        "summary": "Creates a resource type association in a namespace.", 
        "tags": [
          "metadef-resourcetype"
        ], 
        "x-title": "Create resource type association"
      }
    }, 
    "/v2/metadefs/namespaces/{namespace_id}/resource_types/{name}": {
      "delete": {
        "consumes": [], 
        "description": "To remove an association, first make an update namespace request to\nset the ``protected`` attribute to false (boolean) on the\nnamespace. Then, remove the association. If the operation succeeds,\nthe response returns the HTTP 204 status code.\n\nIf you try to remove resource type associations in a namespace with\nthe ``protected`` attribute set to true (boolean), the operation\nfails and the response returns the HTTP 403 error code.", 
        "operationId": "deleteResourceTypeAssoc-v2", 
        "parameters": [
          {
            "description": "The UUID of the namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Name of the resource type.", 
            "format": "", 
            "in": "path", 
            "name": "name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a resource type association in a namespace.", 
        "tags": [
          "metadef-resourcetype"
        ], 
        "x-title": "Remove resource type association"
      }
    }, 
    "/v2/metadefs/resource_types": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "You can assign metadata definition namespaces to these resource\ntypes. See the metadata definition resource types section.", 
        "operationId": "listResourceTypes-v2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "resource_types": [
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Glance::Image", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Cinder::Volume", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Flavor", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Aggregate", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Instance", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listResourceTypes-v2_200"
            }
          }
        }, 
        "summary": "Lists all resource types.", 
        "tags": [
          "metadef-resourcetype"
        ], 
        "x-title": "List resource types"
      }
    }, 
    "/v2/schemas/image": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema is solely an example. Consider only the\nresponse to the API call as authoritative.", 
        "operationId": "showImageSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "additionalProperties": {
                  "type": "string"
                }, 
                "links": [
                  {
                    "href": "{self}", 
                    "rel": "self"
                  }, 
                  {
                    "href": "{file}", 
                    "rel": "enclosure"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "image", 
                "properties": {
                  "architecture": {
                    "description": "Operating system architecture as specified in http://docs.openstack.org/trunk/openstack-compute/admin/content/adding-images.html", 
                    "is_base": false, 
                    "type": "string"
                  }, 
                  "checksum": {
                    "description": "md5 hash of image contents. (READ-ONLY)", 
                    "maxLength": 32, 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "container_format": {
                    "description": "Format of the container", 
                    "enum": [
                      null, 
                      "ami", 
                      "ari", 
                      "aki", 
                      "bare", 
                      "ovf", 
                      "ova"
                    ], 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "created_at": {
                    "description": "Date and time of image registration (READ-ONLY)", 
                    "type": "string"
                  }, 
                  "direct_url": {
                    "description": "URL to access the image file kept in external store (READ-ONLY)", 
                    "type": "string"
                  }, 
                  "disk_format": {
                    "description": "Format of the disk", 
                    "enum": [
                      null, 
                      "ami", 
                      "ari", 
                      "aki", 
                      "vhd", 
                      "vmdk", 
                      "raw", 
                      "qcow2", 
                      "vdi", 
                      "iso"
                    ], 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "file": {
                    "description": "(READ-ONLY)", 
                    "type": "string"
                  }, 
                  "id": {
                    "description": "An identifier for the image", 
                    "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                    "type": "string"
                  }, 
                  "instance_uuid": {
                    "description": "ID of instance used to create this image.", 
                    "is_base": false, 
                    "type": "string"
                  }, 
                  "kernel_id": {
                    "description": "ID of image stored in Glance that should be used as the kernel when booting an AMI-style image.", 
                    "is_base": false, 
                    "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                    "type": "string"
                  }, 
                  "locations": {
                    "description": "A set of URLs to access the image file kept in external store", 
                    "items": {
                      "properties": {
                        "metadata": {
                          "type": "object"
                        }, 
                        "url": {
                          "maxLength": 255, 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "url", 
                        "metadata"
                      ], 
                      "type": "object"
                    }, 
                    "type": "array"
                  }, 
                  "min_disk": {
                    "description": "Amount of disk space (in GB) required to boot image.", 
                    "type": "integer"
                  }, 
                  "min_ram": {
                    "description": "Amount of ram (in MB) required to boot image.", 
                    "type": "integer"
                  }, 
                  "name": {
                    "description": "Descriptive name for the image", 
                    "maxLength": 255, 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "os_distro": {
                    "description": "Common name of operating system distribution as specified in http://docs.openstack.org/trunk/openstack-compute/admin/content/adding-images.html", 
                    "is_base": false, 
                    "type": "string"
                  }, 
                  "os_version": {
                    "description": "Operating system version as specified by the distributor", 
                    "is_base": false, 
                    "type": "string"
                  }, 
                  "owner": {
                    "description": "Owner of the image", 
                    "maxLength": 255, 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "protected": {
                    "description": "If true, image will not be deletable.", 
                    "type": "boolean"
                  }, 
                  "ramdisk_id": {
                    "description": "ID of image stored in Glance that should be used as the ramdisk when booting an AMI-style image.", 
                    "is_base": false, 
                    "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                    "type": "string"
                  }, 
                  "schema": {
                    "description": "(READ-ONLY)", 
                    "type": "string"
                  }, 
                  "self": {
                    "description": "(READ-ONLY)", 
                    "type": "string"
                  }, 
                  "size": {
                    "description": "Size of image file in bytes (READ-ONLY)", 
                    "type": [
                      "null", 
                      "integer"
                    ]
                  }, 
                  "status": {
                    "description": "Status of the image (READ-ONLY)", 
                    "enum": [
                      "queued", 
                      "saving", 
                      "active", 
                      "killed", 
                      "deleted", 
                      "pending_delete"
                    ], 
                    "type": "string"
                  }, 
                  "tags": {
                    "description": "List of strings related to the image", 
                    "items": {
                      "maxLength": 255, 
                      "type": "string"
                    }, 
                    "type": "array"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last image modification (READ-ONLY)", 
                    "type": "string"
                  }, 
                  "virtual_size": {
                    "description": "Virtual size of image in bytes (READ-ONLY)", 
                    "type": [
                      "null", 
                      "integer"
                    ]
                  }, 
                  "visibility": {
                    "description": "Scope of image accessibility", 
                    "enum": [
                      "public", 
                      "private"
                    ], 
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Images v2.0) Shows a JSON schema document that represents an image entity.", 
        "tags": [
          "image-schemas"
        ], 
        "x-title": "Show image schema"
      }
    }, 
    "/v2/schemas/images": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "An images entity is a container of image entities.\n\nThe following schema is solely an example. Consider only the\nresponse to the API call as authoritative.", 
        "operationId": "showImagesSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "images", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "images": {
                    "items": {
                      "additionalProperties": {
                        "type": "string"
                      }, 
                      "links": [
                        {
                          "href": "{self}", 
                          "rel": "self"
                        }, 
                        {
                          "href": "{file}", 
                          "rel": "enclosure"
                        }, 
                        {
                          "href": "{schema}", 
                          "rel": "describedby"
                        }
                      ], 
                      "name": "image", 
                      "properties": {
                        "architecture": {
                          "description": "Operating system architecture as specified in http://docs.openstack.org/trunk/openstack-compute/admin/content/adding-images.html", 
                          "is_base": false, 
                          "type": "string"
                        }, 
                        "checksum": {
                          "description": "md5 hash of image contents. (READ-ONLY)", 
                          "maxLength": 32, 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "container_format": {
                          "description": "Format of the container", 
                          "enum": [
                            null, 
                            "ami", 
                            "ari", 
                            "aki", 
                            "bare", 
                            "ovf", 
                            "ova"
                          ], 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "created_at": {
                          "description": "Date and time of image registration (READ-ONLY)", 
                          "type": "string"
                        }, 
                        "direct_url": {
                          "description": "URL to access the image file kept in external store (READ-ONLY)", 
                          "type": "string"
                        }, 
                        "disk_format": {
                          "description": "Format of the disk", 
                          "enum": [
                            null, 
                            "ami", 
                            "ari", 
                            "aki", 
                            "vhd", 
                            "vmdk", 
                            "raw", 
                            "qcow2", 
                            "vdi", 
                            "iso"
                          ], 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "file": {
                          "description": "(READ-ONLY)", 
                          "type": "string"
                        }, 
                        "id": {
                          "description": "An identifier for the image", 
                          "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                          "type": "string"
                        }, 
                        "instance_uuid": {
                          "description": "ID of instance used to create this image.", 
                          "is_base": false, 
                          "type": "string"
                        }, 
                        "kernel_id": {
                          "description": "ID of image stored in Glance that should be used as the kernel when booting an AMI-style image.", 
                          "is_base": false, 
                          "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                          "type": "string"
                        }, 
                        "locations": {
                          "description": "A set of URLs to access the image file kept in external store", 
                          "items": {
                            "properties": {
                              "metadata": {
                                "type": "object"
                              }, 
                              "url": {
                                "maxLength": 255, 
                                "type": "string"
                              }
                            }, 
                            "required": [
                              "url", 
                              "metadata"
                            ], 
                            "type": "object"
                          }, 
                          "type": "array"
                        }, 
                        "min_disk": {
                          "description": "Amount of disk space (in GB) required to boot image.", 
                          "type": "integer"
                        }, 
                        "min_ram": {
                          "description": "Amount of ram (in MB) required to boot image.", 
                          "type": "integer"
                        }, 
                        "name": {
                          "description": "Descriptive name for the image", 
                          "maxLength": 255, 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "os_distro": {
                          "description": "Common name of operating system distribution as specified in http://docs.openstack.org/trunk/openstack-compute/admin/content/adding-images.html", 
                          "is_base": false, 
                          "type": "string"
                        }, 
                        "os_version": {
                          "description": "Operating system version as specified by the distributor", 
                          "is_base": false, 
                          "type": "string"
                        }, 
                        "owner": {
                          "description": "Owner of the image", 
                          "maxLength": 255, 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "protected": {
                          "description": "If true, image will not be deletable.", 
                          "type": "boolean"
                        }, 
                        "ramdisk_id": {
                          "description": "ID of image stored in Glance that should be used as the ramdisk when booting an AMI-style image.", 
                          "is_base": false, 
                          "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                          "type": "string"
                        }, 
                        "schema": {
                          "description": "(READ-ONLY)", 
                          "type": "string"
                        }, 
                        "self": {
                          "description": "(READ-ONLY)", 
                          "type": "string"
                        }, 
                        "size": {
                          "description": "Size of image file in bytes (READ-ONLY)", 
                          "type": [
                            "null", 
                            "integer"
                          ]
                        }, 
                        "status": {
                          "description": "Status of the image (READ-ONLY)", 
                          "enum": [
                            "queued", 
                            "saving", 
                            "active", 
                            "killed", 
                            "deleted", 
                            "pending_delete"
                          ], 
                          "type": "string"
                        }, 
                        "tags": {
                          "description": "List of strings related to the image", 
                          "items": {
                            "maxLength": 255, 
                            "type": "string"
                          }, 
                          "type": "array"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last image modification (READ-ONLY)", 
                          "type": "string"
                        }, 
                        "virtual_size": {
                          "description": "Virtual size of image in bytes (READ-ONLY)", 
                          "type": [
                            "null", 
                            "integer"
                          ]
                        }, 
                        "visibility": {
                          "description": "Scope of image accessibility", 
                          "enum": [
                            "public", 
                            "private"
                          ], 
                          "type": "string"
                        }
                      }
                    }, 
                    "type": "array"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Images v2.0) Shows a JSON schema document that represents an images entity.", 
        "tags": [
          "image-schemas"
        ], 
        "x-title": "Show images schema"
      }
    }, 
    "/v2/schemas/member": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema is solely an example. Consider only the\nresponse to the API call as authoritative.", 
        "operationId": "showImageMemberSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "name": "member", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of image member creation", 
                    "type": "string"
                  }, 
                  "image_id": {
                    "description": "An identifier for the image", 
                    "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                    "type": "string"
                  }, 
                  "member_id": {
                    "description": "An identifier for the image member (tenantId)", 
                    "type": "string"
                  }, 
                  "schema": {
                    "type": "string"
                  }, 
                  "status": {
                    "description": "The status of this image member", 
                    "enum": [
                      "pending", 
                      "accepted", 
                      "rejected"
                    ], 
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of last modification of image member", 
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Images v2.1) Shows a JSON schema document that represents an image member entity.", 
        "tags": [
          "image-schemas"
        ], 
        "x-title": "Show image member schema"
      }
    }, 
    "/v2/schemas/members": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "An image members entity is a container of image member entities.\n\nThe following schema is solely an example. Consider only the\nresponse to the API call as authoritative.", 
        "operationId": "showImageMembersSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "members", 
                "properties": {
                  "members": {
                    "items": {
                      "name": "member", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of image member creation", 
                          "type": "string"
                        }, 
                        "image_id": {
                          "description": "An identifier for the image", 
                          "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                          "type": "string"
                        }, 
                        "member_id": {
                          "description": "An identifier for the image member (tenantId)", 
                          "type": "string"
                        }, 
                        "schema": {
                          "type": "string"
                        }, 
                        "status": {
                          "description": "The status of this image member", 
                          "enum": [
                            "pending", 
                            "accepted", 
                            "rejected"
                          ], 
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of last modification of image member", 
                          "type": "string"
                        }
                      }
                    }, 
                    "type": "array"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since Images v2.1) Shows a JSON schema document that represents an image members entity.", 
        "tags": [
          "image-schemas"
        ], 
        "x-title": "Show image members schema"
      }
    }, 
    "/v2/schemas/metadefs/namespace": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefNamespaceSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "property": {
                    "additionalProperties": {
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "title", 
                        "type"
                      ], 
                      "type": "object"
                    }, 
                    "type": "object"
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "name": "namespace", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of namespace creation (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "description": {
                    "description": "Provides a user friendly description of the namespace.", 
                    "maxLength": 500, 
                    "type": "string"
                  }, 
                  "display_name": {
                    "description": "The user friendly name for the namespace. Used by UI if available.", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "namespace": {
                    "description": "The unique namespace text.", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "objects": {
                    "items": {
                      "properties": {
                        "description": {
                          "type": "string"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "properties": {
                          "$ref": "#/definitions/property"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }
                      }, 
                      "type": "object"
                    }, 
                    "type": "array"
                  }, 
                  "owner": {
                    "description": "Owner of the namespace.", 
                    "maxLength": 255, 
                    "type": "string"
                  }, 
                  "properties": {
                    "$ref": "#/definitions/property"
                  }, 
                  "protected": {
                    "description": "If true, namespace will not be deletable.", 
                    "type": "boolean"
                  }, 
                  "resource_type_associations": {
                    "items": {
                      "properties": {
                        "name": {
                          "type": "string"
                        }, 
                        "prefix": {
                          "type": "string"
                        }, 
                        "properties_target": {
                          "type": "string"
                        }
                      }, 
                      "type": "object"
                    }, 
                    "type": "array"
                  }, 
                  "schema": {
                    "type": "string"
                  }, 
                  "self": {
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last namespace modification (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "visibility": {
                    "description": "Scope of namespace accessibility.", 
                    "enum": [
                      "public", 
                      "private"
                    ], 
                    "type": "string"
                  }
                }, 
                "required": [
                  "namespace"
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition namespace entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition namespace schema"
      }
    }, 
    "/v2/schemas/metadefs/namespaces": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "A namespaces entity is a container for namespace entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefNamespacesSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "property": {
                    "additionalProperties": {
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "title", 
                        "type"
                      ], 
                      "type": "object"
                    }, 
                    "type": "object"
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "namespaces", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "namespaces": {
                    "items": {
                      "additionalProperties": false, 
                      "name": "namespace", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of namespace creation (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "description": {
                          "description": "Provides a user friendly description of the namespace.", 
                          "maxLength": 500, 
                          "type": "string"
                        }, 
                        "display_name": {
                          "description": "The user friendly name for the namespace. Used by UI if available.", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "namespace": {
                          "description": "The unique namespace text.", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "objects": {
                          "items": {
                            "properties": {
                              "description": {
                                "type": "string"
                              }, 
                              "name": {
                                "type": "string"
                              }, 
                              "properties": {
                                "$ref": "#/definitions/property"
                              }, 
                              "required": {
                                "$ref": "#/definitions/stringArray"
                              }
                            }, 
                            "type": "object"
                          }, 
                          "type": "array"
                        }, 
                        "owner": {
                          "description": "Owner of the namespace.", 
                          "maxLength": 255, 
                          "type": "string"
                        }, 
                        "properties": {
                          "$ref": "#/definitions/property"
                        }, 
                        "protected": {
                          "description": "If true, namespace will not be deletable.", 
                          "type": "boolean"
                        }, 
                        "resource_type_associations": {
                          "items": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }, 
                              "prefix": {
                                "type": "string"
                              }, 
                              "properties_target": {
                                "type": "string"
                              }
                            }, 
                            "type": "object"
                          }, 
                          "type": "array"
                        }, 
                        "schema": {
                          "type": "string"
                        }, 
                        "self": {
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last namespace modification (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "visibility": {
                          "description": "Scope of namespace accessibility.", 
                          "enum": [
                            "public", 
                            "private"
                          ], 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "namespace"
                      ]
                    }, 
                    "type": "array"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition namespaces entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition namespaces schema"
      }
    }, 
    "/v2/schemas/metadefs/object": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefObjectSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "property": {
                    "additionalProperties": {
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "title", 
                        "type"
                      ], 
                      "type": "object"
                    }, 
                    "type": "object"
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "name": "object", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of object creation (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "description": {
                    "type": "string"
                  }, 
                  "name": {
                    "type": "string"
                  }, 
                  "properties": {
                    "$ref": "#/definitions/property"
                  }, 
                  "required": {
                    "$ref": "#/definitions/stringArray"
                  }, 
                  "schema": {
                    "type": "string"
                  }, 
                  "self": {
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last object modification (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }
                }, 
                "required": [
                  "name"
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition object entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition object schema"
      }
    }, 
    "/v2/schemas/metadefs/objects": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "An objects entity is a container for object entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefObjectsSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "property": {
                    "additionalProperties": {
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "title", 
                        "type"
                      ], 
                      "type": "object"
                    }, 
                    "type": "object"
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "objects", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "objects": {
                    "items": {
                      "additionalProperties": false, 
                      "name": "object", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of object creation (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "description": {
                          "type": "string"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "properties": {
                          "$ref": "#/definitions/property"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "schema": {
                          "type": "string"
                        }, 
                        "self": {
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last object modification (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "name"
                      ]
                    }, 
                    "type": "array"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition objects entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition objects schema"
      }
    }, 
    "/v2/schemas/metadefs/properties": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "A properties entity is a container for property entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefPropertiesSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "minItems": 1, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "properties", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "properties": {
                    "additionalProperties": {
                      "additionalProperties": false, 
                      "name": "property", 
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "type", 
                        "title"
                      ]
                    }, 
                    "type": "object"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition properties entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition properties schema"
      }
    }, 
    "/v2/schemas/metadefs/property": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefPropertySchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "minItems": 1, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "name": "property", 
                "properties": {
                  "additionalItems": {
                    "type": "boolean"
                  }, 
                  "default": {}, 
                  "description": {
                    "type": "string"
                  }, 
                  "enum": {
                    "type": "array"
                  }, 
                  "items": {
                    "properties": {
                      "enum": {
                        "type": "array"
                      }, 
                      "type": {
                        "enum": [
                          "array", 
                          "boolean", 
                          "integer", 
                          "number", 
                          "object", 
                          "string", 
                          null
                        ], 
                        "type": "string"
                      }
                    }, 
                    "type": "object"
                  }, 
                  "maxItems": {
                    "$ref": "#/definitions/positiveInteger"
                  }, 
                  "maxLength": {
                    "$ref": "#/definitions/positiveInteger"
                  }, 
                  "maximum": {
                    "type": "number"
                  }, 
                  "minItems": {
                    "$ref": "#/definitions/positiveIntegerDefault0"
                  }, 
                  "minLength": {
                    "$ref": "#/definitions/positiveIntegerDefault0"
                  }, 
                  "minimum": {
                    "type": "number"
                  }, 
                  "name": {
                    "type": "string"
                  }, 
                  "pattern": {
                    "format": "regex", 
                    "type": "string"
                  }, 
                  "readonly": {
                    "type": "boolean"
                  }, 
                  "required": {
                    "$ref": "#/definitions/stringArray"
                  }, 
                  "title": {
                    "type": "string"
                  }, 
                  "type": {
                    "enum": [
                      "array", 
                      "boolean", 
                      "integer", 
                      "number", 
                      "object", 
                      "string", 
                      null
                    ], 
                    "type": "string"
                  }, 
                  "uniqueItems": {
                    "default": false, 
                    "type": "boolean"
                  }
                }, 
                "required": [
                  "type", 
                  "title", 
                  "name"
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition property entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition property schema"
      }
    }, 
    "/v2/schemas/metadefs/resource_type": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefResTypeAssocSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "name": "resource_type_association", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of resource type association (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "name": {
                    "description": "Resource type names should be aligned with Heat resource types whenever possible: http://docs.openstack.org/developer/heat/template_guide/openstack.html", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "prefix": {
                    "description": "Specifies the prefix to use for the given resource type. Any properties in the namespace should be prefixed with this prefix when being applied to the specified resource type. Must include prefix separator (e.g. a colon :). It is important to note that the same base property key can require different prefixes depending on the target resource type. For example: The desired virtual CPU topology can be set on both images and flavors via metadata. The keys have different prefixes on images than on flavors On flavors keys are prefixed with 'hw:', but on images the keys are prefixed with 'hw_'.", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "properties_target": {
                    "description": "Some resource types allow more than one key / value pair per instance.  For example, Cinder allows user and image metadata on volumes. Only the image properties metadata is evaluated by Nova (scheduling or drivers). This property allows a namespace target to remove the ambiguity.", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last resource type association modification (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }
                }, 
                "required": [
                  "name"
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition namespace resource type association entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition namespace resource type association schema"
      }
    }, 
    "/v2/schemas/metadefs/resource_types": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "A resource type associations entity is a container for resource\ntype association entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefResTypeAssocsSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "resource_type_associations", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "resource_type_associations": {
                    "items": {
                      "additionalProperties": false, 
                      "name": "resource_type_association", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of resource type association (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "name": {
                          "description": "Resource type names should be aligned with Heat resource types whenever possible: http://docs.openstack.org/developer/heat/template_guide/openstack.html", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "prefix": {
                          "description": "Specifies the prefix to use for the given resource type. Any properties in the namespace should be prefixed with this prefix when being applied to the specified resource type. Must include prefix separator (e.g. a colon :). It is important to note that the same base property key can require different prefixes depending on the target resource type. For example: The desired virtual CPU topology can be set on both images and flavors via metadata. The keys have different prefixes on images than on flavors On flavors keys are prefixed with 'hw:', but on images the keys are prefixed with 'hw_'.", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "properties_target": {
                          "description": "Some resource types allow more than one key / value pair per instance.  For example, Cinder allows user and image metadata on volumes. Only the image properties metadata is evaluated by Nova (scheduling or drivers). This property allows a namespace target to remove the ambiguity.", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last resource type association modification (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "name"
                      ]
                    }, 
                    "type": "array"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition namespace resource type associations entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition namespace resource type associations schema"
      }
    }, 
    "/v2/schemas/metadefs/tag": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefTagSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "name": "tag", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of tag creation (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "name": {
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last tag modification (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }
                }, 
                "required": [
                  "name"
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition tag entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition tag schema"
      }
    }, 
    "/v2/schemas/metadefs/tags": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "A tags entity is a container for tag entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "operationId": "showMetadefTagsSchema", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "tags", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "schema": {
                    "type": "string"
                  }, 
                  "tags": {
                    "items": {
                      "additionalProperties": false, 
                      "name": "tag", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of tag creation (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last tag modification (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "name"
                      ]
                    }, 
                    "type": "array"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "(Since API v2.1) Shows a JSON schema document that represents a metadata definition tags entity.", 
        "tags": [
          "schemas-metadefs-v2"
        ], 
        "x-title": "Show metadata definition tags schema"
      }
    }, 
    "/v2/tasks": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listTasks-v2", 
        "parameters": [
          {
            "description": "Sorts the response by a set of one or more sort direction and\nattribute (``sort_key``) combinations. A valid value for the sort\ndirection is ``asc`` (ascending) or ``desc`` (descending). If you\nomit the sort direction in a set, the default is ``desc``.", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the response by an attribute, such as ``name``, ``id``, or\n``updated_at``. Default is ``created_at``. The API uses the natural\nsorting direction of the ``sort_key`` image attribute.", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a task type. A valid value is ``import``.", 
            "format": "", 
            "in": "query", 
            "name": "type", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a task status. A valid value is\n``pending``, ``processing``, ``success``, or ``failure``.", 
            "format": "", 
            "in": "query", 
            "name": "status", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "tasks": [
                  {
                    "id": "cbc36478b0bd8e67e89469c7749d4127", 
                    "status": "pending", 
                    "type": "import"
                  }, 
                  {
                    "id": "bbc36578b0bd8e67e89469c7749d4126", 
                    "status": "processing", 
                    "type": "import"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listTasks-v2_200"
            }
          }
        }, 
        "summary": "Lists tasks.", 
        "tags": [
          "os-tasks-v2"
        ], 
        "x-title": "List tasks"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createTask-v2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "id": "e7e59ff6-fa2e-4075-87d3-1a1398a07dc3", 
                "status": "pending", 
                "type": "import"
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a task.", 
        "tags": [
          "os-tasks-v2"
        ], 
        "x-title": "Create task"
      }
    }, 
    "/v2/tasks/{task_id}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showTask-v2", 
        "parameters": [
          {
            "description": "The UUID of the task.", 
            "format": "", 
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "id": "e7e59ff6-fa2e-4075-87d3-1a1398a07dc3", 
                "status": "pending", 
                "type": "import"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showTask-v2_200"
            }
          }
        }, 
        "summary": "Shows details for a task.", 
        "tags": [
          "os-tasks-v2"
        ], 
        "x-title": "Show task details"
      }
    }
  }, 
  "produces": [
    "application/json"
  ], 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "API versions", 
      "name": "versions-images", 
      "x-summary": ""
    }, 
    {
      "description": "Images (images)", 
      "name": "images-images-v2", 
      "x-summary": "Creates, lists, updates, and deletes images.\n\nImage operations show all fields in the response body. Any field\nwith no value is set to ``null`` value (JSON null data type).\n\nThe possible status values for images are:\n\n**Image status**\n\n+----------------+---------------------------------------------------------------------+\n| Status         | Description                                                         |\n+----------------+---------------------------------------------------------------------+\n| queued         | The Image service reserved an image ID for the image in the         |\n|                | registry but did not yet upload any image data.                     |\n+----------------+---------------------------------------------------------------------+\n| saving         | The Image service is currently uploading the raw data for the       |\n|                | image.                                                              |\n+----------------+---------------------------------------------------------------------+\n| active         | The image is active and fully available in the Image service.       |\n+----------------+---------------------------------------------------------------------+\n| killed         | An image data upload error occurred.                                |\n+----------------+---------------------------------------------------------------------+\n| deleted        | The Image service retains information about the image but the image |\n|                | is no longer available for use.                                     |\n+----------------+---------------------------------------------------------------------+\n| pending_delete | Similar to the ``deleted`` status. An image in this state is not    |\n|                | recoverable.                                                        |\n+----------------+---------------------------------------------------------------------+"
    }, 
    {
      "description": "Image data (images, file)", 
      "name": "image-data", 
      "x-summary": "Uploads and downloads raw image data."
    }, 
    {
      "description": "Image tags (images, tags)", 
      "name": "image-tags", 
      "x-summary": "Adds and deletes image tags."
    }, 
    {
      "description": "Members (images, members)", 
      "name": "members", 
      "x-summary": "Creates, lists, updates, and deletes image members."
    }, 
    {
      "description": "Image schemas (schemas, image, images, member, members)", 
      "name": "image-schemas", 
      "x-summary": "Gets a JSON-schema document that represents an images or image\nentity."
    }, 
    {
      "description": "Metadata definition resource types (since API v2.0) (metadefs, namespaces, resource_types)", 
      "name": "metadef-resourcetype", 
      "x-summary": "Lists resource types. Also, creates, lists, and removes resource\ntype associations in a namespace."
    }, 
    {
      "description": "Metadata definition namespaces (since API v2.0) (metadefs, namespaces)", 
      "name": "metadefs-namespaces-v2", 
      "x-summary": "Creates, lists, shows details for, updates, and deletes metadata\ndefinition namespaces. Defines namespaces that can contain property\ndefinitions, object definitions, and resource type associations."
    }, 
    {
      "description": "Metadata definition properties (since API v2.0) (metadefs, namespaces, properties)", 
      "name": "metadefs-namespaces-properties-v2", 
      "x-summary": "Creates, lists, shows details for, updates, and deletes metadata\ndefinition properties."
    }, 
    {
      "description": "Metadata definition objects (since API v2.0) (metadefs, namespaces, objects)", 
      "name": "metadefs-namespaces-objects-v2", 
      "x-summary": "Creates, lists, shows details for, updates, and deletes metadata\ndefinition objects."
    }, 
    {
      "description": "Metadata definition tags (since API v2.0) (metadefs, namespaces, tags)", 
      "name": "metadefs-namespaces-tags-v2", 
      "x-summary": "Creates, lists, shows details for, updates, and deletes metadata\ndefinition tags."
    }, 
    {
      "description": "Metadata definition schemas (schemas, metadefs, namespace, namespaces, object, objects, property, properties, tag, tags, resource_type, resource_types)", 
      "name": "schemas-metadefs-v2", 
      "x-summary": "Gets a JSON-schema document that represents a metadata definition\nentity."
    }, 
    {
      "description": "Tasks (since API v2.2) (tasks)", 
      "name": "os-tasks-v2", 
      "x-summary": "Creates, lists, and shows details for tasks."
    }
  ]
}