{
  "basePath": "/", 
  "consumes": [
    "application/json"
  ], 
  "definitions": {
    "ListNetworkIpAvailability_200": {
      "properties": {
        "cidr": {
          "description": "The CIDR of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP version (4 or 6) of the subnet.", 
          "format": "", 
          "type": "integer"
        }, 
        "network_id": {
          "description": "The UUID of network.", 
          "format": "", 
          "type": "string"
        }, 
        "network_ip_availabilities": {
          "description": "A list of ``network_ip_availability`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "network_name": {
          "description": "The name of network.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_ip_availability": {
          "description": "This is dictionary showing subnet IP availability. It contains\ninformation for every subnet associated to each network as\ndescribed in the parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "subnet_name": {
          "description": "The name of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of tenant or project.", 
          "format": "", 
          "type": "string"
        }, 
        "total_ips": {
          "description": "The total number of IP addresses in a network.", 
          "format": "", 
          "type": "integer"
        }, 
        "used_ips": {
          "description": "The number of used IP addresses of all subnets in a network.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "network_ip_availabilities", 
        "network_id", 
        "network_name", 
        "subnet_ip_availability", 
        "cidr", 
        "ip_version", 
        "subnet_name", 
        "subnet_id", 
        "total_ips", 
        "used_ips", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "ShowNetworkIpAvailability_200": {
      "properties": {
        "cidr": {
          "description": "The CIDR of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP version (4 or 6) of the subnet.", 
          "format": "", 
          "type": "integer"
        }, 
        "network_id": {
          "description": "The UUID of network.", 
          "format": "", 
          "type": "string"
        }, 
        "network_ip_availability": {
          "description": "A ``network_ip_availability`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "network_name": {
          "description": "The name of network.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_ip_availability": {
          "description": "This is dictionary showing subnet IP availability. It contains\ninformation for every subnet associated to each network as\ndescribed in the parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "subnet_name": {
          "description": "The name of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of tenant or project.", 
          "format": "", 
          "type": "string"
        }, 
        "total_ips": {
          "description": "The total number of IP addresses in a network.", 
          "format": "", 
          "type": "integer"
        }, 
        "used_ips": {
          "description": "The number of used IP addresses of all subnets in a network.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "network_ip_availability", 
        "network_id", 
        "network_name", 
        "subnet_ip_availability", 
        "cidr", 
        "ip_version", 
        "subnet_name", 
        "subnet_id", 
        "total_ips", 
        "used_ips", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "addRouterInterface": {
      "example": {
        "application/json": {
          "subnet_id": "a2f1f29d-571b-4533-907f-5803ab96ead1"
        }
      }, 
      "properties": {
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnet_id", 
        "port_id"
      ], 
      "type": "object"
    }, 
    "addRouterInterface_200": {
      "properties": {
        "id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnet_id", 
        "tenant_id", 
        "port_id", 
        "id"
      ], 
      "type": "object"
    }, 
    "associateFlavor": {
      "example": {
        "application/json": {
          "service_profile": {
            "id": "4e5b9191-ffbe-4f7a-b112-2db98232fd32"
          }
        }
      }, 
      "properties": {
        "id": {
          "description": "The UUID of the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profile": {
          "description": "A ``service_profile`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "service_profile", 
        "id"
      ], 
      "type": "object"
    }, 
    "associateFlavor_201": {
      "properties": {
        "id": {
          "description": "The UUID of the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profile": {
          "description": "A ``service_profile`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "service_profile", 
        "id"
      ], 
      "type": "object"
    }, 
    "associateHealthMonitor": {
      "example": {
        "application/json": {
          "health_monitor": {
            "id": "b624decf-d5d3-4c66-9a3d-f047e7786181"
          }
        }
      }, 
      "properties": {
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "id"
      ], 
      "type": "object"
    }, 
    "associateHealthMonitor_201": {
      "properties": {
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "health_monitor"
      ], 
      "type": "object"
    }, 
    "createBandwidthLimitRule": {
      "example": {
        "application/json": {
          "bandwidth_limit_rule": {
            "max_kbps": "10000"
          }
        }
      }, 
      "properties": {
        "bandwidth_limit_rule": {
          "description": "A ``bandwidth_limit_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "max_burst_kbps": {
          "description": "The burst over the maximum KBPS value. Default is ``0``", 
          "format": "", 
          "type": "integer"
        }, 
        "max_kbps": {
          "description": "The maximum KBPS value. If you specify this value, must be greater\nthan 0. Default is ``null``.", 
          "format": "", 
          "type": "integer"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "bandwidth_limit_rule"
      ], 
      "type": "object"
    }, 
    "createBandwidthLimitRule_201": {
      "properties": {
        "bandwidth_limit_rule": {
          "description": "A ``bandwidth_limit_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "max_burst_kbps": {
          "description": "The burst over the maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_kbps": {
          "description": "The maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "bandwidth_limit_rule", 
        "id", 
        "policy_id", 
        "max_kbps", 
        "max_burst_kbps"
      ], 
      "type": "object"
    }, 
    "createDscpMarkingRule": {
      "example": {
        "application/json": {
          "dscp_marking_rule": {
            "dscp_mark": "26"
          }
        }
      }, 
      "properties": {
        "dscp_mark": {
          "description": "The DSCP mark value.", 
          "format": "", 
          "type": "integer"
        }, 
        "dscp_marking_rule": {
          "description": "A ``dscp_marking_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "dscp_marking_rule"
      ], 
      "type": "object"
    }, 
    "createDscpMarkingRule_201": {
      "properties": {
        "dscp_mark": {
          "description": "The DSCP mark value.", 
          "format": "", 
          "type": "integer"
        }, 
        "dscp_marking_rule": {
          "description": "A ``dscp_marking_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "dscp_marking_rule", 
        "id", 
        "policy_id", 
        "dscp_mark"
      ], 
      "type": "object"
    }, 
    "createFirewall": {
      "example": {
        "application/json": {
          "firewall": {
            "admin_state_up": true, 
            "firewall_policy_id": "c69933c1-b472-44f9-8226-30dc4ffd454c"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the firewall, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall": {
          "description": "A ``firewall`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_policy_id": {
          "description": "The UUID of the policy that is associated with the firewall.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The human-readable name for the firewall service. Does not have to\nbe unique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_ids": {
          "description": "A list of UUIDs for routers that are associated with the firewall.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "firewall", 
        "firewall_policy_id"
      ], 
      "type": "object"
    }, 
    "createFirewallPolicy": {
      "example": {
        "application/json": {
          "firewall_policy": {
            "firewall_rules": [
              "8722e0e0-9cc9-4490-9660-8c9a5732fbb0"
            ], 
            "name": "test-policy"
          }
        }
      }, 
      "properties": {
        "audited": {
          "description": "Each time that the firewall policy or its associated rules are\nchanged, the API sets this attribute to ``false``. To audit the\npolicy, explicitly set this attribute to ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_policy": {
          "description": "A ``firewall_policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_rules_id": {
          "description": "A list of rules to associate with the firewall policy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "Human-readable name for the firewall policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Set to ``true`` to make this firewall policy visible to other\ntenants. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The owner of the firewall policy. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_policy"
      ], 
      "type": "object"
    }, 
    "createFirewallPolicy_201": {
      "properties": {
        "audited": {
          "description": "Indicates whether the policy has been audited.\n\nEach time that the firewall policy or its associated rules are\nchanged, the API sets this attribute to ``false``. To audit the\npolicy, the policy owner must explicitly update the policy to set\nthis attribute to ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_policy": {
          "description": "A ``firewall_policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_rules": {
          "description": "A list of the UUIDs for firewall rule associated with the firewall\npolicy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether the firewall policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_policy", 
        "audited", 
        "description", 
        "firewall_rules", 
        "id", 
        "name", 
        "shared", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "createFirewallRule": {
      "example": {
        "application/json": {
          "firewall_rule": {
            "action": "allow", 
            "destination_port": "80", 
            "enabled": true, 
            "name": "ALLOW_HTTP", 
            "protocol": "tcp"
          }
        }
      }, 
      "properties": {
        "action": {
          "description": "The action that the API performs on traffic that matches the\nfirewall rule.\n\nValid value is ``allow`` or ``deny``. Default is ``deny``.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human readable description for the firewall rule.\n\nThe maximum length is 1024 characters. No default.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_ip_address": {
          "description": "The destination IPv4 or IPv6 address or CIDR. No default.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_port": {
          "description": "The destination port or port range.\n\nA valid value is a port number, as an integer, or a port range, in\nthe format of a ``:`` separated range. For a port range, include\nboth ends of the range. For example, ``80:90``.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Set to ``false`` to disable this rule in the firewall policy.\nFacilitates selectively turning off rules without having to\ndisassociate the rule from the firewall policy. Valid value is\n``true`` or ``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "firewall_rule": {
          "description": "A ``firewall_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "ip_version": {
          "description": "The IP protocol version. Valid value is ``4`` or ``6``. Default is\n``4``.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human readable name for the firewall rule. Maximum length is 255\ncharacters. Does not have to be unique. No default.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The IP protocol. Valid value is ``icmp``, ``tcp``, ``udp``, or\n``null``. No default.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Set to ``true`` to share this firewall rule with other tenants.\nOther tenants can use a shared rule in firewall policies that this\ntenant does not own. Valid value is ``true`` or ``false``. Default\nis ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "source_port": {
          "description": "The source port or port range.\n\nA valid value is a port number, as an integer, or a port range, in\nthe format of a ``:`` separated range. For a port range, include\nboth ends of the range. For example, ``80:90``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall rule. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_rule", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "createFirewallRule_201": {
      "properties": {
        "action": {
          "description": "The action that the API performs on traffic that matches the\nfirewall rule. Value is ``allow`` or ``deny``.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human readable description for the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_ip_address": {
          "description": "The destination IPv4 or IPv6 address or CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_port": {
          "description": "The destination port or port range.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this rule is enabled or disabled in the firewall\npolicy.", 
          "format": "", 
          "type": "boolean"
        }, 
        "firewall_policy_id": {
          "description": "Read-only attribute that the API populates with the UUID of the\nfirewall policy when you associate this firewall rule with a\npolicy.\n\nYou can associate a firewall rule with one policy at a time. You\ncan update this association can to a different firewall policy.\n\nIf you do not associate the rule with any policy, this attribute is\n``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_rule": {
          "description": "A ``firewall_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The generated UUID for the firewall rule object.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP protocol version. Value is ``4`` or ``6``.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human readable name for the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "position": {
          "description": "Read-only attribute that the API assigns to this rule when it\nassociates it with a firewall policy. This value indicates the\nposition of this rule in that firewall policy. This position number\nstarts at 1. If the firewall rule is not associated with any\npolicy, the position is ``null``.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The IP protocol. Value is ``icmp``, ``tcp``, ``udp``, or ``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this firewall rule is shared with other tenants.\nOther tenants can use a shared rule in firewall policies that this\ntenant does not own.", 
          "format": "", 
          "type": "boolean"
        }, 
        "source_ip_address": {
          "description": "The source IPv4 or IPv6 address or CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "source_port": {
          "description": "The source port or port range.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_rule", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "firewall_policy_id", 
        "shared", 
        "protocol", 
        "ip_version", 
        "source_ip_address", 
        "destination_ip_address", 
        "source_port", 
        "destination_port", 
        "position", 
        "action", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "createFirewall_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the firewall, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall": {
          "description": "A ``firewall`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_policy_id": {
          "description": "The UUID of the policy that is associated with the firewall.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_ids": {
          "description": "A list of UUIDs for routers that are associated with the firewall.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The status of the firewall service. Value is ``ACTIVE``,\n``INACTIVE``, ``ERROR``, ``PENDING_CREATE``, ``PENDING_UPDATE``, or\n``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the firewall service. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall", 
        "admin_state_up", 
        "description", 
        "firewall_policy_id", 
        "id", 
        "name", 
        "router_ids", 
        "status", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "createFlavor": {
      "example": {
        "application/json": {
          "flavor": {
            "description": "Dummy flavor", 
            "enabled": true, 
            "name": "dummy", 
            "service_type": "LOADBALANCERV2"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "Human-readable description for the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this flavor is enabled or disabled. Default\n``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "flavor": {
          "description": "A ``flavor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the flavor. Can be \"\" and non-unique.", 
          "format": "", 
          "type": "string"
        }, 
        "service_type": {
          "description": "Service type (ex: LOADBALANCERV2) for the flavor.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "flavor", 
        "service_type"
      ], 
      "type": "object"
    }, 
    "createFlavor_201": {
      "properties": {
        "description": {
          "description": "Human-readable description for the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this flavor is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "flavor": {
          "description": "A ``flavor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the flavor. Can be \"\" and non-unique.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profiles": {
          "description": "Service profile UUIDs associated with this flavor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "service_type": {
          "description": "Service type (ex: LOADBALANCERV2) for the flavor.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "flavor", 
        "id", 
        "name", 
        "description", 
        "service_type", 
        "service_profiles", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "createFloatingIp": {
      "example": {
        "application/json": {
          "floatingip": {
            "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
            "port_id": "ce705c24-c1ef-408a-bda3-7bbd946164ab"
          }
        }
      }, 
      "properties": {
        "fixed_ip_address": {
          "description": "The fixed IP address that is associated with the floating IP. To\nassociate the floating IP with a fixed IP at creation time, you\nmust specify the identifier of the internal port. If an internal\nport has multiple associated IP addresses, the service chooses the\nfirst IP address unless you explicitly define a fixed IP address in\nthe ``fixed_ip_address`` parameter.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_ip_address": {
          "description": "The floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_network_id": {
          "description": "The UUID of the network associated with the floating IP.", 
          "format": "", 
          "type": "string"
        }, 
        "floatingip": {
          "description": "A ``floatingip`` object. When you associate a floating IP address\nwith a VM, the instance has the same public IP address each time\nthat it boots, basically to maintain a consistent IP address for\nmaintaining DNS assignment.", 
          "format": "", 
          "type": "object"
        }, 
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant. Only administrative users can specify a\ntenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "floatingip", 
        "floating_network_id"
      ], 
      "type": "object"
    }, 
    "createFloatingIp_201": {
      "properties": {
        "fixed_ip_address": {
          "description": "The fixed IP address that is associated with the floating IP\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_ip_address": {
          "description": "The floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_network_id": {
          "description": "The UUID of the network associated with the floating IP.", 
          "format": "", 
          "type": "string"
        }, 
        "floatingip": {
          "description": "A ``floatingip`` object. When you associate a floating IP address\nwith a VM, the instance has the same public IP address each time\nthat it boots, basically to maintain a consistent IP address for\nmaintaining DNS assignment.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "floatingip", 
        "id", 
        "status", 
        "floating_network_id", 
        "router_id", 
        "fixed_ip_address", 
        "floating_ip_address", 
        "tenant_id", 
        "port_id"
      ], 
      "type": "object"
    }, 
    "createHealthMonitor": {
      "example": {
        "application/json": {
          "health_monitor": {
            "admin_state_up": true, 
            "delay": "1", 
            "expected_codes": "200,201,202", 
            "http_method": "GET", 
            "max_retries": 5, 
            "timeout": 1, 
            "type": "HTTP", 
            "url_path": "/index.html"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "The list of HTTP status codes expected in response from the member\nto declare it healthy. Specify one of the following values:\n\n- A single value, such as 200.\n\n- A list, such as 200, 202.\n\n- A range, such as 200-204.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate. A valid value is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A valid value is a string that begins with a forward\nslash (/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries"
      ], 
      "type": "object"
    }, 
    "createHealthMonitor_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "pools": {
          "description": "List of pools that are associated with the health monitor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A string value that must begin with the forward slash\n(/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "id", 
        "tenant_id", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries", 
        "pools"
      ], 
      "type": "object"
    }, 
    "createHealthMonitorv2": {
      "example": {
        "application/json": {
          "health_monitor": {
            "admin_state_up": true, 
            "delay": "1", 
            "expected_codes": "200,201,202", 
            "http_method": "GET", 
            "max_retries": 5, 
            "timeout": 1, 
            "type": "HTTP", 
            "url_path": "/index.html"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "The list of HTTP status codes expected in response from the member\nto declare it healthy. Specify one of the following values:\n\n- A single value, such as 200.\n\n- A list, such as 200, 202.\n\n- A range, such as 200-204.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate. A valid value is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A valid value is a string that begins with a forward\nslash (/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries"
      ], 
      "type": "object"
    }, 
    "createHealthMonitorv2_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "pools": {
          "description": "List of pools that are associated with the health monitor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A string value that must begin with the forward slash\n(/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "id", 
        "tenant_id", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries", 
        "pools"
      ], 
      "type": "object"
    }, 
    "createIKEPolicy": {
      "example": {
        "application/json": {
          "ikepolicy": {
            "auth_algorithm": "sha1", 
            "encryption_algorithm": "aes-128", 
            "ike_version": "v1", 
            "lifetime": {
              "units": "seconds", 
              "value": 7200
            }, 
            "name": "ikepolicy1", 
            "pfs": "group5", 
            "phase1_negotiation_mode": "main"
          }
        }
      }, 
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1``, which\nis the default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2``. Default is\n``v1``.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicy": {
          "description": "An ``ikepolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the IKE policy. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ikepolicy", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "createIKEPolicy_201": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1``, which\nis the default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2``. Default is\n``v1``.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicies": {
          "description": "A list of IKE policy objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "ikepolicy": {
          "description": "An ``ikepolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the VPN service. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ikepolicy", 
        "ikepolicies", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "auth_algorithm", 
        "encryption_algorithm", 
        "phase1_negotiation_mode", 
        "pfs", 
        "ike_version", 
        "lifetime", 
        "units", 
        "value"
      ], 
      "type": "object"
    }, 
    "createIPSecPolicy": {
      "example": {
        "application/json": {
          "ipsecpolicy": {
            "auth_algorithm": "sha1", 
            "encapsulation_mode": "tunnel", 
            "encryption_algorithm": "aes-128", 
            "lifetime": {
              "units": "seconds", 
              "value": 7200
            }, 
            "name": "ipsecpolicy1", 
            "pfs": "group5", 
            "transform_protocol": "esp"
          }
        }
      }, 
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1``, which is\nthe default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "The encapsulation mode. A valid value is ``tunnel`` or\n``transport``. Default is ``tunnel``.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "ipsecpolicy": {
          "description": "An ``ipsecpolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec policy. Only administrative users can specify a\ntenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP``, ``AH``, or ``AH-\nESP``. Default is ``ESP``.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ipsecpolicy", 
        "name", 
        "description", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "createIPSecPolicy_201": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1``, which is\nthe default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "The encapsulation mode. A valid value is ``tunnel`` or\n``transport``. Default is ``tunnel``.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "ipsecpolicies": {
          "description": "A list of IPSec policy objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "ipsecpolicy": {
          "description": "An ``ipsecpolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP``, ``AH``, or ``AH-\nESP``. Default is ``ESP``.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ipsecpolicy", 
        "ipsecpolicies", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "transform_protocol", 
        "encapsulation_mode", 
        "auth_algorithm", 
        "encryption_algorithm", 
        "pfs", 
        "lifetime", 
        "units", 
        "value"
      ], 
      "type": "object"
    }, 
    "createIPSecSiteConnection": {
      "example": {
        "application/json": {
          "ipsec_site_connection": {
            "admin_state_up": true, 
            "ikepolicy_id": "9b00d6b0-6c93-4ca5-9747-b8ade7bb514f", 
            "initiator": "bi-directional", 
            "ipsecpolicy_id": "e6e23d0c-9519-4d52-8ea4-5b1f96d857b1", 
            "local_ep_group_id": "3e1815dd-e212-43d0-8f13-b494fa553e68", 
            "mtu": "1500", 
            "name": "vpnconnection1", 
            "peer_address": "172.24.4.233", 
            "peer_ep_group_id": "9ad5a7e0-6dac-41b4-b20d-a7b8645fddf1", 
            "peer_id": "172.24.4.233", 
            "psk": "secret", 
            "vpnservice_id": "5c561d9d-eaea-45f6-ae3e-08d1a7080828"
          }
        }
      }, 
      "properties": {
        "action": {
          "description": "The dead peer detection (DPD) action. A valid value is ``clear``,\n``hold``, ``restart``, ``disabled``, or ``restart-by-peer``.\nDefault value is ``hold``.", 
          "format": "", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up\n(``true``) or down (``false``). If down, the connection does not\nforward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk``, which is the\ndefault.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with dead peer detection (DPD) protocol controls.", 
          "format": "", 
          "type": "object"
        }, 
        "ikepolicy_id": {
          "description": "The UUID of the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional``. Default is ``bi-directional``.", 
          "format": "", 
          "type": "string"
        }, 
        "interval": {
          "description": "The dead peer detection (DPD) interval, in seconds. A valid value\nis a positive integer. Default is 30.", 
          "format": "", 
          "type": "integer"
        }, 
        "ipsec_site_connection": {
          "description": "An ``ipsec_site_connection`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "ipsecpolicy_id": {
          "description": "The UUID of the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "local_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private subnets for\nthe local side of the connection. Yo must specify this parameter\nwith the ``peer_ep_group_id`` parameter unless in backward-\ncompatible mode where ``peer_cidrs`` is provided with a\n``subnet_id`` for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) value to address fragmentation.\nMinimum value is 68 for IPv4, and 1280 for IPv6.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_address": {
          "description": "The peer gateway public IPv4 or IPv6 address or FQDN.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "(Deprecated) Unique list of valid peer private CIDRs in the form <\nnet_address > / < prefix > .", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "peer_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private CIDRs in the\nform < net_address > / < prefix > for the peer side of the\nconnection. You must specify this parameter with the\n``local_ep_group_id`` parameter unless in backward-compatible mode\nwhere ``peer_cidrs`` is provided with a ``subnet_id`` for the VPN\nservice.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_id": {
          "description": "The peer router identity for authentication. A valid value is an\nIPv4 address, IPv6 address, e-mail address, key ID, or FQDN.\nTypically, this value matches the ``peer_address`` value.", 
          "format": "", 
          "type": "string"
        }, 
        "psk": {
          "description": "The pre-shared key. A valid value is any string.", 
          "format": "", 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The operational status of the IPSec connection. Value is\n``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``, ``PENDING_CREATE``,\n``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The dead peer detection (DPD) timeout in seconds. A valid value is\na positive integer that is greater than the DPD ``interval`` value.\nDefault is 120.", 
          "format": "", 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "The UUID of the VPN service.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "ipsec_site_connection", 
        "peer_address", 
        "peer_id", 
        "psk", 
        "tenant_id", 
        "ikepolicy_id", 
        "ipsecpolicy_id", 
        "vpnservice_id"
      ], 
      "type": "object"
    }, 
    "createIPSecSiteConnection_201": {
      "properties": {
        "action": {
          "description": "The dead peer detection (DPD) action. A valid value is ``clear``,\n``hold``, ``restart``, ``disabled``, or ``restart-by-peer``.\nDefault value is ``hold``.", 
          "format": "", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up\n(``true``) or down (``false``). If down, the connection does not\nforward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk``, which is the\ndefault.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with dead peer detection (DPD) protocol controls.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicy_id": {
          "description": "The UUID of the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional``. Default is ``bi-directional``.", 
          "format": "", 
          "type": "string"
        }, 
        "interval": {
          "description": "The dead peer detection (DPD) interval, in seconds. A valid value\nis a positive integer. Default is 30.", 
          "format": "", 
          "type": "integer"
        }, 
        "ipsec_site_connection": {
          "description": "An ``ipsec_site_connection`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "ipsecpolicy_id": {
          "description": "The UUID of the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "local_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private subnets for\nthe local side of the connection. This value is present with the\n``peer_ep_group_id`` parameter unless in backward-compatible mode,\nwhere ``peer_cidrs`` is shown.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) to address fragmentation. The\nminimum value for IPv4 is 68. The minimum value for IPv6 is 1280.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_address": {
          "description": "The peer gateway public IPv4 address, IPv6 address, or FQDN.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "(Deprecated) Unique list of valid peer private CIDRs in the form <\nnet_address > / < prefix > .", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "peer_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private CIDRs in the\nform < net_address > / < prefix > for the peer side of the\nconnection. This value is present with the ``local_ep_group_id``\nparameter unless in backward-compatible mode, where ``peer_cidrs``\nis shown.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_id": {
          "description": "The peer router identity for authentication. Can be an IPv4\naddress, IPv6 address, e-mail address, key ID, or FQDN. Typically,\nthis value matches the ``peer_address`` value.", 
          "format": "", 
          "type": "string"
        }, 
        "psk": {
          "description": "The pre-shared key. A valid value is any string.", 
          "format": "", 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether the IPSec connection is currently operational.\nValue is ``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``,\n``PENDING_CREATE``, ``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The dead peer detection (DPD) timeout, in seconds. A valid value is\na positive integer that is greater than the DPD ``interval`` value.\nDefault is 120.", 
          "format": "", 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "The UUID of the VPN service.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "ipsec_site_connection", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "peer_address", 
        "peer_id", 
        "local_ep_group_id", 
        "peer_ep_group_id", 
        "peer_cidrs", 
        "route_mode", 
        "mtu", 
        "auth_mode", 
        "psk", 
        "initiator", 
        "admin_state_up", 
        "status", 
        "ikepolicy_id", 
        "ipsecpolicy_id", 
        "vpnservice_id", 
        "dpd", 
        "action", 
        "interval", 
        "timeout"
      ], 
      "type": "object"
    }, 
    "createListenerv2": {
      "example": {
        "application/json": {
          "listener": {
            "admin_state_up": true, 
            "connection_limit": 100, 
            "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
            "description": "listener one", 
            "loadbalancer_id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
            "name": "listener1", 
            "protocol": "HTTP", 
            "protocol_port": "80", 
            "sni_container_refs": [
              "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
              "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
            ]
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up\n(``true``) or down (``false``).\n\nSet this attribute to ``false`` to create the listener in an\nadministratively down state.", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections permitted for this load balancer.\nDefault is infinite.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_pool_id": {
          "description": "The UUID of default pool. Must have compatible protocol with\nlistener.", 
          "format": "", 
          "type": "string"
        }, 
        "default_tls_container_ref": {
          "description": "A reference to a container of TLS secrets.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Detailed description of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "listener": {
          "description": "A ``listener`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "loadbalancer_id": {
          "description": "The UUID of the load balancer.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The listener name.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol to load balance. A valid value is ``HTTP``, ``HTTPS``,\n``TCP``, or ``TERMINATED_HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The TCP or UDP port on which to listen.", 
          "format": "", 
          "type": "integer"
        }, 
        "sni_container_refs": {
          "description": "A list of references to TLS secrets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the listener. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "listener", 
        "name", 
        "tenant_id", 
        "protocol", 
        "protocol_port", 
        "loadbalancer_id"
      ], 
      "type": "object"
    }, 
    "createListenerv2_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the listener, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections permitted for this load balancer.\nDefault is infinite.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_pool_id": {
          "description": "The UUID of default pool. Must have compatible protocol with\nlistener.", 
          "format": "", 
          "type": "string"
        }, 
        "default_tls_container_ref": {
          "description": "A reference to a container of TLS secrets.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Detailed description of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "listener": {
          "description": "A ``listener`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "loadbalancers": {
          "description": "A list of load balancer objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The listener name.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol to load balance. A valid value is ``HTTP``, ``HTTPS``,\n``TCP``, or ``TERMINATED_HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The TCP or UDP port on which to listen.", 
          "format": "", 
          "type": "integer"
        }, 
        "sni_container_refs": {
          "description": "A list of references to TLS secrets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the listener. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "listener", 
        "admin_state_up", 
        "connection_limit", 
        "default_pool_id", 
        "description", 
        "id", 
        "loadbalancers", 
        "name", 
        "protocol", 
        "protocol_port", 
        "tenant_id", 
        "default_tls_container_ref", 
        "sni_container_refs"
      ], 
      "type": "object"
    }, 
    "createLoadBalancerv2": {
      "example": {
        "application/json": {
          "loadbalancer": {
            "admin_state_up": true, 
            "description": "simple lb", 
            "flavor": "a7ae5d5a-d855-4f9a-b187-af66b53f4d04", 
            "name": "loadbalancer1", 
            "tenant_id": "b7c1a69e88bf4b21a8148f787aef2081", 
            "vip_address": "10.0.0.4", 
            "vip_subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The load balancer description.", 
          "format": "", 
          "type": "string"
        }, 
        "flavor": {
          "description": "The UUID of a flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The load balancer name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The name of the provider.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the load balancer. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "vip_subnet_id", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "createLoadBalancerv2_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The load balancer description.", 
          "format": "", 
          "type": "string"
        }, 
        "flavor": {
          "description": "The UUID of a flavor if set.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the load balancer.", 
          "format": "", 
          "type": "string"
        }, 
        "listeners": {
          "description": "The associated listeners, if any.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "loadbalancer": {
          "description": "A ``loadbalancer`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The load balancer name.", 
          "format": "", 
          "type": "string"
        }, 
        "operating_status": {
          "description": "The operating status of the load balancer.\n\nThis value is ``ONLINE`` or ``OFFLINE``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The name of the provider.", 
          "format": "", 
          "type": "string"
        }, 
        "provisioning_status": {
          "description": "The provisioning status of the load balancer.\n\nThis value is ``ACTIVE``, ``PENDING_CREATE`` or ``ERROR``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "loadbalancer", 
        "description", 
        "admin_state_up", 
        "tenant_id", 
        "provisioning_status", 
        "listeners", 
        "vip_address", 
        "vip_subnet_id", 
        "id", 
        "operating_status", 
        "name", 
        "provider"
      ], 
      "type": "object"
    }, 
    "createMember": {
      "example": {
        "application/json": {
          "member": {
            "address": "10.0.0.22", 
            "admin_state_up": true, 
            "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
            "protocol_port": "90", 
            "weight": "1"
          }
        }
      }, 
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member", 
        "pool_id", 
        "address", 
        "protocol_port"
      ], 
      "type": "object"
    }, 
    "createMember_201": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the member.", 
          "format": "", 
          "type": "string"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member", 
        "id", 
        "tenant_id", 
        "pool_id", 
        "address", 
        "protocol_port", 
        "weight", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "createMemberv2": {
      "example": {
        "application/json": {
          "member": {
            "address": "10.0.0.22", 
            "admin_state_up": true, 
            "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
            "protocol_port": "90", 
            "weight": "1"
          }
        }
      }, 
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnet_id": {
          "description": "If you omit this parameter, LBaaS uses the ``vip_subnet_id``\nparameter value for the subnet UUID.", 
          "format": "", 
          "type": "integer"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "member", 
        "tenant_id", 
        "address", 
        "protocol_port"
      ], 
      "type": "object"
    }, 
    "createMemberv2_201": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the member.", 
          "format": "", 
          "type": "string"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "Subnet in which to access this member.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "A positive integer value that indicates the relative portion of\ntraffic that this member should receive from the pool. For example,\na member with a weight of 10 receives five times as much traffic as\na member with a weight of 2.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member", 
        "id", 
        "tenant_id", 
        "address", 
        "protocol_port", 
        "admin_state_up", 
        "status"
      ], 
      "type": "object"
    }, 
    "createMeteringLabel": {
      "example": {
        "application/json": {
          "metering_label": {
            "description": "description of label1", 
            "name": "label1"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The description for the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_label": {
          "description": "A ``metering_label`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this metering label is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }
      }, 
      "required": [
        "metering_label", 
        "name"
      ], 
      "type": "object"
    }, 
    "createMeteringLabelRule": {
      "example": {
        "application/json": {
          "metering_label_rule": {
            "direction": "ingress", 
            "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
            "remote_ip_prefix": "10.0.1.0/24"
          }
        }
      }, 
      "properties": {
        "direction": {
          "description": "Ingress or egress, which is the direction in which the metering\nrule is applied.", 
          "format": "", 
          "type": "string"
        }, 
        "excluded": {
          "description": "Indicates whether to count the traffic of a specific IP address\nwith the ``remote_ip_prefix`` value. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "metering_label_id": {
          "description": "The metering label UUID to associate with this metering rule.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_label_rule": {
          "description": "A ``metering_label_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this metering rule packet.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "metering_label_rule", 
        "direction", 
        "metering_label_id", 
        "remote_ip_prefix"
      ], 
      "type": "object"
    }, 
    "createMeteringLabelRule_201": {
      "properties": {
        "direction": {
          "description": "Ingress or egress, which is the direction in which the metering\nrule is applied.", 
          "format": "", 
          "type": "string"
        }, 
        "excluded ": {
          "description": "Indicates whether to count the traffic of a specific IP address\nwith the ``remote_ip_prefix`` value. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the metering label rule.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_label_id": {
          "description": "The metering label UUID to associate with this metering rule.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_label_rule": {
          "description": "A ``metering_label_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this metering rule packet.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "metering_label_rule", 
        "remote_ip_prefix", 
        "direction", 
        "metering_label_id", 
        "id", 
        "excluded "
      ], 
      "type": "object"
    }, 
    "createMeteringLabel_201": {
      "properties": {
        "description": {
          "description": "Description for the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_label": {
          "description": "A ``metering_label`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this metering label is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The tenant UUID for the metering label.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "metering_label", 
        "tenant_id", 
        "description", 
        "name", 
        "id", 
        "shared"
      ], 
      "type": "object"
    }, 
    "createMultiNetwork": {
      "example": {
        "application/json": {
          "network": {
            "admin_state_up": true, 
            "name": "net1", 
            "segments": [
              {
                "provider:network_type": "vlan", 
                "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                "provider:segmentation_id": "2"
              }, 
              {
                "provider:network_type": "stt", 
                "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453"
              }
            ]
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "segments": {
          "description": "A list of provider ``segment`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "shared": {
          "description": "Admin-only. Indicates whether this network is shared across all\ntenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network. Only administrative\nusers can specify a tenant UUID other than their own. You cannot\nchange this value through authorization policies.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "network", 
        "segments"
      ], 
      "type": "object"
    }, 
    "createMultiNetwork_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "network", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled"
      ], 
      "type": "object"
    }, 
    "createPolicy": {
      "example": {
        "application/json": {
          "policy": {
            "description": "This policy limits the ports to 10Mbit max.", 
            "name": "10Mbit", 
            "shared": false
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The QoS policy description.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The QoS policy name.", 
          "format": "", 
          "type": "string"
        }, 
        "policy": {
          "description": "A QoS ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "shared": {
          "description": "Set to ``true`` to share this policy with other tenants.\n\nDefault is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The tenant UUID of QoS policy owner. Only administrative users can\nspecify a tenant UUID other than their own. You cannot change this\nvalue through authorization policies.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The type of QoS policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy"
      ], 
      "type": "object"
    }, 
    "createPolicy_201": {
      "properties": {
        "description": {
          "description": "The description of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The generated UUID of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "policy": {
          "description": "A QoS ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "shared": {
          "description": "Indicates whether this policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the QoS policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy", 
        "tenant_id", 
        "id", 
        "name", 
        "description", 
        "shared"
      ], 
      "type": "object"
    }, 
    "createPool": {
      "example": {
        "application/json": {
          "pool": {
            "admin_state_up": true, 
            "description": "simple pool", 
            "lb_algorithm": "ROUND_ROBIN", 
            "name": "my-pool", 
            "protocol": "HTTP", 
            "subnet_id": "e301aed0-d9e7-498a-977c-1bbfaf14ed5d"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool": {
          "description": "A ``pool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pool", 
        "protocol", 
        "subnet_id", 
        "lb_method"
      ], 
      "type": "object"
    }, 
    "createPool_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "List of health monitors that are associated with the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "health_monitors_status": {
          "description": "The statuses of the health monitors that are associated with the\npool.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_algorithm": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "The list of members that belong to the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool": {
          "description": "A ``pool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The load-balancer provider.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The UUID of the virtual IP (VIP) address.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pool", 
        "status", 
        "lb_algorithm", 
        "protocol", 
        "description", 
        "subnet_id", 
        "tenant_id", 
        "admin_state_up", 
        "name", 
        "members", 
        "status_description", 
        "id", 
        "vip_id", 
        "health_monitors_status", 
        "provider"
      ], 
      "type": "object"
    }, 
    "createPoolv2": {
      "example": {
        "application/json": {
          "pool": {
            "admin_state_up": true, 
            "description": "simple pool", 
            "lb_algorithm": "ROUND_ROBIN", 
            "name": "my-pool", 
            "protocol": "HTTP", 
            "subnet_id": "e301aed0-d9e7-498a-977c-1bbfaf14ed5d"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_algorithm": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "listener_id": {
          "description": "The UUID of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "protocol", 
        "subnet_id", 
        "lb_algorithm"
      ], 
      "type": "object"
    }, 
    "createPoolv2_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors_status": {
          "description": "The statuses of the health monitors that are associated with the\npool.", 
          "format": "", 
          "type": "string"
        }, 
        "healthmonitor_id": {
          "description": "The UUID of the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_algorithm": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "The list of members that belong to the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool": {
          "description": "A ``pool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "session_persistence": {
          "description": "The session persistence algorithm. This algorithm is a dictionary\nwith type and cookie_name keys.", 
          "format": "", 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The UUID of the virtual IP (VIP) address.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pool", 
        "status", 
        "protocol", 
        "tenant_id", 
        "name", 
        "members", 
        "lb_algorithm", 
        "id", 
        "subnet_id", 
        "vip_id", 
        "health_monitors_status"
      ], 
      "type": "object"
    }, 
    "createProviderNetwork": {
      "example": {
        "application/json": {
          "network": {
            "admin_state_up": true, 
            "name": "sample_network"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Admin-only. Indicates whether this network is shared across all\ntenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network. Only administrative\nusers can specify a tenant UUID other than their own. You cannot\nchange this value through authorization policies.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "network"
      ], 
      "type": "object"
    }, 
    "createProviderNetwork_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "availability_zone_hints": {
          "description": "The availability zone candidate for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "network", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled", 
        "availability_zone_hints"
      ], 
      "type": "object"
    }, 
    "createRouter": {
      "example": {
        "application/json": {
          "router": {
            "admin_state_up": true, 
            "external_gateway_info": {
              "enable_snat": true, 
              "external_fixed_ips": [
                {
                  "ip": "192.168.10.1", 
                  "subnet_id": "255.255.255.0"
                }
              ], 
              "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
            }, 
            "name": "another_router"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the router, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "enable_snat": {
          "description": "Enable Source NAT (SNAT) attribute. Default is ``true``. To persist\nthis attribute value, set the ``enable_snat_by_default`` option in\nthe ``neutron.conf`` file.", 
          "format": "", 
          "type": "boolean"
        }, 
        "external_fixed_ips": {
          "description": "The IP address parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "external_gateway_info": {
          "description": "The external gateway parameters, which include the ``network_id``,\n``enable_snat`` and ``external_fixed_ips`` parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The router name.", 
          "format": "", 
          "type": "string"
        }, 
        "router": {
          "description": "A ``router`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "router"
      ], 
      "type": "object"
    }, 
    "createRouter_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the router, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "availability_zone_hints": {
          "description": "The availability zone candidate for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "availability_zones": {
          "description": "The availability zone for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "distributed": {
          "description": "If ``true``, indicates a distributed router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "enable_snat": {
          "description": "Enable Source NAT (SNAT) attribute, a part of ext-gw-mode\nextension. When a gateway is attached to a router using an L3\nextension, Network Address Translation (NAT) is enabled for traffic\ngenerated by subnets attached to the router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "external_fixed_ips": {
          "description": "The IP address parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "external_gateway_info": {
          "description": "The external gateway parameters, which include the ``network_id``,\n``enable_snat`` and ``external_fixed_ips`` parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "ha": {
          "description": "If ``true``, indicates a highly-available router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The router name.", 
          "format": "", 
          "type": "string"
        }, 
        "router": {
          "description": "A ``router`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "routes": {
          "description": "The extra routes configuration for L3 router.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "router", 
        "status", 
        "external_gateway_info", 
        "enable_snat", 
        "external_fixed_ips", 
        "availability_zone_hints", 
        "availability_zones", 
        "name", 
        "admin_state_up", 
        "tenant_id", 
        "distributed", 
        "routes", 
        "ha", 
        "id"
      ], 
      "type": "object"
    }, 
    "createSecGroup": {
      "example": {
        "application/json": {
          "security_group": {
            "description": "security group for webservers", 
            "name": "new-webservers"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The security group description.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "A symbolic name for the security group. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group": {
          "description": "A ``security_group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the security group. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "security_group", 
        "name"
      ], 
      "type": "object"
    }, 
    "createSecGroupRule": {
      "example": {
        "application/json": {
          "security_group_rule": {
            "direction": "ingress", 
            "ethertype": "IPv4", 
            "port_range_max": "80", 
            "port_range_min": "80", 
            "protocol": "tcp", 
            "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
            "security_group_id": "a7734e61-b545-452d-a3cd-0189cbd9747a"
          }
        }
      }, 
      "properties": {
        "direction": {
          "description": "Ingress or egress: The direction in which the security group rule\nis applied. For a compute instance, an ingress security group rule\nis applied to incoming (ingress) traffic for that instance. An\negress rule is applied to traffic leaving the instance.", 
          "format": "", 
          "type": "string"
        }, 
        "ethertype": {
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match\nthe ingress or egress rules.", 
          "format": "", 
          "type": "string"
        }, 
        "port_range_max": {
          "description": "The maximum port number in the range that is matched by the\nsecurity group rule. The ``port_range_min`` attribute constrains\nthe ``port_range_max`` attribute. If the protocol is ICMP, this\nvalue must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "port_range_min": {
          "description": "The minimum port number in the range that is matched by the\nsecurity group rule. If the protocol is TCP or UDP, this value must\nbe less than or equal to the ``port_range_max`` attribute value. If\nthe protocol is ICMP, this value must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The protocol that is matched by the security group rule. Valid\nvalues are null, tcp, udp, and icmp.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_group_id": {
          "description": "The remote group UUID to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body. This attribute\nmatches the IP prefix as the source IP address of the IP packet.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_id": {
          "description": "The security group UUID to associate with this security group rule.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_rule": {
          "description": "A ``security_group_rule`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "security_group_rule", 
        "direction", 
        "security_group_id"
      ], 
      "type": "object"
    }, 
    "createSecGroupRule_201": {
      "properties": {
        "direction": {
          "description": "Ingress or egress: the direction in which the security group rule\nis applied. For a compute instance, an ingress security group rule\nis applied to incoming (ingress) traffic for that instance. An\negress rule is applied to traffic leaving the instance.", 
          "format": "", 
          "type": "string"
        }, 
        "ethertype": {
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match\nthe ingress or egress rules.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the security group rule.", 
          "format": "", 
          "type": "string"
        }, 
        "port_range_max": {
          "description": "The maximum port number in the range that is matched by the\nsecurity group rule. The ``port_range_min`` attribute constrains\nthe ``port_range_max`` attribute. If the protocol is ICMP, this\nvalue must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "port_range_min": {
          "description": "The minimum port number in the range that is matched by the\nsecurity group rule. If the protocol is TCP or UDP, this value must\nbe less than or equal to the ``port_range_max`` attribute value. If\nthe protocol is ICMP, this value must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The protocol that is matched by the security group rule. Value is\n``null``, ``icmp``, ``icmpv6``, ``tcp``, or ``udp``.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_group_id": {
          "description": "The remote group UUID to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body. This attribute\nvalue matches the IP prefix as the source IP address of the IP\npacket.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_id": {
          "description": "The UUID of the security group.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_rule": {
          "description": "A ``security_group_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the security group rule. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "security_group_rule", 
        "direction", 
        "ethertype", 
        "id", 
        "port_range_max", 
        "port_range_min", 
        "protocol", 
        "remote_group_id", 
        "remote_ip_prefix", 
        "security_group_id", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "createSecGroup_201": {
      "properties": {
        "description": {
          "description": "The security group description.", 
          "format": "", 
          "type": "string"
        }, 
        "direction": {
          "description": "Ingress or egress: the direction in which the security group rule\nis applied. For a compute instance, an ingress security group rule\nis applied to incoming (ingress) traffic for that instance. An\negress rule is applied to traffic leaving the instance.", 
          "format": "", 
          "type": "string"
        }, 
        "ethertype": {
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match\nthe ingress or egress rules.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the security group rule.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The security group name.", 
          "format": "", 
          "type": "string"
        }, 
        "port_range_max": {
          "description": "The maximum port number in the range that is matched by the\nsecurity group rule. The ``port_range_min`` attribute constrains\nthe ``port_range_max`` attribute. If the protocol is ICMP, this\nvalue must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "port_range_min": {
          "description": "The minimum port number in the range that is matched by the\nsecurity group rule. If the protocol is TCP or UDP, this value must\nbe less than or equal to the ``port_range_max`` attribute value. If\nthe protocol is ICMP, this value must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The protocol that is matched by the security group rule. Value is\n``null``, ``icmp``, ``icmpv6``, ``tcp``, or ``udp``.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_group_id": {
          "description": "The remote group UUID to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body. This attribute\nvalue matches the IP prefix as the source IP address of the IP\npacket.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group": {
          "description": "A ``security_group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "security_group_id": {
          "description": "The UUID of the security group.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_rules": {
          "description": "A list of ``security_group_rule`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the security group rule. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "security_group", 
        "description", 
        "id", 
        "name", 
        "security_group_rules", 
        "direction", 
        "ethertype", 
        "port_range_max", 
        "port_range_min", 
        "protocol", 
        "remote_group_id", 
        "remote_ip_prefix", 
        "security_group_id", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "createServiceProfile": {
      "example": {
        "application/json": {
          "service_profile": {
            "description": "Dummy profile", 
            "driver": "neutron_lbaas.drivers.octavia.driver.OctaviaDriver", 
            "enabled": "true", 
            "metainfo": "{'foo': 'bar'}"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "Human-readable description for the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "driver": {
          "description": "Provider driver to use for this profile. Example:\n``neutron_lbaas.drivers.octavia.driver.OctaviaDriver``", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this service profile is enabled or disabled.\nDefault ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "metainfo": {
          "description": "JSON-formatted meta information.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profile": {
          "description": "A ``service_profile`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "service_profile"
      ], 
      "type": "object"
    }, 
    "createServiceProfile_201": {
      "properties": {
        "description": {
          "description": "Human-readable description for the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "driver": {
          "description": "Driver to associate with profile.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this service profile is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "metainfo": {
          "description": "JSON metainfo to associate with profile.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profile": {
          "description": "A ``service_profile`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "service_profile", 
        "id", 
        "description", 
        "driver", 
        "metainfo", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "createSubnetPool": {
      "example": {
        "application/json": {
          "subnetpool": {
            "default_prefixlen": 25, 
            "max_prefixlen": 30, 
            "min_prefixlen": 24, 
            "name": "my-subnet-pool", 
            "prefixes": [
              "192.168.0.0/16", 
              "10.10.0.0/21"
            ], 
            "shared": "false"
          }
        }
      }, 
      "properties": {
        "address_scope_id": {
          "description": "An address scope to assign to the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are omitted when you create the subnet.\nDefault is ``min_prefixlen``.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. Default is no quota is enforced\non allocations from the subnet pool. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.\nFor IPv4 subnet pools, default is ``32``. For IPv6 subnet pools,\ndefault is ``128``.", 
          "format": "", 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool. For\nIPv4 subnet pools, default is ``8``. For IPv6 subnet pools, default\nis ``64``.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "A name for the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes to assign to the subnet pool. The API\nmerges adjacent prefixes and treats them as a single prefix.\n\nEach subnet prefix must be unique among all subnet prefixes in all\nsubnet pools that are associated with the address scope.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "shared": {
          "description": "Admin-only. Indicates whether this subnet pool is shared across all\ntenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the subnet pool. Only\nadministrative users can specify a tenant UUID other than their\nown. You cannot change this value through authorization policies.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnetpool", 
        "name", 
        "prefixes"
      ], 
      "type": "object"
    }, 
    "createSubnetPool_201": {
      "properties": {
        "address_scope_id": {
          "description": "The address scope.", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "Time at which subnetpool has been created.", 
          "format": "", 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are omitted when you create the subnet.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "type": "integer"
        }, 
        "id": {
          "description": "The UUID of the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP address family of the list of prefixes passed to the\n``prefixes`` attribute.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.", 
          "format": "", 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The subnet pool name.", 
          "format": "", 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes that are assigned to the subnet pool. The\nAPI merges adjacent prefixes and treats them as a single prefix.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "shared": {
          "description": "Indicates whether this subnet pool is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "Time at which subnetpool has been updated.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnetpool", 
        "min_prefixlen", 
        "address_scope_id", 
        "default_prefixlen", 
        "id", 
        "max_prefixlen", 
        "name", 
        "created_at", 
        "updated_at", 
        "default_quota", 
        "tenant_id", 
        "prefixes", 
        "ip_version", 
        "shared"
      ], 
      "type": "object"
    }, 
    "createVIP": {
      "example": {
        "application/json": {
          "vip": {
            "admin_state_up": true, 
            "name": "NewVip", 
            "pool_id": "105320c3-8416-4997-9c1c-4098b95fdaca", 
            "protocol": "HTTP", 
            "protocol_port": "80", 
            "subnet_id": "0ba2ef27-0054-4b28-a8fa-f215e8079272"
          }
        }
      }, 
      "properties": {
        "address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the VIP. A valid value is up (``true``)\nor down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections allowed for the VIP. Value is\n``-1`` if the limit is not set.", 
          "format": "", 
          "type": "integer"
        }, 
        "description": {
          "description": "Human-readable description for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VIP. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool_id": {
          "description": "The UUID of the pool with which the VIP is associated.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the virtual IP (VIP) address. A valid value is\n``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port on which to listen to client traffic that is associated\nwith the virtual IP (VIP) address. A valid value is from 0 to\n65535.", 
          "format": "", 
          "type": "integer"
        }, 
        "session_persistence": {
          "description": "Session persistence parameters for the VIP. Omit the\n``session_persistence`` parameter to prevent session persistence.\nWhen no session persistence is used, the ``session_persistence``\nparameter does not appear in the API response. To clear session\npersistence for the VIP, set the ``session_persistence`` parameter\nto ``null`` in a VIP update request.", 
          "format": "", 
          "type": "object"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip": {
          "description": "A ``vip`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vip", 
        "subnet_id", 
        "protocol", 
        "protocol_port", 
        "pool_id"
      ], 
      "type": "object"
    }, 
    "createVIP_201": {
      "properties": {
        "address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the VIP. A valid value is up (``true``)\nor down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections allowed for the VIP. Default is\n``-1``, meaning no limit.", 
          "format": "", 
          "type": "integer"
        }, 
        "description": {
          "description": "Human-readable description for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VIP. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool_id": {
          "description": "The UUID of the pool with which the VIP is associated.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the VIP port.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the virtual IP (VIP) address. A valid value is\n``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port on which to listen to client traffic that is associated\nwith the virtual IP (VIP) address. A valid value is from 0 to\n65535.", 
          "format": "", 
          "type": "integer"
        }, 
        "session_persistence": {
          "description": "Session persistence parameters for the VIP. Omit the\n``session_persistence`` parameter to prevent session persistence.\nWhen no session persistence is used, the ``session_persistence``\nparameter does not appear in the API response. To clear session\npersistence for the VIP, set the ``session_persistence`` parameter\nto ``null`` in a VIP update request.", 
          "format": "", 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the VIP. Indicates whether the VIP is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip": {
          "description": "A ``vip`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vip", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "subnet_id", 
        "port_id", 
        "address", 
        "protocol", 
        "protocol_port", 
        "pool_id", 
        "session_persistence", 
        "connection_limit", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "createVPNService": {
      "example": {
        "application/json": {
          "vpnservice": {
            "admin_state_up": true, 
            "name": "myservice", 
            "router_id": "66e3b16c-8ce5-40fb-bb49-ab6d8dc3f2aa", 
            "subnet_id": null
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up (``true``)\nor down (``false``). If down, connections on service are not\nactive.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router to which the VPN service is inserted.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "(Deprecated) The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "A ``vpnservice`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vpnservice", 
        "router_id"
      ], 
      "type": "object"
    }, 
    "createVPNService_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up (``true``)\nor down (``false``). If down, the port does not forward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "external_v4_ip": {
          "description": "Read-only external (public) IPv4 address that is used for the VPN\nservice. The VPN plugin sets this address if an IPv4 interface is\navailable.", 
          "format": "", 
          "type": "string"
        }, 
        "external_v6_ip": {
          "description": "Read-only external (public) IPv6 address that is used for the VPN\nservice. The VPN plugin sets this address if an IPv6 interface is\navailable.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router into which the VPN service is inserted.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether IPSec VPN service is currently operational. Value\nis ``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``, ``PENDING_CREATE``,\n``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "(Deprecated) The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the VPN service. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "A ``vpnservice`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vpnservice", 
        "router_id", 
        "status", 
        "name", 
        "admin_state_up", 
        "external_v4_ip", 
        "external_v6_ip", 
        "subnet_id", 
        "tenant_id", 
        "id", 
        "description"
      ], 
      "type": "object"
    }, 
    "createVTNetwork": {
      "example": {
        "application/json": {
          "network": {
            "admin_state_up": true, 
            "name": "net1", 
            "vlan_transparent": true
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Admin-only. Indicates whether this network is shared across all\ntenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network. Only administrative\nusers can specify a tenant UUID other than their own. You cannot\nchange this value through authorization policies.", 
          "format": "", 
          "type": "string"
        }, 
        "vlan_transparent": {
          "description": "The state of the network, which is VLAN transparent (``true``) or\nnot VLAN transparent (``false``).", 
          "format": "", 
          "type": "boolean"
        }
      }, 
      "required": [
        "network", 
        "vlan_transparent"
      ], 
      "type": "object"
    }, 
    "createVTNetwork_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }, 
        "vlan_transparent": {
          "description": "The state of the network, which is VLAN transparent (``true``) or\nnot VLAN transparent (``false``).", 
          "format": "", 
          "type": "boolean"
        }
      }, 
      "required": [
        "network", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled", 
        "vlan_transparent"
      ], 
      "type": "object"
    }, 
    "createVpnEndpointGroup": {
      "example": {
        "application/json": {
          "endpoint_group": {
            "endpoints": [
              "10.2.0.0/24", 
              "10.3.0.0/24"
            ], 
            "name": "peers", 
            "type": "cidr"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "Human-readable description for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "endpoints": {
          "description": "List of endpoints of the same type, for the endpoint group. The\nvalues will depend on type.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "Human-readable name for the VPN endpoint group. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN endpoint group. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The type of the endpoints in the group. A valid value is\n``subnet``, ``cidr``, ``network``, ``router``, or ``vlan``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "tenant_id", 
        "type", 
        "endpoints"
      ], 
      "type": "object"
    }, 
    "createVpnEndpointGroup_201": {
      "properties": {
        "description": {
          "description": "Human-readable description for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "endpoints": {
          "description": "A list of endpoints of the same type for the endpoint group. Theses\nvalues depend on the type.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN endpoint group. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN endpoint group. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The type of the endpoints in the group. A valid value is\n``subnet``, ``cidr``, ``network``, ``router``, or ``vlan``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "type", 
        "endpoints"
      ], 
      "type": "object"
    }, 
    "deleteRouterInterface": {
      "example": {
        "application/json": {
          "subnet_id": "a2f1f29d-571b-4533-907f-5803ab96ead1"
        }
      }, 
      "properties": {
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnet_id", 
        "port_id"
      ], 
      "type": "object"
    }, 
    "deleteRouterInterface_200": {
      "properties": {
        "id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "tenant_id", 
        "port_id", 
        "subnet_id"
      ], 
      "type": "object"
    }, 
    "insert_ruleFirewallPolicy": {
      "example": {
        "application/json": {
          "firewall_rule_id": "7bc34b8c-8d3b-4ada-a9c8-1f4c11c65692", 
          "insert_after": "a08ef905-0ff6-4784-8374-175fffe7dade", 
          "insert_before": ""
        }
      }, 
      "properties": {
        "firewall_rule_id": {
          "description": "The UUID of the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "insert_after": {
          "description": "The UUID of the firewall_rule. A new firewall_rule will be inserted\nafter this firewall_rule.", 
          "format": "", 
          "type": "string"
        }, 
        "insert_before": {
          "description": "The UUID of the firewall_rule. A new firewall_rule will be inserted\nbefore this firewall_rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_rule_id"
      ], 
      "type": "object"
    }, 
    "insert_ruleFirewallPolicy_200": {
      "properties": {
        "audited": {
          "description": "Indicates whether the policy has been audited.\n\nEach time that the firewall policy or its associated rules are\nchanged, the API sets this attribute to ``false``. To audit the\npolicy, the policy owner must explicitly update the policy to set\nthis attribute to ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_list": {
          "description": "A list of the UUIDs for firewall associated with the firewall\npolicy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "firewall_rules": {
          "description": "A list of the UUIDs for firewall rule associated with the firewall\npolicy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether the firewall policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "audited", 
        "description", 
        "firewall_list", 
        "firewall_rules", 
        "id", 
        "name", 
        "shared", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "listBandwidthLimitRules_200": {
      "properties": {
        "bandwidth_limit_rules": {
          "description": "A list of bandwidth limit rules associated with the QoS policy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "max_burst_kbps": {
          "description": "The burst over the maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_kbps": {
          "description": "The maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "bandwidth_limit_rules", 
        "id", 
        "policy_id", 
        "max_kbps", 
        "max_burst_kbps"
      ], 
      "type": "object"
    }, 
    "listDscpMarkingRules_200": {
      "properties": {
        "dscp_mark": {
          "description": "The DSCP mark value.", 
          "format": "", 
          "type": "integer"
        }, 
        "dscp_marking_rules": {
          "description": "A list of DSCP marking rules associated with the QoS policy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "dscp_marking_rules", 
        "id", 
        "policy_id", 
        "dscp_mark"
      ], 
      "type": "object"
    }, 
    "listExtensions_200": {
      "properties": {
        "alias": {
          "description": "The alias for the extension. For example, \"FOXNSOX\", \"os-\navailability-zone\", \"os-extended-quotas\", \"os-share-unmanage\" or\n\"os-used-limits.\"", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The extension description.", 
          "format": "", 
          "type": "string"
        }, 
        "extension": {
          "description": "A list of ``extension`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "links": {
          "description": "The share links.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of the extension. For example, \"Fox In Socks.\"", 
          "format": "", 
          "type": "string"
        }, 
        "updated": {
          "description": "The date and time stamp when the extension was last updated.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "extension", 
        "name", 
        "links", 
        "description", 
        "alias", 
        "updated"
      ], 
      "type": "object"
    }, 
    "listFirewallPolicies_200": {
      "properties": {
        "audited": {
          "description": "Indicates whether the policy has been audited.\n\nEach time that the firewall policy or its associated rules are\nchanged, the API sets this attribute to ``false``. To audit the\npolicy, the policy owner must explicitly update the policy to set\nthis attribute to ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_policies": {
          "description": "A list of ``firewall_policy`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "firewall_rules": {
          "description": "A list of the UUIDs for firewall rule associated with the firewall\npolicy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether the firewall policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_policies", 
        "audited", 
        "description", 
        "firewall_rules", 
        "id", 
        "name", 
        "shared", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "listFirewallRules_200": {
      "properties": {
        "action": {
          "description": "The action that the API performs on traffic that matches the\nfirewall rule. Value is ``allow`` or ``deny``.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human readable description for the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_ip_address": {
          "description": "The destination IPv4 or IPv6 address or CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_port": {
          "description": "The destination port or port range.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this rule is enabled or disabled in the firewall\npolicy.", 
          "format": "", 
          "type": "boolean"
        }, 
        "firewall_policy_id": {
          "description": "Read-only attribute that the API populates with the UUID of the\nfirewall policy when you associate this firewall rule with a\npolicy.\n\nYou can associate a firewall rule with one policy at a time. You\ncan update this association can to a different firewall policy.\n\nIf you do not associate the rule with any policy, this attribute is\n``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "firewalls": {
          "description": "A list of ``firewall_rule`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The generated UUID for the firewall rule object.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP protocol version. Value is ``4`` or ``6``.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human readable name for the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "position": {
          "description": "Read-only attribute that the API assigns to this rule when it\nassociates it with a firewall policy. This value indicates the\nposition of this rule in that firewall policy. This position number\nstarts at 1. If the firewall rule is not associated with any\npolicy, the position is ``null``.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The IP protocol. Value is ``icmp``, ``tcp``, ``udp``, or ``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this firewall rule is shared with other tenants.\nOther tenants can use a shared rule in firewall policies that this\ntenant does not own.", 
          "format": "", 
          "type": "boolean"
        }, 
        "source_ip_address": {
          "description": "The source IPv4 or IPv6 address or CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "source_port": {
          "description": "The source port or port range.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewalls", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "firewall_policy_id", 
        "shared", 
        "protocol", 
        "ip_version", 
        "source_ip_address", 
        "destination_ip_address", 
        "source_port", 
        "destination_port", 
        "position", 
        "action", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "listFirewalls_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the firewall, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_policy_id": {
          "description": "The UUID of the policy that is associated with the firewall.", 
          "format": "", 
          "type": "string"
        }, 
        "firewalls": {
          "description": "A list of ``firewall`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_ids": {
          "description": "A list of UUIDs for routers that are associated with the firewall.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The status of the firewall service. Value is ``ACTIVE``,\n``INACTIVE``, ``ERROR``, ``PENDING_CREATE``, ``PENDING_UPDATE``, or\n``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the firewall service. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewalls", 
        "admin_state_up", 
        "description", 
        "firewall_policy_id", 
        "id", 
        "name", 
        "router_ids", 
        "status", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "listFlavors_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this flavor is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "flavors": {
          "description": "A list of ``flavor`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the flavor. Can be \"\" and non-unique.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profiles": {
          "description": "Service profile UUIDs associated with this flavor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "service_type": {
          "description": "Service type (ex: LOADBALANCERV2) for the flavor.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "flavors", 
        "id", 
        "name", 
        "description", 
        "service_type", 
        "service_profiles", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "listFloatingIps_200": {
      "properties": {
        "fixed_ip_address": {
          "description": "The fixed IP address that is associated with the floating IP\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_ip_address": {
          "description": "The floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_network_id": {
          "description": "The UUID of the network associated with the floating IP.", 
          "format": "", 
          "type": "string"
        }, 
        "floatingips": {
          "description": "A list of ``floatingip`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "floatingips", 
        "id", 
        "status", 
        "router_id", 
        "tenant_id", 
        "floating_network_id", 
        "fixed_ip_address", 
        "floating_ip_address", 
        "port_id"
      ], 
      "type": "object"
    }, 
    "listHealthMonitors_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "A list of ``health_monitor`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "pools": {
          "description": "List of pools that are associated with the health monitor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A string value that must begin with the forward slash\n(/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitors", 
        "id", 
        "tenant_id", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries", 
        "pools"
      ], 
      "type": "object"
    }, 
    "listHealthMonitorsv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "A list of ``health_monitor`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "pools": {
          "description": "List of pools that are associated with the health monitor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A string value that must begin with the forward slash\n(/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitors", 
        "id", 
        "tenant_id", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries", 
        "pools"
      ], 
      "type": "object"
    }, 
    "listIKEPolicies_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1``, which\nis the default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2``. Default is\n``v1``.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicies": {
          "description": "A list of IKE policy objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the VPN service. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ikepolicies", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "auth_algorithm", 
        "encryption_algorithm", 
        "phase1_negotiation_mode", 
        "pfs", 
        "ike_version", 
        "lifetime", 
        "units", 
        "value"
      ], 
      "type": "object"
    }, 
    "listIPSecPolicies_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1``, which is\nthe default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "The encapsulation mode. A valid value is ``tunnel`` or\n``transport``. Default is ``tunnel``.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "ipsecpolicies": {
          "description": "A list of IPSec policy objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP``, ``AH``, or ``AH-\nESP``. Default is ``ESP``.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ipsecpolicies", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "transform_protocol", 
        "encapsulation_mode", 
        "auth_algorithm", 
        "encryption_algorithm", 
        "pfs", 
        "lifetime", 
        "units", 
        "value"
      ], 
      "type": "object"
    }, 
    "listIPSecSiteConnections_200": {
      "properties": {
        "action": {
          "description": "The dead peer detection (DPD) action. A valid value is ``clear``,\n``hold``, ``restart``, ``disabled``, or ``restart-by-peer``.\nDefault value is ``hold``.", 
          "format": "", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up\n(``true``) or down (``false``). If down, the connection does not\nforward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk``, which is the\ndefault.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with dead peer detection (DPD) protocol controls.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicy_id": {
          "description": "The UUID of the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional``. Default is ``bi-directional``.", 
          "format": "", 
          "type": "string"
        }, 
        "interval": {
          "description": "The dead peer detection (DPD) interval, in seconds. A valid value\nis a positive integer. Default is 30.", 
          "format": "", 
          "type": "integer"
        }, 
        "ipsecpolicy_id": {
          "description": "The UUID of the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "local_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private subnets for\nthe local side of the connection. This value is present with the\n``peer_ep_group_id`` parameter unless in backward-compatible mode,\nwhere ``peer_cidrs`` is shown.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) to address fragmentation. The\nminimum value for IPv4 is 68. The minimum value for IPv6 is 1280.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_address": {
          "description": "The peer gateway public IPv4 address, IPv6 address, or FQDN.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "(Deprecated) Unique list of valid peer private CIDRs in the form <\nnet_address > / < prefix > .", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "peer_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private CIDRs in the\nform < net_address > / < prefix > for the peer side of the\nconnection. This value is present with the ``local_ep_group_id``\nparameter unless in backward-compatible mode, where ``peer_cidrs``\nis shown.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_id": {
          "description": "The peer router identity for authentication. Can be an IPv4\naddress, IPv6 address, e-mail address, key ID, or FQDN. Typically,\nthis value matches the ``peer_address`` value.", 
          "format": "", 
          "type": "string"
        }, 
        "psk": {
          "description": "The pre-shared key. A valid value is any string.", 
          "format": "", 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether the IPSec connection is currently operational.\nValue is ``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``,\n``PENDING_CREATE``, ``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The dead peer detection (DPD) timeout, in seconds. A valid value is\na positive integer that is greater than the DPD ``interval`` value.\nDefault is 120.", 
          "format": "", 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "The UUID of the VPN service.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "peer_address", 
        "peer_id", 
        "local_ep_group_id", 
        "peer_ep_group_id", 
        "peer_cidrs", 
        "route_mode", 
        "mtu", 
        "auth_mode", 
        "psk", 
        "initiator", 
        "admin_state_up", 
        "status", 
        "ikepolicy_id", 
        "ipsecpolicy_id", 
        "vpnservice_id", 
        "dpd", 
        "action", 
        "interval", 
        "timeout"
      ], 
      "type": "object"
    }, 
    "listListenersv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the listener, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections permitted for this load balancer.\nDefault is infinite.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_pool_id": {
          "description": "The UUID of default pool. Must have compatible protocol with\nlistener.", 
          "format": "", 
          "type": "string"
        }, 
        "default_tls_container_ref": {
          "description": "A reference to a container of TLS secrets.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Detailed description of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "listeners": {
          "description": "A ``listeners`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "loadbalancers": {
          "description": "A list of load balancer objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The listener name.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol to load balance. A valid value is ``HTTP``, ``HTTPS``,\n``TCP``, or ``TERMINATED_HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The TCP or UDP port on which to listen.", 
          "format": "", 
          "type": "integer"
        }, 
        "sni_container_refs": {
          "description": "A list of references to TLS secrets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the listener. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "listeners", 
        "admin_state_up", 
        "connection_limit", 
        "default_pool_id", 
        "description", 
        "id", 
        "loadbalancers", 
        "name", 
        "protocol", 
        "protocol_port", 
        "tenant_id", 
        "default_tls_container_ref", 
        "sni_container_refs"
      ], 
      "type": "object"
    }, 
    "listLoadBalancersv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The load balancer description.", 
          "format": "", 
          "type": "string"
        }, 
        "flavor": {
          "description": "The UUID of a flavor if set.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the load balancer.", 
          "format": "", 
          "type": "string"
        }, 
        "listeners": {
          "description": "The associated listeners, if any.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "loadbalancers": {
          "description": "A list of load balancer objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The load balancer name.", 
          "format": "", 
          "type": "string"
        }, 
        "operating_status": {
          "description": "The operating status of the load balancer.\n\nThis value is ``ONLINE`` or ``OFFLINE``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The name of the provider.", 
          "format": "", 
          "type": "string"
        }, 
        "provisioning_status": {
          "description": "The provisioning status of the load balancer.\n\nThis value is ``ACTIVE``, ``PENDING_CREATE`` or ``ERROR``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "loadbalancers", 
        "description", 
        "admin_state_up", 
        "tenant_id", 
        "provisioning_status", 
        "listeners", 
        "vip_address", 
        "vip_subnet_id", 
        "id", 
        "operating_status", 
        "name", 
        "provider"
      ], 
      "type": "object"
    }, 
    "listMembers_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the member.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "A list of ``member`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "members", 
        "id", 
        "tenant_id", 
        "pool_id", 
        "address", 
        "protocol_port", 
        "weight", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "listMembersv2_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the member.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "A list of ``member`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "members", 
        "id", 
        "tenant_id", 
        "pool_id", 
        "address", 
        "protocol_port", 
        "weight", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "listMeteringLabelRules_200": {
      "properties": {
        "direction": {
          "description": "Ingress or egress, which is the direction in which the metering\nrule is applied.", 
          "format": "", 
          "type": "string"
        }, 
        "excluded ": {
          "description": "Indicates whether to count the traffic of a specific IP address\nwith the ``remote_ip_prefix`` value. Default is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the metering label rule.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_label_id": {
          "description": "The metering label UUID to associate with this metering rule.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_label_rules": {
          "description": "A list of ``metering_label_rule`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this metering rule packet.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "metering_label_rules", 
        "remote_ip_prefix", 
        "direction", 
        "metering_label_id", 
        "id", 
        "excluded "
      ], 
      "type": "object"
    }, 
    "listMeteringLabels_200": {
      "properties": {
        "description": {
          "description": "Description for the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_labels": {
          "description": "A list of ``metering_label`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this metering label is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The tenant UUID for the metering label.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "metering_labels", 
        "tenant_id", 
        "description", 
        "name", 
        "id", 
        "shared"
      ], 
      "type": "object"
    }, 
    "listMultiNetworks_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "networks": {
          "description": "A list of ``network`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "segments": {
          "description": "A list of provider ``segment`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "networks", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled", 
        "segments"
      ], 
      "type": "object"
    }, 
    "listPolicies_200": {
      "properties": {
        "bandwidth_limit_rules": {
          "description": "A list of bandwidth limit rules associated with the QoS policy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "description": {
          "description": "The description of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "dscp_mark": {
          "description": "The DSCP mark value.", 
          "format": "", 
          "type": "integer"
        }, 
        "dscp_marking_rules": {
          "description": "A list of DSCP marking rules associated with the QoS policy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "max_burst_kbps": {
          "description": "The burst over the maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_kbps": {
          "description": "The maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The name of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "policies": {
          "description": "A list of QoS ``policy`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the QoS policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policies", 
        "tenant_id", 
        "id", 
        "name", 
        "description", 
        "shared", 
        "bandwidth_limit_rules", 
        "dscp_marking_rules", 
        "policy_id", 
        "max_kbps", 
        "max_burst_kbps", 
        "dscp_mark"
      ], 
      "type": "object"
    }, 
    "listPools_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "List of health monitors that are associated with the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "health_monitors_status": {
          "description": "The statuses of the health monitors that are associated with the\npool.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_algorithm": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "The list of members that belong to the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pools": {
          "description": "A list of ``pool`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The load-balancer provider.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The UUID of the virtual IP (VIP) address.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pools", 
        "status", 
        "lb_algorithm", 
        "protocol", 
        "description", 
        "subnet_id", 
        "tenant_id", 
        "admin_state_up", 
        "name", 
        "members", 
        "status_description", 
        "id", 
        "vip_id", 
        "health_monitors_status", 
        "provider"
      ], 
      "type": "object"
    }, 
    "listPoolsv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "The UUID for the associated health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "The list of members that belong to the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pools": {
          "description": "A list of ``pool`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The UUID of the virtual IP (VIP) address.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pools", 
        "admin_state_up", 
        "description", 
        "status", 
        "health_monitors", 
        "id", 
        "lb_method", 
        "members", 
        "vip_id", 
        "subnet_id", 
        "protocol", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "listProviderNetworks_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "availability_zone_hints": {
          "description": "The availability zone candidate for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "availability_zones": {
          "description": "The availability zone for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "networks": {
          "description": "A list of ``network`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "networks", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled", 
        "availability_zone_hints", 
        "availability_zones"
      ], 
      "type": "object"
    }, 
    "listQuotasForTenant_200": {
      "properties": {
        "floatingip": {
          "description": "The number of floating IP addresses allowed for each tenant.\n\nA value of ``-1`` means no limit.", 
          "format": "", 
          "type": "integer"
        }, 
        "network": {
          "description": "The number of networks allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "port": {
          "description": "The number of ports allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "quota": {
          "description": "A ``quota`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "rbac_policy": {
          "description": "The number of role-based access control (RBAC) policies for each\ntenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "router": {
          "description": "The number of routers allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "security_group": {
          "description": "The number of security groups allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "security_group_rule": {
          "description": "The number of security group rules allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnet": {
          "description": "The number of subnets allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnetpool": {
          "description": "The number of subnet pools allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "quota", 
        "subnet", 
        "network", 
        "floatingip", 
        "subnetpool", 
        "security_group_rule", 
        "security_group", 
        "router", 
        "rbac_policy", 
        "port"
      ], 
      "type": "object"
    }, 
    "listQuotas_200": {
      "properties": {
        "floatingip": {
          "description": "The number of floating IP addresses allowed for each tenant.\n\nA value of ``-1`` means no limit.", 
          "format": "", 
          "type": "integer"
        }, 
        "network": {
          "description": "The number of networks allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "port": {
          "description": "The number of ports allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "quotas": {
          "description": "A list of quota objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "rbac_policy": {
          "description": "The number of role-based access control (RBAC) policies for each\ntenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "router": {
          "description": "The number of routers allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "security_group": {
          "description": "The number of security groups allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "security_group_rule": {
          "description": "The number of security group rules allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnet": {
          "description": "The number of subnets allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnetpool": {
          "description": "The number of subnet pools allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "quotas", 
        "subnet", 
        "network", 
        "floatingip", 
        "subnetpool", 
        "security_group_rule", 
        "security_group", 
        "router", 
        "rbac_policy", 
        "port"
      ], 
      "type": "object"
    }, 
    "listRouters_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the router, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "availability_zone_hints": {
          "description": "The availability zone candidate for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "availability_zones": {
          "description": "The availability zone for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "distributed": {
          "description": "If ``true``, indicates a distributed router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "enable_snat": {
          "description": "Enable Source NAT (SNAT) attribute, a part of ext-gw-mode\nextension. When a gateway is attached to a router using an L3\nextension, Network Address Translation (NAT) is enabled for traffic\ngenerated by subnets attached to the router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "external_fixed_ips": {
          "description": "The IP address parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "external_gateway_info": {
          "description": "The external gateway parameters, which include the ``network_id``,\n``enable_snat`` and ``external_fixed_ips`` parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "ha": {
          "description": "If ``true``, indicates a highly-available router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The router name.", 
          "format": "", 
          "type": "string"
        }, 
        "routers": {
          "description": "A list of ``router`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "routes": {
          "description": "The extra routes configuration for L3 router.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "routers", 
        "status", 
        "external_gateway_info", 
        "enable_snat", 
        "external_fixed_ips", 
        "availability_zone_hints", 
        "availability_zones", 
        "name", 
        "admin_state_up", 
        "tenant_id", 
        "distributed", 
        "routes", 
        "ha", 
        "id"
      ], 
      "type": "object"
    }, 
    "listSecGroupRules_200": {
      "properties": {
        "direction": {
          "description": "Ingress or egress: the direction in which the security group rule\nis applied. For a compute instance, an ingress security group rule\nis applied to incoming (ingress) traffic for that instance. An\negress rule is applied to traffic leaving the instance.", 
          "format": "", 
          "type": "string"
        }, 
        "ethertype": {
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match\nthe ingress or egress rules.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the security group rule.", 
          "format": "", 
          "type": "string"
        }, 
        "port_range_max": {
          "description": "The maximum port number in the range that is matched by the\nsecurity group rule. The ``port_range_min`` attribute constrains\nthe ``port_range_max`` attribute. If the protocol is ICMP, this\nvalue must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "port_range_min": {
          "description": "The minimum port number in the range that is matched by the\nsecurity group rule. If the protocol is TCP or UDP, this value must\nbe less than or equal to the ``port_range_max`` attribute value. If\nthe protocol is ICMP, this value must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The protocol that is matched by the security group rule. Value is\n``null``, ``icmp``, ``icmpv6``, ``tcp``, or ``udp``.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_group_id": {
          "description": "The remote group UUID to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body. This attribute\nvalue matches the IP prefix as the source IP address of the IP\npacket.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_id": {
          "description": "The UUID of the security group.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_rules": {
          "description": "A list of ``security_group_rule`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the security group rule. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "security_group_rules", 
        "direction", 
        "ethertype", 
        "id", 
        "port_range_max", 
        "port_range_min", 
        "protocol", 
        "remote_group_id", 
        "remote_ip_prefix", 
        "security_group_id", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "listSecGroups_200": {
      "properties": {
        "description": {
          "description": "The security group description.", 
          "format": "", 
          "type": "string"
        }, 
        "direction": {
          "description": "Ingress or egress: the direction in which the security group rule\nis applied. For a compute instance, an ingress security group rule\nis applied to incoming (ingress) traffic for that instance. An\negress rule is applied to traffic leaving the instance.", 
          "format": "", 
          "type": "string"
        }, 
        "ethertype": {
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match\nthe ingress or egress rules.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the security group rule.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The security group name.", 
          "format": "", 
          "type": "string"
        }, 
        "port_range_max": {
          "description": "The maximum port number in the range that is matched by the\nsecurity group rule. The ``port_range_min`` attribute constrains\nthe ``port_range_max`` attribute. If the protocol is ICMP, this\nvalue must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "port_range_min": {
          "description": "The minimum port number in the range that is matched by the\nsecurity group rule. If the protocol is TCP or UDP, this value must\nbe less than or equal to the ``port_range_max`` attribute value. If\nthe protocol is ICMP, this value must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The protocol that is matched by the security group rule. Value is\n``null``, ``icmp``, ``icmpv6``, ``tcp``, or ``udp``.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_group_id": {
          "description": "The remote group UUID to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body. This attribute\nvalue matches the IP prefix as the source IP address of the IP\npacket.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_id": {
          "description": "The UUID of the security group.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_rules": {
          "description": "A list of ``security_group_rule`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "security_groups": {
          "description": "A list of ``security_group`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the security group rule. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "security_groups", 
        "description", 
        "id", 
        "name", 
        "security_group_rules", 
        "direction", 
        "ethertype", 
        "port_range_max", 
        "port_range_min", 
        "protocol", 
        "remote_group_id", 
        "remote_ip_prefix", 
        "security_group_id", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "listServiceProfiles_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "driver": {
          "description": "Driver to associate with profile.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this service profile is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "metainfo": {
          "description": "JSON metainfo to associate with profile.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profiles": {
          "description": "A list of ``service_profile`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "service_profiles", 
        "id", 
        "description", 
        "driver", 
        "metainfo", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "listSubnetPools_200": {
      "properties": {
        "address_scope_id": {
          "description": "The address scope.", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "Time at which subnetpool has been created.", 
          "format": "", 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are omitted when you create the subnet.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "type": "integer"
        }, 
        "id": {
          "description": "The UUID of the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP address family of the list of prefixes passed to the\n``prefixes`` attribute.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.", 
          "format": "", 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The subnet pool name.", 
          "format": "", 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes that are assigned to the subnet pool. The\nAPI merges adjacent prefixes and treats them as a single prefix.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "shared": {
          "description": "Indicates whether this subnet pool is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "subnetpools": {
          "description": "A list of ``subnetpool`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "Time at which subnetpool has been updated.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnetpools", 
        "min_prefixlen", 
        "address_scope_id", 
        "default_prefixlen", 
        "id", 
        "max_prefixlen", 
        "name", 
        "created_at", 
        "updated_at", 
        "default_quota", 
        "tenant_id", 
        "prefixes", 
        "ip_version", 
        "shared"
      ], 
      "type": "object"
    }, 
    "listVIPs_200": {
      "properties": {
        "address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the VIP. A valid value is up (``true``)\nor down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections allowed for the VIP. Default is\n``-1``, meaning no limit.", 
          "format": "", 
          "type": "integer"
        }, 
        "description": {
          "description": "Human-readable description for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VIP. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool_id": {
          "description": "The UUID of the pool with which the VIP is associated.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the VIP port.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the virtual IP (VIP) address. A valid value is\n``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port on which to listen to client traffic that is associated\nwith the virtual IP (VIP) address. A valid value is from 0 to\n65535.", 
          "format": "", 
          "type": "integer"
        }, 
        "session_persistence": {
          "description": "Session persistence parameters for the VIP. Omit the\n``session_persistence`` parameter to prevent session persistence.\nWhen no session persistence is used, the ``session_persistence``\nparameter does not appear in the API response. To clear session\npersistence for the VIP, set the ``session_persistence`` parameter\nto ``null`` in a VIP update request.", 
          "format": "", 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the VIP. Indicates whether the VIP is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vips": {
          "description": "A list of ``vip`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "vips", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "subnet_id", 
        "port_id", 
        "address", 
        "protocol", 
        "protocol_port", 
        "pool_id", 
        "session_persistence", 
        "connection_limit", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "listVPNServices_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up (``true``)\nor down (``false``). If down, the port does not forward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "external_v4_ip": {
          "description": "Read-only external (public) IPv4 address that is used for the VPN\nservice. The VPN plugin sets this address if an IPv4 interface is\navailable.", 
          "format": "", 
          "type": "string"
        }, 
        "external_v6_ip": {
          "description": "Read-only external (public) IPv6 address that is used for the VPN\nservice. The VPN plugin sets this address if an IPv6 interface is\navailable.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router into which the VPN service is inserted.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether IPSec VPN service is currently operational. Value\nis ``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``, ``PENDING_CREATE``,\n``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "(Deprecated) The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the VPN service. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vpnservices": {
          "description": "A list of VPN service objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "vpnservices", 
        "router_id", 
        "status", 
        "name", 
        "admin_state_up", 
        "external_v4_ip", 
        "external_v6_ip", 
        "subnet_id", 
        "tenant_id", 
        "id", 
        "description"
      ], 
      "type": "object"
    }, 
    "listVTNetworks_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "networks": {
          "description": "A list of ``network`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }, 
        "vlan_transparent": {
          "description": "The state of the network, which is VLAN transparent (``true``) or\nnot VLAN transparent (``false``).", 
          "format": "", 
          "type": "boolean"
        }
      }, 
      "required": [
        "networks", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled", 
        "vlan_transparent"
      ], 
      "type": "object"
    }, 
    "listVpnEndpointGroups_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "endpoints": {
          "description": "A list of endpoints of the same type for the endpoint group. Theses\nvalues depend on the type.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN endpoint group. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN endpoint group. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The type of the endpoints in the group. A valid value is\n``subnet``, ``cidr``, ``network``, ``router``, or ``vlan``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "type", 
        "endpoints"
      ], 
      "type": "object"
    }, 
    "remove_ruleFirewallPolicy": {
      "example": {
        "application/json": {
          "firewall_rule_id": "7bc34b8c-8d3b-4ada-a9c8-1f4c11c65692"
        }
      }, 
      "properties": {
        "firewall_rule_id": {
          "description": "The UUID of the firewall rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_rule_id"
      ], 
      "type": "object"
    }, 
    "remove_ruleFirewallPolicy_200": {
      "properties": {
        "audited": {
          "description": "Indicates whether the policy has been audited.\n\nEach time that the firewall policy or its associated rules are\nchanged, the API sets this attribute to ``false``. To audit the\npolicy, the policy owner must explicitly update the policy to set\nthis attribute to ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_list": {
          "description": "A list of the UUIDs for firewall associated with the firewall\npolicy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "firewall_rules": {
          "description": "A list of the UUIDs for firewall rule associated with the firewall\npolicy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether the firewall policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "audited", 
        "description", 
        "firewall_list", 
        "firewall_rules", 
        "id", 
        "name", 
        "shared", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "showBandwidthLimitRule_200": {
      "properties": {
        "bandwidth_limit_rule": {
          "description": "A ``bandwidth_limit_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "max_burst_kbps": {
          "description": "The burst over the maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_kbps": {
          "description": "The maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "bandwidth_limit_rule", 
        "id", 
        "policy_id", 
        "max_kbps", 
        "max_burst_kbps"
      ], 
      "type": "object"
    }, 
    "showDscpMarkingRule_200": {
      "properties": {
        "dscp_mark": {
          "description": "The DSCP mark value.", 
          "format": "", 
          "type": "integer"
        }, 
        "dscp_marking_rule": {
          "description": "A ``dscp_marking_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "dscp_marking_rule", 
        "id", 
        "policy_id", 
        "dscp_mark"
      ], 
      "type": "object"
    }, 
    "showExtension_200": {
      "properties": {
        "alias": {
          "description": "The alias for the extension. For example, \"FOXNSOX\", \"os-\navailability-zone\", \"os-extended-quotas\", \"os-share-unmanage\" or\n\"os-used-limits.\"", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The extension description.", 
          "format": "", 
          "type": "string"
        }, 
        "extension": {
          "description": "A list of ``extension`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "links": {
          "description": "The share links.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of the extension. For example, \"Fox In Socks.\"", 
          "format": "", 
          "type": "string"
        }, 
        "updated": {
          "description": "The date and time stamp when the extension was last updated.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "extension", 
        "name", 
        "links", 
        "description", 
        "alias", 
        "updated"
      ], 
      "type": "object"
    }, 
    "showFirewallPolicy_200": {
      "properties": {
        "audited": {
          "description": "Indicates whether the policy has been audited.\n\nEach time that the firewall policy or its associated rules are\nchanged, the API sets this attribute to ``false``. To audit the\npolicy, the policy owner must explicitly update the policy to set\nthis attribute to ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_policy": {
          "description": "A ``firewall_policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_rules": {
          "description": "A list of the UUIDs for firewall rule associated with the firewall\npolicy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether the firewall policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_policy", 
        "audited", 
        "description", 
        "firewall_rules", 
        "id", 
        "name", 
        "shared", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "showFirewallRule_200": {
      "properties": {
        "action": {
          "description": "The action that the API performs on traffic that matches the\nfirewall rule. Value is ``allow`` or ``deny``.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human readable description for the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_ip_address": {
          "description": "The destination IPv4 or IPv6 address or CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_port": {
          "description": "The destination port or port range.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this rule is enabled or disabled in the firewall\npolicy.", 
          "format": "", 
          "type": "boolean"
        }, 
        "firewall_policy_id": {
          "description": "Read-only attribute that the API populates with the UUID of the\nfirewall policy when you associate this firewall rule with a\npolicy.\n\nYou can associate a firewall rule with one policy at a time. You\ncan update this association can to a different firewall policy.\n\nIf you do not associate the rule with any policy, this attribute is\n``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_rule": {
          "description": "A ``firewall_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The generated UUID for the firewall rule object.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP protocol version. Value is ``4`` or ``6``.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human readable name for the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "position": {
          "description": "Read-only attribute that the API assigns to this rule when it\nassociates it with a firewall policy. This value indicates the\nposition of this rule in that firewall policy. This position number\nstarts at 1. If the firewall rule is not associated with any\npolicy, the position is ``null``.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The IP protocol. Value is ``icmp``, ``tcp``, ``udp``, or ``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this firewall rule is shared with other tenants.\nOther tenants can use a shared rule in firewall policies that this\ntenant does not own.", 
          "format": "", 
          "type": "boolean"
        }, 
        "source_ip_address": {
          "description": "The source IPv4 or IPv6 address or CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "source_port": {
          "description": "The source port or port range.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_rule", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "firewall_policy_id", 
        "shared", 
        "protocol", 
        "ip_version", 
        "source_ip_address", 
        "destination_ip_address", 
        "source_port", 
        "destination_port", 
        "position", 
        "action", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "showFirewall_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the firewall, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall": {
          "description": "A ``firewall`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_policy_id": {
          "description": "The UUID of the policy that is associated with the firewall.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_ids": {
          "description": "A list of UUIDs for routers that are associated with the firewall.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The status of the firewall service. Value is ``ACTIVE``,\n``INACTIVE``, ``ERROR``, ``PENDING_CREATE``, ``PENDING_UPDATE``, or\n``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the firewall service. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall", 
        "admin_state_up", 
        "description", 
        "firewall_policy_id", 
        "id", 
        "name", 
        "router_ids", 
        "status", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "showFlavor_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this flavor is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "flavor": {
          "description": "A ``flavor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the flavor. Can be \"\" and non-unique.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profiles": {
          "description": "Service profile UUIDs associated with this flavor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "service_type": {
          "description": "Service type (ex: LOADBALANCERV2) for the flavor.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "flavor", 
        "id", 
        "name", 
        "description", 
        "service_type", 
        "service_profiles", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "showFloatingIp_200": {
      "properties": {
        "fixed_ip_address": {
          "description": "The fixed IP address that is associated with the floating IP\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_ip_address": {
          "description": "The floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_network_id": {
          "description": "The UUID of the network associated with the floating IP.", 
          "format": "", 
          "type": "string"
        }, 
        "floatingip": {
          "description": "A ``floatingip`` object. When you associate a floating IP address\nwith a VM, the instance has the same public IP address each time\nthat it boots, basically to maintain a consistent IP address for\nmaintaining DNS assignment.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "floatingip", 
        "id", 
        "status", 
        "floating_network_id", 
        "router_id", 
        "fixed_ip_address", 
        "floating_ip_address", 
        "tenant_id", 
        "port_id"
      ], 
      "type": "object"
    }, 
    "showHealthMonitor_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "pools": {
          "description": "List of pools that are associated with the health monitor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A string value that must begin with the forward slash\n(/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "id", 
        "tenant_id", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries", 
        "pools"
      ], 
      "type": "object"
    }, 
    "showHealthMonitorv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "pools": {
          "description": "List of pools that are associated with the health monitor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A string value that must begin with the forward slash\n(/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "id", 
        "tenant_id", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries", 
        "pools"
      ], 
      "type": "object"
    }, 
    "showIKEPolicy_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1``, which\nis the default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2``. Default is\n``v1``.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicies": {
          "description": "A list of IKE policy objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "ikepolicy": {
          "description": "An ``ikepolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the VPN service. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ikepolicy", 
        "ikepolicies", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "auth_algorithm", 
        "encryption_algorithm", 
        "phase1_negotiation_mode", 
        "pfs", 
        "ike_version", 
        "lifetime", 
        "units", 
        "value"
      ], 
      "type": "object"
    }, 
    "showIPSecPolicy_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1``, which is\nthe default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "The encapsulation mode. A valid value is ``tunnel`` or\n``transport``. Default is ``tunnel``.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "ipsecpolicies": {
          "description": "A list of IPSec policy objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "ipsecpolicy": {
          "description": "An ``ipsecpolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP``, ``AH``, or ``AH-\nESP``. Default is ``ESP``.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ipsecpolicy", 
        "ipsecpolicies", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "transform_protocol", 
        "encapsulation_mode", 
        "auth_algorithm", 
        "encryption_algorithm", 
        "pfs", 
        "lifetime", 
        "units", 
        "value"
      ], 
      "type": "object"
    }, 
    "showIPSecSiteConnection_200": {
      "properties": {
        "action": {
          "description": "The dead peer detection (DPD) action. A valid value is ``clear``,\n``hold``, ``restart``, ``disabled``, or ``restart-by-peer``.\nDefault value is ``hold``.", 
          "format": "", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up\n(``true``) or down (``false``). If down, the connection does not\nforward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk``, which is the\ndefault.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with dead peer detection (DPD) protocol controls.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicy_id": {
          "description": "The UUID of the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional``. Default is ``bi-directional``.", 
          "format": "", 
          "type": "string"
        }, 
        "interval": {
          "description": "The dead peer detection (DPD) interval, in seconds. A valid value\nis a positive integer. Default is 30.", 
          "format": "", 
          "type": "integer"
        }, 
        "ipsec_site_connection": {
          "description": "An ``ipsec_site_connection`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "ipsecpolicy_id": {
          "description": "The UUID of the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "local_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private subnets for\nthe local side of the connection. This value is present with the\n``peer_ep_group_id`` parameter unless in backward-compatible mode,\nwhere ``peer_cidrs`` is shown.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) to address fragmentation. The\nminimum value for IPv4 is 68. The minimum value for IPv6 is 1280.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_address": {
          "description": "The peer gateway public IPv4 address, IPv6 address, or FQDN.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "(Deprecated) Unique list of valid peer private CIDRs in the form <\nnet_address > / < prefix > .", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "peer_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private CIDRs in the\nform < net_address > / < prefix > for the peer side of the\nconnection. This value is present with the ``local_ep_group_id``\nparameter unless in backward-compatible mode, where ``peer_cidrs``\nis shown.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_id": {
          "description": "The peer router identity for authentication. Can be an IPv4\naddress, IPv6 address, e-mail address, key ID, or FQDN. Typically,\nthis value matches the ``peer_address`` value.", 
          "format": "", 
          "type": "string"
        }, 
        "psk": {
          "description": "The pre-shared key. A valid value is any string.", 
          "format": "", 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether the IPSec connection is currently operational.\nValue is ``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``,\n``PENDING_CREATE``, ``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The dead peer detection (DPD) timeout, in seconds. A valid value is\na positive integer that is greater than the DPD ``interval`` value.\nDefault is 120.", 
          "format": "", 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "The UUID of the VPN service.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "ipsec_site_connection", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "peer_address", 
        "peer_id", 
        "local_ep_group_id", 
        "peer_ep_group_id", 
        "peer_cidrs", 
        "route_mode", 
        "mtu", 
        "auth_mode", 
        "psk", 
        "initiator", 
        "admin_state_up", 
        "status", 
        "ikepolicy_id", 
        "ipsecpolicy_id", 
        "vpnservice_id", 
        "dpd", 
        "action", 
        "interval", 
        "timeout"
      ], 
      "type": "object"
    }, 
    "showListenerv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the listener, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections permitted for this load balancer.\nDefault is infinite.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_pool_id": {
          "description": "The UUID of default pool. Must have compatible protocol with\nlistener.", 
          "format": "", 
          "type": "string"
        }, 
        "default_tls_container_ref": {
          "description": "A reference to a container of TLS secrets.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Detailed description of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "listener": {
          "description": "A ``listener`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "loadbalancers": {
          "description": "A list of load balancer objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The listener name.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol to load balance. A valid value is ``HTTP``, ``HTTPS``,\n``TCP``, or ``TERMINATED_HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The TCP or UDP port on which to listen.", 
          "format": "", 
          "type": "integer"
        }, 
        "sni_container_refs": {
          "description": "A list of references to TLS secrets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the listener. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "listener", 
        "admin_state_up", 
        "connection_limit", 
        "default_pool_id", 
        "description", 
        "id", 
        "loadbalancers", 
        "name", 
        "protocol", 
        "protocol_port", 
        "tenant_id", 
        "default_tls_container_ref", 
        "sni_container_refs"
      ], 
      "type": "object"
    }, 
    "showLoadBalancerStatusTree_200": {
      "properties": {
        "healthmonitor": {
          "description": "The associated healthmonitor, if any.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the load balancer.", 
          "format": "", 
          "type": "string"
        }, 
        "listeners": {
          "description": "The associated listeners, if any.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "members": {
          "description": "The associated members, if any.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "operating_status": {
          "description": "The operating status of the load balancer.\n\nThis value is ``ONLINE`` or ``OFFLINE``.", 
          "format": "", 
          "type": "string"
        }, 
        "pools": {
          "description": "The associated pools, if any.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "provisioning_status": {
          "description": "The provisioning status of the load balancer.\n\nThis value is ``ACTIVE``, ``PENDING_CREATE`` or ``ERROR``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "provisioning_status", 
        "listeners", 
        "pools", 
        "members", 
        "healthmonitor", 
        "operating_status"
      ], 
      "type": "object"
    }, 
    "showLoadBalancerv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The load balancer description.", 
          "format": "", 
          "type": "string"
        }, 
        "flavor": {
          "description": "The UUID of a flavor if set.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the load balancer.", 
          "format": "", 
          "type": "string"
        }, 
        "listeners": {
          "description": "The associated listeners, if any.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "loadbalancer": {
          "description": "A ``loadbalancer`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The load balancer name.", 
          "format": "", 
          "type": "string"
        }, 
        "operating_status": {
          "description": "The operating status of the load balancer.\n\nThis value is ``ONLINE`` or ``OFFLINE``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The name of the provider.", 
          "format": "", 
          "type": "string"
        }, 
        "provisioning_status": {
          "description": "The provisioning status of the load balancer.\n\nThis value is ``ACTIVE``, ``PENDING_CREATE`` or ``ERROR``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "loadbalancer", 
        "description", 
        "admin_state_up", 
        "tenant_id", 
        "provisioning_status", 
        "listeners", 
        "vip_address", 
        "vip_subnet_id", 
        "id", 
        "operating_status", 
        "name", 
        "provider"
      ], 
      "type": "object"
    }, 
    "showMember_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the member.", 
          "format": "", 
          "type": "string"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member", 
        "id", 
        "tenant_id", 
        "pool_id", 
        "address", 
        "protocol_port", 
        "weight", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "showMemberv2_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the member.", 
          "format": "", 
          "type": "string"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member", 
        "id", 
        "tenant_id", 
        "pool_id", 
        "address", 
        "protocol_port", 
        "weight", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "showMeteringLabel_200": {
      "properties": {
        "description": {
          "description": "Description for the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "metering_label": {
          "description": "A ``metering_label`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the metering label.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this metering label is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The tenant UUID for the metering label.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "metering_label", 
        "tenant_id", 
        "description", 
        "name", 
        "id", 
        "shared"
      ], 
      "type": "object"
    }, 
    "showMultiNetwork_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "segments": {
          "description": "A list of provider ``segment`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "network", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled", 
        "segments"
      ], 
      "type": "object"
    }, 
    "showPolicy_200": {
      "properties": {
        "bandwidth_limit_rules": {
          "description": "A list of bandwidth limit rules associated with the QoS policy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "description": {
          "description": "The description of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "dscp_mark": {
          "description": "The DSCP mark value.", 
          "format": "", 
          "type": "integer"
        }, 
        "dscp_marking_rules": {
          "description": "A list of DSCP marking rules associated with the QoS policy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "max_burst_kbps": {
          "description": "The burst over the maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_kbps": {
          "description": "The maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The name of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "policy": {
          "description": "A QoS ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the QoS policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy", 
        "tenant_id", 
        "id", 
        "name", 
        "description", 
        "shared", 
        "bandwidth_limit_rules", 
        "dscp_marking_rules", 
        "policy_id", 
        "max_kbps", 
        "max_burst_kbps", 
        "dscp_mark"
      ], 
      "type": "object"
    }, 
    "showPool_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "List of health monitors that are associated with the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "health_monitors_status": {
          "description": "The statuses of the health monitors that are associated with the\npool.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_algorithm": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "The list of members that belong to the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool": {
          "description": "A ``pool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The load-balancer provider.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The UUID of the virtual IP (VIP) address.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pool", 
        "status", 
        "lb_algorithm", 
        "protocol", 
        "description", 
        "subnet_id", 
        "tenant_id", 
        "admin_state_up", 
        "name", 
        "members", 
        "status_description", 
        "id", 
        "vip_id", 
        "health_monitors_status", 
        "provider"
      ], 
      "type": "object"
    }, 
    "showPoolv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "The UUID for the associated health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "The list of members that belong to the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pools": {
          "description": "A list of ``pool`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The UUID of the virtual IP (VIP) address.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pools", 
        "admin_state_up", 
        "description", 
        "status", 
        "health_monitors", 
        "id", 
        "lb_method", 
        "members", 
        "vip_id", 
        "subnet_id", 
        "protocol", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "showProviderNetwork_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "availability_zone_hints": {
          "description": "The availability zone candidate for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "availability_zones": {
          "description": "The availability zone for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "network", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled", 
        "availability_zone_hints", 
        "availability_zones"
      ], 
      "type": "object"
    }, 
    "showRouter_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the router, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "availability_zone_hints": {
          "description": "The availability zone candidate for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "availability_zones": {
          "description": "The availability zone for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "distributed": {
          "description": "If ``true``, indicates a distributed router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "enable_snat": {
          "description": "Enable Source NAT (SNAT) attribute, a part of ext-gw-mode\nextension. When a gateway is attached to a router using an L3\nextension, Network Address Translation (NAT) is enabled for traffic\ngenerated by subnets attached to the router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "external_fixed_ips": {
          "description": "The IP address parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "external_gateway_info": {
          "description": "The external gateway parameters, which include the ``network_id``,\n``enable_snat`` and ``external_fixed_ips`` parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "ha": {
          "description": "If ``true``, indicates a highly-available router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The router name.", 
          "format": "", 
          "type": "string"
        }, 
        "router": {
          "description": "A ``router`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "routes": {
          "description": "The extra routes configuration for L3 router.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "router", 
        "status", 
        "external_gateway_info", 
        "enable_snat", 
        "external_fixed_ips", 
        "availability_zone_hints", 
        "availability_zones", 
        "name", 
        "admin_state_up", 
        "tenant_id", 
        "distributed", 
        "routes", 
        "ha", 
        "id"
      ], 
      "type": "object"
    }, 
    "showSecGroupRule_200": {
      "properties": {
        "direction": {
          "description": "Ingress or egress: the direction in which the security group rule\nis applied. For a compute instance, an ingress security group rule\nis applied to incoming (ingress) traffic for that instance. An\negress rule is applied to traffic leaving the instance.", 
          "format": "", 
          "type": "string"
        }, 
        "ethertype": {
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match\nthe ingress or egress rules.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the security group rule.", 
          "format": "", 
          "type": "string"
        }, 
        "port_range_max": {
          "description": "The maximum port number in the range that is matched by the\nsecurity group rule. The ``port_range_min`` attribute constrains\nthe ``port_range_max`` attribute. If the protocol is ICMP, this\nvalue must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "port_range_min": {
          "description": "The minimum port number in the range that is matched by the\nsecurity group rule. If the protocol is TCP or UDP, this value must\nbe less than or equal to the ``port_range_max`` attribute value. If\nthe protocol is ICMP, this value must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The protocol that is matched by the security group rule. Value is\n``null``, ``icmp``, ``icmpv6``, ``tcp``, or ``udp``.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_group_id": {
          "description": "The remote group UUID to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body. This attribute\nvalue matches the IP prefix as the source IP address of the IP\npacket.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_id": {
          "description": "The UUID of the security group.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_rule": {
          "description": "A ``security_group_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the security group rule. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "security_group_rule", 
        "direction", 
        "ethertype", 
        "id", 
        "port_range_max", 
        "port_range_min", 
        "protocol", 
        "remote_group_id", 
        "remote_ip_prefix", 
        "security_group_id", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "showSecGroup_200": {
      "properties": {
        "description": {
          "description": "The security group description.", 
          "format": "", 
          "type": "string"
        }, 
        "direction": {
          "description": "Ingress or egress: the direction in which the security group rule\nis applied. For a compute instance, an ingress security group rule\nis applied to incoming (ingress) traffic for that instance. An\negress rule is applied to traffic leaving the instance.", 
          "format": "", 
          "type": "string"
        }, 
        "ethertype": {
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match\nthe ingress or egress rules.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the security group rule.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The security group name.", 
          "format": "", 
          "type": "string"
        }, 
        "port_range_max": {
          "description": "The maximum port number in the range that is matched by the\nsecurity group rule. The ``port_range_min`` attribute constrains\nthe ``port_range_max`` attribute. If the protocol is ICMP, this\nvalue must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "port_range_min": {
          "description": "The minimum port number in the range that is matched by the\nsecurity group rule. If the protocol is TCP or UDP, this value must\nbe less than or equal to the ``port_range_max`` attribute value. If\nthe protocol is ICMP, this value must be an ICMP type.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The protocol that is matched by the security group rule. Value is\n``null``, ``icmp``, ``icmpv6``, ``tcp``, or ``udp``.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_group_id": {
          "description": "The remote group UUID to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body.", 
          "format": "", 
          "type": "string"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to associate with this security group rule.\nYou can specify either the ``remote_group_id`` or\n``remote_ip_prefix`` attribute in the request body. This attribute\nvalue matches the IP prefix as the source IP address of the IP\npacket.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group": {
          "description": "A ``security_group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "security_group_id": {
          "description": "The UUID of the security group.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group_rules": {
          "description": "A list of ``security_group_rule`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the security group rule. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "security_group", 
        "description", 
        "id", 
        "name", 
        "security_group_rules", 
        "direction", 
        "ethertype", 
        "port_range_max", 
        "port_range_min", 
        "protocol", 
        "remote_group_id", 
        "remote_ip_prefix", 
        "security_group_id", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "showServiceProfile_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "driver": {
          "description": "Driver to associate with profile.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this service profile is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "metainfo": {
          "description": "JSON metainfo to associate with profile.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profile": {
          "description": "A ``service_profile`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "service_profile", 
        "id", 
        "description", 
        "driver", 
        "metainfo", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "showSubnetPool_200": {
      "properties": {
        "address_scope_id": {
          "description": "The address scope.", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "Time at which subnetpool has been created.", 
          "format": "", 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are omitted when you create the subnet.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "type": "integer"
        }, 
        "id": {
          "description": "The UUID of the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP address family of the list of prefixes passed to the\n``prefixes`` attribute.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.", 
          "format": "", 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The subnet pool name.", 
          "format": "", 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes that are assigned to the subnet pool. The\nAPI merges adjacent prefixes and treats them as a single prefix.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "shared": {
          "description": "Indicates whether this subnet pool is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "Time at which subnetpool has been updated.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnetpool", 
        "min_prefixlen", 
        "address_scope_id", 
        "default_prefixlen", 
        "id", 
        "max_prefixlen", 
        "name", 
        "created_at", 
        "updated_at", 
        "default_quota", 
        "tenant_id", 
        "prefixes", 
        "ip_version", 
        "shared"
      ], 
      "type": "object"
    }, 
    "showVIP_200": {
      "properties": {
        "address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the VIP. A valid value is up (``true``)\nor down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections allowed for the VIP. Default is\n``-1``, meaning no limit.", 
          "format": "", 
          "type": "integer"
        }, 
        "description": {
          "description": "Human-readable description for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VIP. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool_id": {
          "description": "The UUID of the pool with which the VIP is associated.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the VIP port.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the virtual IP (VIP) address. A valid value is\n``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port on which to listen to client traffic that is associated\nwith the virtual IP (VIP) address. A valid value is from 0 to\n65535.", 
          "format": "", 
          "type": "integer"
        }, 
        "session_persistence": {
          "description": "Session persistence parameters for the VIP. Omit the\n``session_persistence`` parameter to prevent session persistence.\nWhen no session persistence is used, the ``session_persistence``\nparameter does not appear in the API response. To clear session\npersistence for the VIP, set the ``session_persistence`` parameter\nto ``null`` in a VIP update request.", 
          "format": "", 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the VIP. Indicates whether the VIP is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip": {
          "description": "A ``vip`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vip", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "subnet_id", 
        "port_id", 
        "address", 
        "protocol", 
        "protocol_port", 
        "pool_id", 
        "session_persistence", 
        "connection_limit", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "showVPNService_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up (``true``)\nor down (``false``). If down, the port does not forward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "external_v4_ip": {
          "description": "Read-only external (public) IPv4 address that is used for the VPN\nservice. The VPN plugin sets this address if an IPv4 interface is\navailable.", 
          "format": "", 
          "type": "string"
        }, 
        "external_v6_ip": {
          "description": "Read-only external (public) IPv6 address that is used for the VPN\nservice. The VPN plugin sets this address if an IPv6 interface is\navailable.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router into which the VPN service is inserted.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether IPSec VPN service is currently operational. Value\nis ``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``, ``PENDING_CREATE``,\n``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "(Deprecated) The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the VPN service. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "A ``vpnservice`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vpnservice", 
        "router_id", 
        "status", 
        "name", 
        "admin_state_up", 
        "external_v4_ip", 
        "external_v6_ip", 
        "subnet_id", 
        "tenant_id", 
        "id", 
        "description"
      ], 
      "type": "object"
    }, 
    "showVTNetwork_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }, 
        "vlan_transparent": {
          "description": "The state of the network, which is VLAN transparent (``true``) or\nnot VLAN transparent (``false``).", 
          "format": "", 
          "type": "boolean"
        }
      }, 
      "required": [
        "network", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled", 
        "vlan_transparent"
      ], 
      "type": "object"
    }, 
    "showVpnEndpointGroup_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "endpoints": {
          "description": "A list of endpoints of the same type for the endpoint group. Theses\nvalues depend on the type.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN endpoint group. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN endpoint group. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The type of the endpoints in the group. A valid value is\n``subnet``, ``cidr``, ``network``, ``router``, or ``vlan``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "type", 
        "endpoints"
      ], 
      "type": "object"
    }, 
    "updateBandwidthLimitRule": {
      "example": {
        "application/json": {
          "bandwidth_limit_rule": {
            "max_kbps": "10000"
          }
        }
      }, 
      "properties": {
        "bandwidth_limit_rule": {
          "description": "A ``bandwidth_limit_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "max_burst_kbps": {
          "description": "The burst over the maximum KBPS value. Default is ``0``", 
          "format": "", 
          "type": "integer"
        }, 
        "max_kbps": {
          "description": "The maximum KBPS value. If you specify this value, must be greater\nthan 0. Default is ``null``.", 
          "format": "", 
          "type": "integer"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "bandwidth_limit_rule"
      ], 
      "type": "object"
    }, 
    "updateBandwidthLimitRule_200": {
      "properties": {
        "bandwidth_limit_rule": {
          "description": "A ``bandwidth_limit_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "max_burst_kbps": {
          "description": "The burst over the maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_kbps": {
          "description": "The maximum KBPS value.", 
          "format": "", 
          "type": "integer"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "bandwidth_limit_rule", 
        "id", 
        "policy_id", 
        "max_kbps", 
        "max_burst_kbps"
      ], 
      "type": "object"
    }, 
    "updateDscpMarkingRule": {
      "example": {
        "application/json": {
          "dscp_marking_rule": {
            "dscp_mark": "16"
          }
        }
      }, 
      "properties": {
        "dscp_mark": {
          "description": "The DSCP mark value.", 
          "format": "", 
          "type": "integer"
        }, 
        "dscp_marking_rule": {
          "description": "A ``dscp_marking_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "dscp_marking_rule"
      ], 
      "type": "object"
    }, 
    "updateDscpMarkingRule_200": {
      "properties": {
        "dscp_mark": {
          "description": "The DSCP mark value.", 
          "format": "", 
          "type": "integer"
        }, 
        "dscp_marking_rule": {
          "description": "A ``dscp_marking_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the QoS policy rule.", 
          "format": "", 
          "type": "string"
        }, 
        "policy_id": {
          "description": "The UUID of the QoS policy that is associated with the rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "dscp_marking_rule", 
        "id", 
        "policy_id", 
        "dscp_mark"
      ], 
      "type": "object"
    }, 
    "updateExtraRoutes": {
      "example": {
        "application/json": {
          "router": {
            "external_gateway_info": {
              "enable_snat": true, 
              "external_fixed_ips": [
                {
                  "ip": "192.168.10.1", 
                  "subnet_id": "255.255.255.0"
                }
              ], 
              "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
            }
          }
        }
      }, 
      "properties": {
        "destination": {
          "description": "The destination CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "external_fixed_ips": {
          "description": "The IP address parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "external_gateway_info": {
          "description": "The external gateway parameters, which include the ``network_id``,\n``enable_snat`` and ``external_fixed_ips`` parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "nexthop": {
          "description": "The IP address of the next hop.", 
          "format": "", 
          "type": "string"
        }, 
        "router": {
          "description": "A ``router`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "routes": {
          "description": "A list of dictionary pairs in this format:\n\n::\n\n   [\n     {\n       \"nexthop\":\"IPADDRESS\",\n       \"destination\":\"CIDR\"\n     }\n   ]", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "router", 
        "external_gateway_info", 
        "external_fixed_ips"
      ], 
      "type": "object"
    }, 
    "updateExtraRoutes_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the router, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "enable_snat": {
          "description": "Enable Source NAT (SNAT) attribute, a part of ext-gw-mode\nextension. When a gateway is attached to a router using an L3\nextension, Network Address Translation (NAT) is enabled for traffic\ngenerated by subnets attached to the router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "external_fixed_ips": {
          "description": "The IP address parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "external_gateway_info": {
          "description": "The external gateway parameters, which include the ``network_id``,\n``enable_snat`` and ``external_fixed_ips`` parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "router": {
          "description": "A ``router`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "routes": {
          "description": "The extra routes configuration for L3 router.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "router", 
        "status", 
        "external_gateway_info", 
        "enable_snat", 
        "external_fixed_ips", 
        "name", 
        "admin_state_up", 
        "tenant_id", 
        "routes", 
        "id"
      ], 
      "type": "object"
    }, 
    "updateFirewall": {
      "example": {
        "application/json": {
          "firewall": {
            "admin_state_up": "false"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the firewall, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall": {
          "description": "A ``firewall`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_policy_id": {
          "description": "The UUID of the policy that is associated with the firewall.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The human-readable name for the firewall service. Does not have to\nbe unique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_ids": {
          "description": "A list of UUIDs for routers that are associated with the firewall.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "firewall"
      ], 
      "type": "object"
    }, 
    "updateFirewallPolicy_200": {
      "properties": {
        "audited": {
          "description": "Indicates whether the policy has been audited.\n\nEach time that the firewall policy or its associated rules are\nchanged, the API sets this attribute to ``false``. To audit the\npolicy, the policy owner must explicitly update the policy to set\nthis attribute to ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_policy": {
          "description": "A ``firewall_policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_rules": {
          "description": "A list of the UUIDs for firewall rule associated with the firewall\npolicy.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the firewall policy.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether the firewall policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_policy", 
        "audited", 
        "description", 
        "firewall_rules", 
        "id", 
        "name", 
        "shared", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "updateFirewallRule": {
      "example": {
        "application/json": {
          "firewall_rule": {
            "shared": "true"
          }
        }
      }, 
      "properties": {
        "action": {
          "description": "The action that the API performs on traffic that matches the\nfirewall rule.\n\nValid value is ``allow`` or ``deny``. Default is ``deny``.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human readable description for the firewall rule.\n\nThe maximum length is 1024 characters. No default.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_ip_address": {
          "description": "The destination IPv4 or IPv6 address or CIDR. No default.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_port": {
          "description": "The destination port or port range.\n\nA valid value is a port number, as an integer, or a port range, in\nthe format of a ``:`` separated range. For a port range, include\nboth ends of the range. For example, ``80:90``.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Set to ``false`` to disable this rule in the firewall policy.\nFacilitates selectively turning off rules without having to\ndisassociate the rule from the firewall policy. Valid value is\n``true`` or ``false``. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "firewall_rule": {
          "description": "A ``firewall_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "ip_version": {
          "description": "The IP protocol version. Valid value is ``4`` or ``6``. Default is\n``4``.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human readable name for the firewall rule. Maximum length is 255\ncharacters. Does not have to be unique. No default.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The IP protocol. Valid value is ``icmp``, ``tcp``, ``udp``, or\n``null``. No default.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Set to ``true`` to share this firewall rule with other tenants.\nOther tenants can use a shared rule in firewall policies that this\ntenant does not own. Valid value is ``true`` or ``false``. Default\nis ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "source_port": {
          "description": "The source port or port range.\n\nA valid value is a port number, as an integer, or a port range, in\nthe format of a ``:`` separated range. For a port range, include\nboth ends of the range. For example, ``80:90``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall rule. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_rule", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "updateFirewallRule_200": {
      "properties": {
        "action": {
          "description": "The action that the API performs on traffic that matches the\nfirewall rule. Value is ``allow`` or ``deny``.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human readable description for the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_ip_address": {
          "description": "The destination IPv4 or IPv6 address or CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "destination_port": {
          "description": "The destination port or port range.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this rule is enabled or disabled in the firewall\npolicy.", 
          "format": "", 
          "type": "boolean"
        }, 
        "firewall_policy_id": {
          "description": "Read-only attribute that the API populates with the UUID of the\nfirewall policy when you associate this firewall rule with a\npolicy.\n\nYou can associate a firewall rule with one policy at a time. You\ncan update this association can to a different firewall policy.\n\nIf you do not associate the rule with any policy, this attribute is\n``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall_rule": {
          "description": "A ``firewall_rule`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The generated UUID for the firewall rule object.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP protocol version. Value is ``4`` or ``6``.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human readable name for the firewall rule.", 
          "format": "", 
          "type": "string"
        }, 
        "position": {
          "description": "Read-only attribute that the API assigns to this rule when it\nassociates it with a firewall policy. This value indicates the\nposition of this rule in that firewall policy. This position number\nstarts at 1. If the firewall rule is not associated with any\npolicy, the position is ``null``.", 
          "format": "", 
          "type": "integer"
        }, 
        "protocol": {
          "description": "The IP protocol. Value is ``icmp``, ``tcp``, ``udp``, or ``null``.", 
          "format": "", 
          "type": "string"
        }, 
        "shared": {
          "description": "Indicates whether this firewall rule is shared with other tenants.\nOther tenants can use a shared rule in firewall policies that this\ntenant does not own.", 
          "format": "", 
          "type": "boolean"
        }, 
        "source_ip_address": {
          "description": "The source IPv4 or IPv6 address or CIDR.", 
          "format": "", 
          "type": "string"
        }, 
        "source_port": {
          "description": "The source port or port range.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the firewall rule.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall_rule", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "firewall_policy_id", 
        "shared", 
        "protocol", 
        "ip_version", 
        "source_ip_address", 
        "destination_ip_address", 
        "source_port", 
        "destination_port", 
        "position", 
        "action", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "updateFirewall_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the firewall, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The human-readable description for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "firewall": {
          "description": "A ``firewall`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "firewall_policy_id": {
          "description": "The UUID of the policy that is associated with the firewall.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the firewall service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the firewall service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_ids": {
          "description": "A list of UUIDs for routers that are associated with the firewall.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The status of the firewall service. Value is ``ACTIVE``,\n``INACTIVE``, ``ERROR``, ``PENDING_CREATE``, ``PENDING_UPDATE``, or\n``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the firewall service. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "firewall", 
        "admin_state_up", 
        "description", 
        "firewall_policy_id", 
        "id", 
        "name", 
        "router_ids", 
        "status", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "updateFlavor": {
      "example": {
        "application/json": {
          "flavor": {
            "description": "New description", 
            "enabled": false, 
            "name": "newname"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "New human-readable description for the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this flavor is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "flavor": {
          "description": "A ``flavor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "New human-readable name for the flavor. Can be \"\" and non-unique.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "flavor"
      ], 
      "type": "object"
    }, 
    "updateFlavor_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this flavor is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "flavor": {
          "description": "A ``flavor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the flavor.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the flavor. Can be \"\" and non-unique.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profiles": {
          "description": "Service profile UUIDs associated with this flavor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "service_type": {
          "description": "Service type (ex: LOADBALANCERV2) for the flavor.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "flavor", 
        "id", 
        "name", 
        "description", 
        "service_type", 
        "service_profiles", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "updateFloatingIp": {
      "example": {
        "application/json": {
          "floatingip": {
            "port_id": "fc861431-0e6c-4842-a0ed-e2363f9bc3a8"
          }
        }
      }, 
      "properties": {
        "floatingip": {
          "description": "A ``floatingip`` object. When you associate a floating IP address\nwith a VM, the instance has the same public IP address each time\nthat it boots, basically to maintain a consistent IP address for\nmaintaining DNS assignment.", 
          "format": "", 
          "type": "object"
        }, 
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "floatingip", 
        "port_id"
      ], 
      "type": "object"
    }, 
    "updateFloatingIp_200": {
      "properties": {
        "fixed_ip_address": {
          "description": "The fixed IP address that is associated with the floating IP\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_ip_address": {
          "description": "The floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "floating_network_id": {
          "description": "The UUID of the network associated with the floating IP.", 
          "format": "", 
          "type": "string"
        }, 
        "floatingip": {
          "description": "A ``floatingip`` object. When you associate a floating IP address\nwith a VM, the instance has the same public IP address each time\nthat it boots, basically to maintain a consistent IP address for\nmaintaining DNS assignment.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the port.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the floating IP address.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "floatingip", 
        "id", 
        "status", 
        "floating_network_id", 
        "router_id", 
        "fixed_ip_address", 
        "floating_ip_address", 
        "tenant_id", 
        "port_id"
      ], 
      "type": "object"
    }, 
    "updateHealthMonitor": {
      "example": {
        "application/json": {
          "health_monitor": {
            "admin_state_up": false, 
            "delay": "2", 
            "expected_codes": "200", 
            "http_method": "POST", 
            "max_retries": 2, 
            "timeout": 2, 
            "url_path": "/page.html"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "The list of HTTP status codes expected in response from the member\nto declare it healthy. Specify one of the following values:\n\n- A single value, such as 200.\n\n- A list, such as 200, 202.\n\n- A range, such as 200-204.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. Must be a string that begins with a forward slash (/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "max_retries", 
        "url_path"
      ], 
      "type": "object"
    }, 
    "updateHealthMonitor_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "pools": {
          "description": "List of pools that are associated with the health monitor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A string value that must begin with the forward slash\n(/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "id", 
        "tenant_id", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries", 
        "pools"
      ], 
      "type": "object"
    }, 
    "updateHealthMonitorv2": {
      "example": {
        "application/json": {
          "health_monitor": {
            "admin_state_up": false, 
            "delay": "2", 
            "expected_codes": "200", 
            "http_method": "POST", 
            "max_retries": 2, 
            "timeout": 2, 
            "url_path": "/page.html"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "The list of HTTP status codes expected in response from the member\nto declare it healthy. Specify one of the following values:\n\n- A single value, such as 200.\n\n- A list, such as 200, 202.\n\n- A range, such as 200-204.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. Must be a string that begins with a forward slash (/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "max_retries", 
        "url_path"
      ], 
      "type": "object"
    }, 
    "updateHealthMonitorv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The amount of time, in seconds, between sending probes to members.", 
          "format": "", 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitor": {
          "description": "A ``health_monitor`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE``. A valid value is from 1 to\n10.", 
          "format": "", 
          "type": "integer"
        }, 
        "pools": {
          "description": "List of pools that are associated with the health monitor.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant UUID other than their\nown.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum time, in seconds, that a monitor waits to connect\nbefore it times out. This value must be less than the delay value.", 
          "format": "", 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is ``PING``, ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A string value that must begin with the forward slash\n(/).", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "health_monitor", 
        "id", 
        "tenant_id", 
        "type", 
        "delay", 
        "timeout", 
        "max_retries", 
        "pools"
      ], 
      "type": "object"
    }, 
    "updateIKEPolicy": {
      "example": {
        "application/json": {
          "ikepolicy": {
            "encryption_algorithm": "aes-256"
          }
        }
      }, 
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1``, which\nis the default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2``. Default is\n``v1``.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicy": {
          "description": "An ``ikepolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ikepolicy"
      ], 
      "type": "object"
    }, 
    "updateIKEPolicy_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1``, which\nis the default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2``. Default is\n``v1``.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicies": {
          "description": "A list of IKE policy objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "ikepolicy": {
          "description": "An ``ikepolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the VPN service. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ikepolicy", 
        "ikepolicies", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "auth_algorithm", 
        "encryption_algorithm", 
        "phase1_negotiation_mode", 
        "pfs", 
        "ike_version", 
        "lifetime", 
        "units", 
        "value"
      ], 
      "type": "object"
    }, 
    "updateIPSecPolicy": {
      "example": {
        "application/json": {
          "ipsecpolicy": {
            "pfs": "group14"
          }
        }
      }, 
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1``, which is\nthe default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "The encapsulation mode. A valid value is ``tunnel`` or\n``transport``. Default is ``tunnel``.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "ipsecpolicy": {
          "description": "An ``ipsecpolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP``, ``AH``, or ``AH-\nESP``. Default is ``ESP``.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ipsecpolicy", 
        "name", 
        "description"
      ], 
      "type": "object"
    }, 
    "updateIPSecPolicy_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1``, which is\nthe default.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "The encapsulation mode. A valid value is ``tunnel`` or\n``transport``. Default is ``tunnel``.", 
          "format": "", 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des``, ``aes-128``,\n``aes-192``, ``aes-256``, and so on. Default is ``aes-128``.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "ipsecpolicies": {
          "description": "A list of IPSec policy objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "ipsecpolicy": {
          "description": "An ``ipsecpolicy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2``,\n``Group5``, ``Group14``, and so on. Default is ``Group5``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP``, ``AH``, or ``AH-\nESP``. Default is ``ESP``.", 
          "format": "", 
          "type": "string"
        }, 
        "units": {
          "description": "The units for the lifetime of the security association. The\nlifetime consists of a unit and integer value. You can omit either\nthe unit or value portion of the lifetime. Default unit is seconds\nand default value is 3600.", 
          "format": "", 
          "type": "string"
        }, 
        "value": {
          "description": "The lifetime value, as a positive integer. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime. Default unit is seconds and default value\nis 3600.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ipsecpolicy", 
        "ipsecpolicies", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "transform_protocol", 
        "encapsulation_mode", 
        "auth_algorithm", 
        "encryption_algorithm", 
        "pfs", 
        "lifetime", 
        "units", 
        "value"
      ], 
      "type": "object"
    }, 
    "updateIPSecSiteConnection": {
      "example": {
        "application/json": {
          "ipsec_site_connection": {
            "mtu": "2000"
          }
        }
      }, 
      "properties": {
        "action": {
          "description": "The dead peer detection (DPD) action. A valid value is ``clear``,\n``hold``, ``restart``, ``disabled``, or ``restart-by-peer``.\nDefault value is ``hold``.", 
          "format": "", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up\n(``true``) or down (``false``). If down, the connection does not\nforward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with dead peer detection (DPD) protocol controls.", 
          "format": "", 
          "type": "object"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional``. Default is ``bi-directional``.", 
          "format": "", 
          "type": "string"
        }, 
        "interval": {
          "description": "The dead peer detection (DPD) interval, in seconds. A valid value\nis a positive integer. Default is 30.", 
          "format": "", 
          "type": "integer"
        }, 
        "ipsec_site_connection": {
          "description": "An ``ipsec_site_connection`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "local_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private subnets for\nthe local side of the connection. Yo must specify this parameter\nwith the ``peer_ep_group_id`` parameter unless in backward-\ncompatible mode where ``peer_cidrs`` is provided with a\n``subnet_id`` for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) value to address fragmentation.\nMinimum value is 68 for IPv4, and 1280 for IPv6.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_address": {
          "description": "The peer gateway public IPv4 or IPv6 address or FQDN.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "(Deprecated) Unique list of valid peer private CIDRs in the form <\nnet_address > / < prefix > .", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "peer_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private CIDRs in the\nform < net_address > / < prefix > for the peer side of the\nconnection. You must specify this parameter with the\n``local_ep_group_id`` parameter unless in backward-compatible mode\nwhere ``peer_cidrs`` is provided with a ``subnet_id`` for the VPN\nservice.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_id": {
          "description": "The peer router identity for authentication. A valid value is an\nIPv4 address, IPv6 address, e-mail address, key ID, or FQDN.\nTypically, this value matches the ``peer_address`` value.", 
          "format": "", 
          "type": "string"
        }, 
        "psk": {
          "description": "The pre-shared key. A valid value is any string.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The dead peer detection (DPD) timeout in seconds. A valid value is\na positive integer that is greater than the DPD ``interval`` value.\nDefault is 120.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "ipsec_site_connection", 
        "peer_address", 
        "peer_id", 
        "psk"
      ], 
      "type": "object"
    }, 
    "updateIPSecSiteConnection_200": {
      "properties": {
        "action": {
          "description": "The dead peer detection (DPD) action. A valid value is ``clear``,\n``hold``, ``restart``, ``disabled``, or ``restart-by-peer``.\nDefault value is ``hold``.", 
          "format": "", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up\n(``true``) or down (``false``). If down, the connection does not\nforward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk``, which is the\ndefault.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with dead peer detection (DPD) protocol controls.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID for the IPSec connection.", 
          "format": "", 
          "type": "string"
        }, 
        "ikepolicy_id": {
          "description": "The UUID of the IKE policy.", 
          "format": "", 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional``. Default is ``bi-directional``.", 
          "format": "", 
          "type": "string"
        }, 
        "interval": {
          "description": "The dead peer detection (DPD) interval, in seconds. A valid value\nis a positive integer. Default is 30.", 
          "format": "", 
          "type": "integer"
        }, 
        "ipsec_site_connection": {
          "description": "An ``ipsec_site_connection`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "ipsecpolicy_id": {
          "description": "The UUID of the IPSec policy.", 
          "format": "", 
          "type": "string"
        }, 
        "local_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private subnets for\nthe local side of the connection. This value is present with the\n``peer_ep_group_id`` parameter unless in backward-compatible mode,\nwhere ``peer_cidrs`` is shown.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) to address fragmentation. The\nminimum value for IPv4 is 68. The minimum value for IPv6 is 1280.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_address": {
          "description": "The peer gateway public IPv4 address, IPv6 address, or FQDN.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "(Deprecated) Unique list of valid peer private CIDRs in the form <\nnet_address > / < prefix > .", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "peer_ep_group_id": {
          "description": "The UUID for the endpoint group that contains private CIDRs in the\nform < net_address > / < prefix > for the peer side of the\nconnection. This value is present with the ``local_ep_group_id``\nparameter unless in backward-compatible mode, where ``peer_cidrs``\nis shown.", 
          "format": "", 
          "type": "string"
        }, 
        "peer_id": {
          "description": "The peer router identity for authentication. Can be an IPv4\naddress, IPv6 address, e-mail address, key ID, or FQDN. Typically,\nthis value matches the ``peer_address`` value.", 
          "format": "", 
          "type": "string"
        }, 
        "psk": {
          "description": "The pre-shared key. A valid value is any string.", 
          "format": "", 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static``, which is the default.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether the IPSec connection is currently operational.\nValue is ``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``,\n``PENDING_CREATE``, ``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout": {
          "description": "The dead peer detection (DPD) timeout, in seconds. A valid value is\na positive integer that is greater than the DPD ``interval`` value.\nDefault is 120.", 
          "format": "", 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "The UUID of the VPN service.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "ipsec_site_connection", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "peer_address", 
        "peer_id", 
        "local_ep_group_id", 
        "peer_ep_group_id", 
        "peer_cidrs", 
        "route_mode", 
        "mtu", 
        "auth_mode", 
        "psk", 
        "initiator", 
        "admin_state_up", 
        "status", 
        "ikepolicy_id", 
        "ipsecpolicy_id", 
        "vpnservice_id", 
        "dpd", 
        "action", 
        "interval", 
        "timeout"
      ], 
      "type": "object"
    }, 
    "updateListenerv2": {
      "example": {
        "application/json": {
          "listener": {
            "admin_state_up": false, 
            "connection_limit": 200, 
            "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
            "description": "listener two", 
            "name": "listener2", 
            "sni_container_refs": [
              "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
              "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
            ]
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up\n(``true``) or down (``false``).\n\nSet this attribute to ``false`` to create the listener in an\nadministratively down state.", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections permitted for this load balancer.\nDefault is infinite.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_pool_id": {
          "description": "The UUID of default pool. Must have compatible protocol with\nlistener.", 
          "format": "", 
          "type": "string"
        }, 
        "default_tls_container_ref": {
          "description": "A reference to a container of TLS secrets.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Detailed description of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "listener": {
          "description": "A ``listener`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "loadbalancer_id": {
          "description": "The UUID of the load balancer.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The listener name.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol to load balance. A valid value is ``HTTP``, ``HTTPS``,\n``TCP``, or ``TERMINATED_HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The TCP or UDP port on which to listen.", 
          "format": "", 
          "type": "integer"
        }, 
        "sni_container_refs": {
          "description": "A list of references to TLS secrets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the listener. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "listener", 
        "name", 
        "tenant_id", 
        "protocol", 
        "protocol_port", 
        "loadbalancer_id"
      ], 
      "type": "object"
    }, 
    "updateListenerv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the listener, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections permitted for this load balancer.\nDefault is infinite.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_pool_id": {
          "description": "The UUID of default pool. Must have compatible protocol with\nlistener.", 
          "format": "", 
          "type": "string"
        }, 
        "default_tls_container_ref": {
          "description": "A reference to a container of TLS secrets.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "Detailed description of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the listener.", 
          "format": "", 
          "type": "string"
        }, 
        "listener": {
          "description": "A ``listener`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "loadbalancers": {
          "description": "A list of load balancer objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The listener name.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol to load balance. A valid value is ``HTTP``, ``HTTPS``,\n``TCP``, or ``TERMINATED_HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The TCP or UDP port on which to listen.", 
          "format": "", 
          "type": "integer"
        }, 
        "sni_container_refs": {
          "description": "A list of references to TLS secrets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the listener. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "listener", 
        "admin_state_up", 
        "connection_limit", 
        "default_pool_id", 
        "description", 
        "id", 
        "loadbalancers", 
        "name", 
        "protocol", 
        "protocol_port", 
        "tenant_id", 
        "default_tls_container_ref", 
        "sni_container_refs"
      ], 
      "type": "object"
    }, 
    "updateLoadBalancerv2": {
      "example": {
        "application/json": {
          "loadbalancer": {
            "admin_state_up": false, 
            "description": "simple lb2", 
            "name": "loadbalancer2"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The load balancer description.", 
          "format": "", 
          "type": "string"
        }, 
        "loadbalancer": {
          "description": "A ``loadbalancer`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The load balancer name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "loadbalancer"
      ], 
      "type": "object"
    }, 
    "updateLoadBalancerv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The load balancer description.", 
          "format": "", 
          "type": "string"
        }, 
        "flavor": {
          "description": "The UUID of a flavor if set.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the load balancer.", 
          "format": "", 
          "type": "string"
        }, 
        "listeners": {
          "description": "The associated listeners, if any.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "loadbalancer": {
          "description": "A ``loadbalancer`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The load balancer name.", 
          "format": "", 
          "type": "string"
        }, 
        "operating_status": {
          "description": "The operating status of the load balancer.\n\nThis value is ``ONLINE`` or ``OFFLINE``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The name of the provider.", 
          "format": "", 
          "type": "string"
        }, 
        "provisioning_status": {
          "description": "The provisioning status of the load balancer.\n\nThis value is ``ACTIVE``, ``PENDING_CREATE`` or ``ERROR``.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "loadbalancer", 
        "description", 
        "admin_state_up", 
        "tenant_id", 
        "provisioning_status", 
        "listeners", 
        "vip_address", 
        "vip_subnet_id", 
        "id", 
        "operating_status", 
        "name", 
        "provider"
      ], 
      "type": "object"
    }, 
    "updateMember": {
      "example": {
        "application/json": {
          "member": {
            "weight": 5
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member"
      ], 
      "type": "object"
    }, 
    "updateMember_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the member.", 
          "format": "", 
          "type": "string"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member", 
        "id", 
        "tenant_id", 
        "pool_id", 
        "address", 
        "protocol_port", 
        "weight", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "updateMemberv2": {
      "example": {
        "application/json": {
          "member": {
            "weight": 5
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member"
      ], 
      "type": "object"
    }, 
    "updateMemberv2_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID for the member.", 
          "format": "", 
          "type": "string"
        }, 
        "member": {
          "description": "A ``member`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "pool_id": {
          "description": "The UUID of the pool to which the member belongs.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the member. Only administrative\nusers can specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "weight": {
          "description": "The weight of a member determines the portion of requests or\nconnections it services compared to the other members of the pool.\nA value of 0 means the member does not participate in load-\nbalancing but still accepts persistent connections. A valid value\nis from 0 to 256.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "member", 
        "id", 
        "tenant_id", 
        "pool_id", 
        "address", 
        "protocol_port", 
        "weight", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "updatePolicy": {
      "example": {
        "application/json": {
          "policy": {
            "description": "This policy limits the ports to 10Mbit max.", 
            "name": "10Mbit", 
            "shared": false
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "The QoS policy description.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The QoS policy name.", 
          "format": "", 
          "type": "string"
        }, 
        "policy": {
          "description": "A QoS ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "shared": {
          "description": "Set to ``true`` to share this policy with other tenants.\n\nDefault is ``false``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The tenant UUID of QoS policy owner. Only administrative users can\nspecify a tenant UUID other than their own. You cannot change this\nvalue through authorization policies.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The type of QoS policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy"
      ], 
      "type": "object"
    }, 
    "updatePolicy_200": {
      "properties": {
        "description": {
          "description": "The description of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The generated UUID of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the QoS policy.", 
          "format": "", 
          "type": "string"
        }, 
        "policy": {
          "description": "A QoS ``policy`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "shared": {
          "description": "Indicates whether this policy is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the QoS policy.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "policy", 
        "tenant_id", 
        "id", 
        "name", 
        "description", 
        "shared"
      ], 
      "type": "object"
    }, 
    "updatePool": {
      "example": {
        "application/json": {
          "pool": {
            "name": "SuperPool"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the pool. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool": {
          "description": "A ``pool`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "pool"
      ], 
      "type": "object"
    }, 
    "updatePool_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "List of health monitors that are associated with the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "health_monitors_status": {
          "description": "The statuses of the health monitors that are associated with the\npool.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_algorithm": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "The list of members that belong to the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool": {
          "description": "A ``pool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider": {
          "description": "The load-balancer provider.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The UUID of the virtual IP (VIP) address.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pool", 
        "status", 
        "lb_algorithm", 
        "protocol", 
        "description", 
        "subnet_id", 
        "tenant_id", 
        "admin_state_up", 
        "name", 
        "members", 
        "status_description", 
        "id", 
        "vip_id", 
        "health_monitors_status", 
        "provider"
      ], 
      "type": "object"
    }, 
    "updatePoolv2": {
      "example": {
        "application/json": {
          "pool": {
            "name": "SuperPool"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool. A valid value is up\n(``true``) or down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the pool. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool": {
          "description": "A ``pool`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "pool"
      ], 
      "type": "object"
    }, 
    "updatePoolv2_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "The UUID for the associated health monitor.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the pool.", 
          "format": "", 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin\n(``ROUND_ROBIN``), least-connections (``LEAST_CONNECTIONS``),\nsource IP (``SOURCE_IP``), and so on, that is used to distribute\ntraffic to the pool members. This value, which must be supported,\nis dependent on the load-balancer provider. The round-robin\nalgorithm must be supported.", 
          "format": "", 
          "type": "string"
        }, 
        "members": {
          "description": "The list of members that belong to the pool.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The pool name. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pools": {
          "description": "A list of ``pool`` objects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is ``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the pool. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The UUID of the virtual IP (VIP) address.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "pools", 
        "admin_state_up", 
        "description", 
        "status", 
        "health_monitors", 
        "id", 
        "lb_method", 
        "members", 
        "vip_id", 
        "subnet_id", 
        "protocol", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "updateProviderNetwork": {
      "example": {
        "application/json": {
          "network": {
            "name": "sample_network_5_updated"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "availability_zone_hints": {
          "description": "The availability zone candidate for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "availability_zones": {
          "description": "The availability zone for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Admin-only. Indicates whether this network is shared across all\ntenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network. Only administrative\nusers can specify a tenant UUID other than their own. You cannot\nchange this value through authorization policies.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "network", 
        "availability_zone_hints", 
        "availability_zones"
      ], 
      "type": "object"
    }, 
    "updateProviderNetwork_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the network, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the network.", 
          "format": "", 
          "type": "string"
        }, 
        "mtu": {
          "description": "The MTU of a network resource.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The network name.", 
          "format": "", 
          "type": "string"
        }, 
        "network": {
          "description": "A ``network`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "port_security_enabled": {
          "description": "The port security status. A valid value is enabled (``true``) or\ndisabled (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "provider:network_type": {
          "description": "The type of physical network that maps to this network resource.\nFor example, ``flat``, ``vlan``, ``vxlan``, or ``gre``.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:physical_network": {
          "description": "The physical network where this network object is implemented. The\nNetworking API v2.0 does not provide a way to list available\nphysical networks. For example, the Open vSwitch plug-in\nconfiguration file defines a symbolic name that maps to specific\nbridges on each Compute host.", 
          "format": "", 
          "type": "string"
        }, 
        "provider:segmentation_id": {
          "description": "An isolated segment on the physical network. The ``network_type``\nattribute defines the segmentation model. For example, if the\n``network_type`` value is vlan, this ID is a vlan identifier. If\nthe ``network_type`` value is gre, this ID is a gre key.", 
          "format": "", 
          "type": "string"
        }, 
        "router:external": {
          "description": "Indicates whether this network is externally accessible.", 
          "format": "", 
          "type": "boolean"
        }, 
        "shared": {
          "description": "Indicates whether this network is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnets": {
          "description": "The associated subnets.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the network.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "network", 
        "admin_state_up", 
        "id", 
        "name", 
        "shared", 
        "status", 
        "subnets", 
        "tenant_id", 
        "router:external", 
        "mtu", 
        "port_security_enabled"
      ], 
      "type": "object"
    }, 
    "updateQuota": {
      "example": {
        "application/json": {
          "quota": {
            "floatingip": 50, 
            "network": 10, 
            "port": 50, 
            "rbac_policy": -1, 
            "router": 10, 
            "security_group": 10, 
            "security_group_rule": 100, 
            "subnet": 10, 
            "subnetpool": -1
          }
        }
      }, 
      "properties": {
        "floatingip": {
          "description": "The number of floating IP addresses allowed for each tenant.\n\nA value of ``-1`` means no limit.", 
          "format": "", 
          "type": "integer"
        }, 
        "network": {
          "description": "The number of networks allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "port": {
          "description": "The number of ports allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "quota": {
          "description": "A ``quota`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "rbac_policy": {
          "description": "The number of role-based access control (RBAC) policies for each\ntenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "router": {
          "description": "The number of routers allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "security_group": {
          "description": "The number of security groups allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "security_group_rule": {
          "description": "The number of security group rules allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnet": {
          "description": "The number of subnets allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnetpool": {
          "description": "The number of subnet pools allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "quota"
      ], 
      "type": "object"
    }, 
    "updateQuota_200": {
      "properties": {
        "floatingip": {
          "description": "The number of floating IP addresses allowed for each tenant.\n\nA value of ``-1`` means no limit.", 
          "format": "", 
          "type": "integer"
        }, 
        "network": {
          "description": "The number of networks allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "port": {
          "description": "The number of ports allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "quota": {
          "description": "A ``quota`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "rbac_policy": {
          "description": "The number of role-based access control (RBAC) policies for each\ntenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "router": {
          "description": "The number of routers allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "security_group": {
          "description": "The number of security groups allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "security_group_rule": {
          "description": "The number of security group rules allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnet": {
          "description": "The number of subnets allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }, 
        "subnetpool": {
          "description": "The number of subnet pools allowed for each tenant.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "quota", 
        "subnet", 
        "network", 
        "floatingip", 
        "subnetpool", 
        "security_group_rule", 
        "security_group", 
        "router", 
        "rbac_policy", 
        "port"
      ], 
      "type": "object"
    }, 
    "updateRouter": {
      "example": {
        "application/json": {
          "router": {
            "external_gateway_info": {
              "enable_snat": true, 
              "external_fixed_ips": [
                {
                  "ip": "192.168.10.1", 
                  "subnet_id": "255.255.255.0"
                }
              ], 
              "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
            }
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the router, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "enable_snat": {
          "description": "Enable Source NAT (SNAT) attribute. Default is ``true``. To persist\nthis attribute value, set the ``enable_snat_by_default`` option in\nthe ``neutron.conf`` file.", 
          "format": "", 
          "type": "boolean"
        }, 
        "external_fixed_ips": {
          "description": "The IP address parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "external_gateway_info": {
          "description": "The external gateway parameters, which include the ``network_id``,\n``enable_snat`` and ``external_fixed_ips`` parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "name": {
          "description": "The router name.", 
          "format": "", 
          "type": "string"
        }, 
        "router": {
          "description": "A ``router`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "router"
      ], 
      "type": "object"
    }, 
    "updateRouter_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the router, which is up (``true``) or\ndown (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "availability_zone_hints": {
          "description": "The availability zone candidate for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "availability_zones": {
          "description": "The availability zone for the network.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "distributed": {
          "description": "If ``true``, indicates a distributed router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "enable_snat": {
          "description": "Enable Source NAT (SNAT) attribute, a part of ext-gw-mode\nextension. When a gateway is attached to a router using an L3\nextension, Network Address Translation (NAT) is enabled for traffic\ngenerated by subnets attached to the router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "external_fixed_ips": {
          "description": "The IP address parameters.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "external_gateway_info": {
          "description": "The external gateway parameters, which include the ``network_id``,\n``enable_snat`` and ``external_fixed_ips`` parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "ha": {
          "description": "If ``true``, indicates a highly-available router.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the router.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The router name.", 
          "format": "", 
          "type": "string"
        }, 
        "router": {
          "description": "A ``router`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "routes": {
          "description": "The extra routes configuration for L3 router.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The network status.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "router", 
        "status", 
        "external_gateway_info", 
        "enable_snat", 
        "external_fixed_ips", 
        "availability_zone_hints", 
        "availability_zones", 
        "name", 
        "admin_state_up", 
        "tenant_id", 
        "distributed", 
        "routes", 
        "ha", 
        "id"
      ], 
      "type": "object"
    }, 
    "updateSecGroup": {
      "example": {
        "application/json": {
          "security_group": {
            "description": "my security group", 
            "name": "mysecgroup"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "Security group description.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The security group name.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name"
      ], 
      "type": "object"
    }, 
    "updateSecGroup_200": {
      "properties": {
        "description": {
          "description": "The security group description.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the security group.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The security group name.", 
          "format": "", 
          "type": "string"
        }, 
        "security_group": {
          "description": "A ``security_group`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "security_group", 
        "description", 
        "id", 
        "name", 
        "tenant_id"
      ], 
      "type": "object"
    }, 
    "updateServiceProfile": {
      "example": {
        "application/json": {
          "service_profile": {
            "description": "New description", 
            "driver": "neutron_lbaas.drivers.octavia.driver.OctaviaDriver", 
            "enabled": false, 
            "metainfo": "{'new': 'info'}"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "Human-readable description for the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "driver": {
          "description": "Provider driver to use for this profile. Ex:\nneutron_lbaas.drivers.octavia.driver.OctaviaDriver.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this service profile is enabled or disabled.\nDefault true.", 
          "format": "", 
          "type": "boolean"
        }, 
        "metainfo": {
          "description": "JSON-formatted meta information.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profile": {
          "description": "A ``service_profile`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "service_profile"
      ], 
      "type": "object"
    }, 
    "updateServiceProfile_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "driver": {
          "description": "Driver to associate with profile.", 
          "format": "", 
          "type": "string"
        }, 
        "enabled": {
          "description": "Indicates whether this service profile is enabled or disabled.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the service profile.", 
          "format": "", 
          "type": "string"
        }, 
        "metainfo": {
          "description": "JSON metainfo to associate with profile.", 
          "format": "", 
          "type": "string"
        }, 
        "service_profile": {
          "description": "A ``service_profile`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "service_profile", 
        "id", 
        "description", 
        "driver", 
        "metainfo", 
        "enabled"
      ], 
      "type": "object"
    }, 
    "updateSubnetPool": {
      "example": {
        "application/json": {
          "subnetpool": {
            "default_prefixlen": 64, 
            "max_prefixlen": 64, 
            "min_prefixlen": 64, 
            "name": "my-new-subnetpool-name", 
            "prefixes": [
              "2001:db8::/64", 
              "2001:db8:0:1::/64", 
              "2001:db8:0:2::/64"
            ]
          }
        }
      }, 
      "properties": {
        "address_scope_id": {
          "description": "An address scope to assign to the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are omitted when you create the subnet.\nDefault is ``min_prefixlen``.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. Default is no quota is enforced\non allocations from the subnet pool. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.\n\nUpdating this parameter has no effect on existing subnet\nallocations. The existing subnet allocations for each tenant are\ncounted against the updated prefix space quota.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.\nFor IPv4 subnet pools, default is ``32``. For IPv6 subnet pools,\ndefault is ``128``.", 
          "format": "", 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool. For\nIPv4 subnet pools, default is ``8``. For IPv6 subnet pools, default\nis ``64``.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "A name for the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes to assign to the subnet pool. The API\nmerges adjacent prefixes and treats them as a single prefix.\n\nTo update the subnet prefixes, pass a list that contains the\nexisting set of prefixes and the new set of prefixes. You cannot\nshrink the prefix list of a subnet pool. You can only add prefixes\nto it to expand it.\n\nEnsure that each subnet prefix is unique among all subnet prefixes\nin all subnet pools that are associated with the address scope.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the subnet pool. Only\nadministrative users can specify a tenant UUID other than their\nown. You cannot change this value through authorization policies.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnetpool", 
        "name", 
        "prefixes"
      ], 
      "type": "object"
    }, 
    "updateSubnetPool_200": {
      "properties": {
        "address_scope_id": {
          "description": "The address scope.", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "Time at which subnetpool has been created.", 
          "format": "", 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are omitted when you create the subnet.", 
          "format": "", 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "type": "integer"
        }, 
        "id": {
          "description": "The UUID of the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP address family of the list of prefixes passed to the\n``prefixes`` attribute.", 
          "format": "", 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.", 
          "format": "", 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool.", 
          "format": "", 
          "type": "integer"
        }, 
        "name": {
          "description": "The subnet pool name.", 
          "format": "", 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes that are assigned to the subnet pool. The\nAPI merges adjacent prefixes and treats them as a single prefix.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "shared": {
          "description": "Indicates whether this subnet pool is shared across all tenants.", 
          "format": "", 
          "type": "boolean"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the subnet pool.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "Time at which subnetpool has been updated.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "subnetpool", 
        "min_prefixlen", 
        "address_scope_id", 
        "default_prefixlen", 
        "id", 
        "max_prefixlen", 
        "name", 
        "created_at", 
        "updated_at", 
        "default_quota", 
        "tenant_id", 
        "prefixes", 
        "ip_version", 
        "shared"
      ], 
      "type": "object"
    }, 
    "updateTags": {
      "example": {
        "application/json": {
          "tags": [
            "red", 
            "blue"
          ]
        }
      }, 
      "properties": {
        "tags": {
          "description": "The list of tags on the resource.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "tags"
      ], 
      "type": "object"
    }, 
    "updateTags_200": {
      "properties": {
        "tags": {
          "description": "The list of tags on the resource.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "tags"
      ], 
      "type": "object"
    }, 
    "updateVIP": {
      "example": {
        "application/json": {
          "vip": {
            "connection_limit": "1000"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VIP. A valid value is up (``true``)\nor down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections allowed for the VIP. Value is\n``-1`` if the limit is not set.", 
          "format": "", 
          "type": "integer"
        }, 
        "description": {
          "description": "Human-readable description for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VIP. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool_id": {
          "description": "The UUID of the pool with which the VIP is associated.", 
          "format": "", 
          "type": "string"
        }, 
        "session_persistence": {
          "description": "Session persistence parameters for the VIP. Omit the\n``session_persistence`` parameter to prevent session persistence.\nWhen no session persistence is used, the ``session_persistence``\nparameter does not appear in the API response.\n\nTo clear session persistence for the VIP, set the\n``session_persistence`` parameter to ``null`` in a VIP update\nrequest.", 
          "format": "", 
          "type": "object"
        }, 
        "vip": {
          "description": "A ``vip`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vip"
      ], 
      "type": "object"
    }, 
    "updateVIP_200": {
      "properties": {
        "address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the VIP. A valid value is up (``true``)\nor down (``false``).", 
          "format": "", 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections allowed for the VIP. Default is\n``-1``, meaning no limit.", 
          "format": "", 
          "type": "integer"
        }, 
        "description": {
          "description": "Human-readable description for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the VIP.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VIP. Does not have to be unique.", 
          "format": "", 
          "type": "string"
        }, 
        "pool_id": {
          "description": "The UUID of the pool with which the VIP is associated.", 
          "format": "", 
          "type": "string"
        }, 
        "port_id": {
          "description": "The UUID of the VIP port.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the virtual IP (VIP) address. A valid value is\n``TCP``, ``HTTP``, or ``HTTPS``.", 
          "format": "", 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port on which to listen to client traffic that is associated\nwith the virtual IP (VIP) address. A valid value is from 0 to\n65535.", 
          "format": "", 
          "type": "integer"
        }, 
        "session_persistence": {
          "description": "Session persistence parameters for the VIP. Omit the\n``session_persistence`` parameter to prevent session persistence.\nWhen no session persistence is used, the ``session_persistence``\nparameter does not appear in the API response. To clear session\npersistence for the VIP, set the ``session_persistence`` parameter\nto ``null`` in a VIP update request.", 
          "format": "", 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the VIP. Indicates whether the VIP is operational.", 
          "format": "", 
          "type": "string"
        }, 
        "status_description": {
          "description": "Human-readable description of the status.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The UUID of the subnet on which to allocate the virtual IP (VIP)\naddress.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The UUID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vip": {
          "description": "A ``vip`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vip", 
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "subnet_id", 
        "port_id", 
        "address", 
        "protocol", 
        "protocol_port", 
        "pool_id", 
        "session_persistence", 
        "connection_limit", 
        "admin_state_up", 
        "status", 
        "status_description"
      ], 
      "type": "object"
    }, 
    "updateVPNService": {
      "example": {
        "application/json": {
          "vpnservice": {
            "description": "Updated description"
          }
        }
      }, 
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up (``true``)\nor down (``false``). If down, connections on service are not\nactive.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "A ``vpnservice`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vpnservice"
      ], 
      "type": "object"
    }, 
    "updateVPNService_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up (``true``)\nor down (``false``). If down, the port does not forward packets.", 
          "format": "", 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "external_v4_ip": {
          "description": "Read-only external (public) IPv4 address that is used for the VPN\nservice. The VPN plugin sets this address if an IPv4 interface is\navailable.", 
          "format": "", 
          "type": "string"
        }, 
        "external_v6_ip": {
          "description": "Read-only external (public) IPv6 address that is used for the VPN\nservice. The VPN plugin sets this address if an IPv6 interface is\navailable.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID for the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "router_id": {
          "description": "The UUID of the router into which the VPN service is inserted.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether IPSec VPN service is currently operational. Value\nis ``ACTIVE``, ``DOWN``, ``BUILD``, ``ERROR``, ``PENDING_CREATE``,\n``PENDING_UPDATE``, or ``PENDING_DELETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "(Deprecated) The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The owner of the VPN service. Only administrative users can specify\na tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "A ``vpnservice`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "vpnservice", 
        "router_id", 
        "status", 
        "name", 
        "admin_state_up", 
        "external_v4_ip", 
        "external_v6_ip", 
        "subnet_id", 
        "tenant_id", 
        "id", 
        "description"
      ], 
      "type": "object"
    }, 
    "updateVpnEndpointGroup": {
      "example": {
        "application/json": {
          "endpoint_group": {
            "description": "New description"
          }
        }
      }, 
      "properties": {
        "description": {
          "description": "Human-readable description for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN endpoint group. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateVpnEndpointGroup_200": {
      "properties": {
        "description": {
          "description": "Human-readable description for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "endpoints": {
          "description": "A list of endpoints of the same type for the endpoint group. Theses\nvalues depend on the type.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "The UUID for the VPN endpoint group.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN endpoint group. Does not have to be\nunique.", 
          "format": "", 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN endpoint group. Only administrative users can\nspecify a tenant UUID other than their own.", 
          "format": "", 
          "type": "string"
        }, 
        "type": {
          "description": "The type of the endpoints in the group. A valid value is\n``subnet``, ``cidr``, ``network``, ``router``, or ``vlan``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "tenant_id", 
        "name", 
        "description", 
        "type", 
        "endpoints"
      ], 
      "type": "object"
    }
  }, 
  "externalDocs": {
    "description": "OpenStack Docs", 
    "url": "http://docs.openstack.org"
  }, 
  "host": "developer.openstack.org", 
  "info": {
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "title": "Networking extensions", 
    "version": "v2", 
    "x-service": "networking-extensions"
  }, 
  "paths": {
    "/v2.0/extensions": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Extensions introduce features and vendor-specific functionality to\nthe API.\n\nThe response shows the extension name and its alias. To show\ndetails for an extension, you specify the alias.", 
        "operationId": "listExtensions", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "extensions": [
                  {
                    "alias": "service-type", 
                    "description": "API for retrieving service providers for Neutron advanced services", 
                    "links": [], 
                    "name": "Neutron Service Type Management", 
                    "updated": "2013-01-20T00:00:00-00:00"
                  }, 
                  {
                    "alias": "security-group", 
                    "description": "The security groups extension.", 
                    "links": [], 
                    "name": "security-group", 
                    "updated": "2012-10-05T10:00:00-00:00"
                  }, 
                  {
                    "alias": "l3_agent_scheduler", 
                    "description": "Schedule routers among l3 agents", 
                    "links": [], 
                    "name": "L3 Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "lbaas_agent_scheduler", 
                    "description": "Schedule pools among lbaas agents", 
                    "links": [], 
                    "name": "Loadbalancer Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "ext-gw-mode", 
                    "description": "Extension of the router abstraction for specifying whether SNAT should occur on the external gateway", 
                    "links": [], 
                    "name": "Neutron L3 Configurable external gateway mode", 
                    "updated": "2013-03-28T10:00:00-00:00"
                  }, 
                  {
                    "alias": "binding", 
                    "description": "Expose port bindings of a virtual port to external application", 
                    "links": [], 
                    "name": "Port Binding", 
                    "updated": "2014-02-03T10:00:00-00:00"
                  }, 
                  {
                    "alias": "provider", 
                    "description": "Expose mapping of virtual networks to physical networks", 
                    "links": [], 
                    "name": "Provider Network", 
                    "updated": "2012-09-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "agent", 
                    "description": "The agent management extension.", 
                    "links": [], 
                    "name": "agent", 
                    "updated": "2013-02-03T10:00:00-00:00"
                  }, 
                  {
                    "alias": "quotas", 
                    "description": "Expose functions for quotas management per tenant", 
                    "links": [], 
                    "name": "Quota management support", 
                    "updated": "2012-07-29T10:00:00-00:00"
                  }, 
                  {
                    "alias": "dhcp_agent_scheduler", 
                    "description": "Schedule networks among dhcp agents", 
                    "links": [], 
                    "name": "DHCP Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "multi-provider", 
                    "description": "Expose mapping of virtual networks to multiple physical networks", 
                    "links": [], 
                    "name": "Multi Provider Network", 
                    "updated": "2013-06-27T10:00:00-00:00"
                  }, 
                  {
                    "alias": "external-net", 
                    "description": "Adds external network attribute to network resource.", 
                    "links": [], 
                    "name": "Neutron external network", 
                    "updated": "2013-01-14T10:00:00-00:00"
                  }, 
                  {
                    "alias": "router", 
                    "description": "Router abstraction for basic L3 forwarding between L2 Neutron networks and access to external networks via a NAT gateway.", 
                    "links": [], 
                    "name": "Neutron L3 Router", 
                    "updated": "2012-07-20T10:00:00-00:00"
                  }, 
                  {
                    "alias": "allowed-address-pairs", 
                    "description": "Provides allowed address pairs", 
                    "links": [], 
                    "name": "Allowed Address Pairs", 
                    "updated": "2013-07-23T10:00:00-00:00"
                  }, 
                  {
                    "alias": "extra_dhcp_opt", 
                    "description": "Extra options configuration for DHCP. For example PXE boot options to DHCP clients can be specified (e.g. tftp-server, server-ip-address, bootfile-name)", 
                    "links": [], 
                    "name": "Neutron Extra DHCP opts", 
                    "updated": "2013-03-17T12:00:00-00:00"
                  }, 
                  {
                    "alias": "lbaas", 
                    "description": "Extension for LoadBalancing service", 
                    "links": [], 
                    "name": "LoadBalancing service", 
                    "updated": "2012-10-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "extraroute", 
                    "description": "Extra routes configuration for L3 router", 
                    "links": [], 
                    "name": "Neutron Extra Route", 
                    "updated": "2013-02-01T10:00:00-00:00"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listExtensions_200"
            }
          }, 
          "203": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists available extensions.", 
        "tags": [
          "extensions"
        ], 
        "x-title": "List extensions"
      }
    }, 
    "/v2.0/extensions/{alias}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showExtension", 
        "parameters": [
          {
            "description": "The alias of an extension.", 
            "format": "", 
            "in": "path", 
            "name": "alias", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "extension": {
                  "alias": "agent", 
                  "description": "The agent management extension.", 
                  "links": [], 
                  "name": "agent", 
                  "updated": "2013-02-03T10:00:00-00:00"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showExtension_200"
            }
          }, 
          "203": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for an extension, by alias.", 
        "tags": [
          "extensions"
        ], 
        "x-title": "Show extension details"
      }
    }, 
    "/v2.0/flavors": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list can be empty.\n\nStandard query parameters are supported on the URI. For example,\n``fields`` can be used to limit the returned response to just name\nby appending ``?fields=name``. If Neutron configuration supports\npagination by overriding allow_pagination = false, the ``marker``\nquery parameter can set the last element id the client has seen and\n``limit`` set the maximum number of items to return. if Neutron\nconfiguration has allow_sorting = true, ``sort_key`` and\n``sort_dir`` pairs can be used where sort direction is 'asc' or\n'desc'.", 
        "operationId": "listFlavors", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "flavors": [
                  {
                    "description": "", 
                    "enabled": true, 
                    "id": "f7b14d9a-b0dc-4fbe-bb14-a0f4970a69e0", 
                    "name": "dummy", 
                    "service_profiles": [], 
                    "service_type": "LOADBALANCERV2"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listFlavors_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all flavors visible for the tenant account.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "List flavors"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation establishes a new flavor.\n\nThe service_type to which the flavor applies is a required\nparameter. The corresponding service plugin must have been\nactivated as part of the configuration. See `Service providers\n<http://developer.openstack.org/api-ref-networking-v2.html#service-\ntype>`_ for how to see currently loaded service types. Additionally\nthe service plugin needs to support the use of flavors. For\nexample, the LOADBALANCERV2 service type using the LBaaSv2 API\ncurrently supports Neutron service flavors.\n\nCreation currently limited to administrators. Other users will\nreceive a ``Forbidden 403`` response code with a response body\nNeutronError message expressing that creation is disallowed by\npolicy.\n\nUntil one or more service profiles are associated with the flavor\nby the operator, attempts to use the flavor during resource\ncreations will currently return a ``Not Found 404`` with a response\nbody that indicates no service profile could be found.\n\nIf the API cannot fulfill the request due to insufficient data or\ndata that is not valid, the service returns the HTTP ``Bad Request\n(400)`` response code with information about the failure in the\nresponse body. Validation errors require that you correct the error\nand submit the request again.", 
        "operationId": "createFlavor", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createFlavor"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "flavor": {
                  "description": "Dummy flavor", 
                  "enabled": true, 
                  "id": "7fc0581b-4509-49e1-90eb-c953c877fa4c", 
                  "name": "dummy", 
                  "service_profiles": [], 
                  "service_type": "LOADBALANCERV2"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createFlavor_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a flavor.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Create flavor"
      }
    }, 
    "/v2.0/flavors/{flavor_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteFlavor", 
        "parameters": [
          {
            "description": "The UUID of the flavor.", 
            "format": "", 
            "in": "path", 
            "name": "flavor_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a flavor.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Delete flavor"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a flavor object by ID. If you are not an\nadministrative user and the flavor object is not visible to your\ntenant account, the service returns the HTTP ``Forbidden (403)``\nresponse code.", 
        "operationId": "showFlavor", 
        "parameters": [
          {
            "description": "The UUID of the flavor.", 
            "format": "", 
            "in": "path", 
            "name": "flavor_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "flavor": {
                  "description": "", 
                  "enabled": true, 
                  "id": "f7b14d9a-b0dc-4fbe-bb14-a0f4970a69e0", 
                  "name": "dummy", 
                  "service_profiles": [], 
                  "service_type": "LOADBALANCERV2"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showFlavor_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a flavor.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Show flavor details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "The service_type cannot be updated as there may be associated\nservice profiles and consumers depending on the value.", 
        "operationId": "updateFlavor", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateFlavor"
            }
          }, 
          {
            "description": "The UUID of the flavor.", 
            "format": "", 
            "in": "path", 
            "name": "flavor_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "flavor": {
                  "description": "New description", 
                  "enabled": false, 
                  "id": "7fc0581b-4509-49e1-90eb-c953c877fa4c", 
                  "name": "newname", 
                  "service_profiles": [], 
                  "service_type": "LOADBALANCERV2"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateFlavor_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a flavor.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Update flavor"
      }
    }, 
    "/v2.0/flavors/{flavor_id}/service_profiles": {
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "A flavor can be associated with more than one profile.\n\nWill return ``409 Conflict`` if association already exists.", 
        "operationId": "associateFlavor", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/associateFlavor"
            }
          }, 
          {
            "description": "The UUID of the flavor.", 
            "format": "", 
            "in": "path", 
            "name": "flavor_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "service_profile": {
                  "id": "7fc0581b-4509-49e1-90eb-c953c877fa4c"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/associateFlavor_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Associate a flavor with a service profile.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Associate flavor"
      }
    }, 
    "/v2.0/flavors/{flavor_id}/service_profiles/{profile_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "disassociateFlavor", 
        "parameters": [
          {
            "description": "The UUID of the flavor.", 
            "format": "", 
            "in": "path", 
            "name": "flavor_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the profile.", 
            "format": "", 
            "in": "path", 
            "name": "profile_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Disassociate a flavor from a service profile.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Disassociate a flavor."
      }
    }, 
    "/v2.0/floatingips": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Default policy settings return only those floating IPs that are\nowned by the tenant who submits the request, unless an admin user\nsubmits the request.\n\nThis example request lists floating IPs in JSON format:\n\n::\n\n   GET /v2.0/floatingips\n   Accept: application/json\n\nUse the ``fields`` query parameter to control which fields are\nreturned in the response body. Additionally, you can filter results\nby using query string parameters. For information, see `Filtering\nand Column Selection <https://wiki.openstack.org/wiki/Neutron/APIv2\n-specification#Filtering_and_Column_Selection>`_.", 
        "operationId": "listFloatingIps", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "floatingips": [
                  {
                    "fixed_ip_address": "10.0.0.3", 
                    "floating_ip_address": "172.24.4.228", 
                    "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                    "id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7", 
                    "port_id": "ce705c24-c1ef-408a-bda3-7bbd946164ab", 
                    "router_id": "d23abc8d-2991-4a55-ba98-2aaea84cc72f", 
                    "status": "ACTIVE", 
                    "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                  }, 
                  {
                    "fixed_ip_address": null, 
                    "floating_ip_address": "172.24.4.227", 
                    "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                    "id": "61cea855-49cb-4846-997d-801b70c71bdd", 
                    "port_id": null, 
                    "router_id": null, 
                    "status": "DOWN", 
                    "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listFloatingIps_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists floating IPs that are accessible to the tenant who submits the request.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "List floating IPs"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "To associate the floating IP with an internal port, specify the\nport UUID attribute in the request body. If you do not specify a\nport UUID in the request, you can issue a PUT request instead of a\nPOST request.\n\nDefault policy settings enable only administrative users to set\nfloating IP addresses and some non-administrative users might\nrequire a floating IP address. If you do not specify a floating IP\naddress in the request, the operation automatically allocates one.\n\nBy default, this operation associates the floating IP address with\na single fixed IP address that is configured on an OpenStack\nNetworking port. If a port has multiple IP addresses, you must\nspecify the ``fixed_ip_address`` attribute in the request body to\nassociate a fixed IP address with the floating IP address.\n\nYou can create floating IPs on only external networks. When you\ncreate a floating IP, you must specify the UUID of the network on\nwhich you want to create the floating IP. Alternatively, you can\ncreate a floating IP on a subnet in the external network, based on\nthe costs and quality of that subnet.\n\nYou must configure an IP address with the internal OpenStack\nNetworking port that is associated with the floating IP address.\n\nError codes:\n\n- ``400`` The operation returns this error code for one of these\n  reasons:\n\n  - The network is not external, such as ``router:external=False``.\n\n  - The internal OpenStack Networking port is not associated with the\n    floating IP address.\n\n  - The requested floating IP address does not fall in the subnet\n    range for the external network.\n\n  - The fixed IP address is not valid.\n\n- ``401`` The operation is not authorized.\n\n- ``404`` The port UUID is not valid.\n\n- ``409`` The operation returns this error code for one of these\n  reasons:\n\n  - The requested floating IP address is already in use.\n\n  - The internal OpenStack Networking port and fixed IP address are\n    already associated with another floating IP.", 
        "operationId": "createFloatingIp", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createFloatingIp"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "floatingip": {
                  "fixed_ip_address": "10.0.0.3", 
                  "floating_ip_address": "172.24.4.228", 
                  "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                  "id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7", 
                  "port_id": "ce705c24-c1ef-408a-bda3-7bbd946164ab", 
                  "router_id": "d23abc8d-2991-4a55-ba98-2aaea84cc72f", 
                  "status": "ACTIVE", 
                  "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createFloatingIp_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a floating IP, and, if you specify port information, associates the floating IP with an internal port.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Create floating IP"
      }
    }, 
    "/v2.0/floatingips/{floatingip_id}": {
      "delete": {
        "consumes": [], 
        "description": "This example deletes a floating IP:\n\n::\n\n   DELETE /v2.0/floatingips/{floatingip_id} Accept: application/json", 
        "operationId": "deleteFloatingIp", 
        "parameters": [
          {
            "description": "The UUID of the floating IP address.", 
            "format": "", 
            "in": "path", 
            "name": "floatingip_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a floating IP and, if present, its associated port.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Delete floating IP"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Use the ``fields`` query parameter to control which fields are\nreturned in the response body. For information, see `Filtering and\nColumn Selection <http://specs.openstack.org/openstack /neutron-\nspecs/specs/api/networking_general_api_information.html #filtering-\nand-column-                 selection>`_.\n\nThis example request shows details for a floating IP in JSON\nformat. This example also filters the result by the\n``fixed_ip_address`` and ``floating_ip_address`` fields.\n\n::\n\n   GET /v2.0/floatingips/{floatingip_id}?fields=fixed_ip_address\n   &\n   fields=floating_ip_address\n   Accept: application/json", 
        "operationId": "showFloatingIp", 
        "parameters": [
          {
            "description": "The UUID of the floating IP address.", 
            "format": "", 
            "in": "path", 
            "name": "floatingip_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "floatingip": {
                  "fixed_ip_address": "10.0.0.3", 
                  "floating_ip_address": "172.24.4.228", 
                  "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                  "id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7", 
                  "port_id": "ce705c24-c1ef-408a-bda3-7bbd946164ab", 
                  "router_id": "d23abc8d-2991-4a55-ba98-2aaea84cc72f", 
                  "status": "ACTIVE", 
                  "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showFloatingIp_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a floating IP.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Show floating IP details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "The association process is the same as the process for the create\nfloating IP operation.\n\nTo disassociate a floating IP from a port, set the ``port_id``\nattribute to null or omit it from the request body.\n\nThis example updates a floating IP:\n\n::\n\n   PUT /v2.0/floatingips/{floatingip_id} Accept: application/json\n\nDepending on the request body that you submit, this request\nassociates a port with or disassociates a port from a floating IP.", 
        "operationId": "updateFloatingIp", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateFloatingIp"
            }
          }, 
          {
            "description": "The UUID of the floating IP address.", 
            "format": "", 
            "in": "path", 
            "name": "floatingip_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "floatingip": {
                  "fixed_ip_address": null, 
                  "floating_ip_address": "172.24.4.228", 
                  "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                  "id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7", 
                  "port_id": null, 
                  "router_id": "d23abc8d-2991-4a55-ba98-2aaea84cc72f", 
                  "status": "ACTIVE", 
                  "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateFloatingIp_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a floating IP and its association with an internal port.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Update floating IP"
      }
    }, 
    "/v2.0/fw/firewall_policies": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.", 
        "operationId": "listFirewallPolicies", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall_policies": [
                  {
                    "audited": false, 
                    "description": "", 
                    "firewall_rules": [
                      "8722e0e0-9cc9-4490-9660-8c9a5732fbb0"
                    ], 
                    "id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                    "name": "test-policy", 
                    "shared": false, 
                    "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listFirewallPolicies_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all firewall policies.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "List firewall policies"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createFirewallPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createFirewallPolicy"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall_policy": {
                  "audited": false, 
                  "description": "", 
                  "firewall_rules": [
                    "8722e0e0-9cc9-4490-9660-8c9a5732fbb0"
                  ], 
                  "id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                  "name": "test-policy", 
                  "shared": false, 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createFirewallPolicy_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a firewall policy.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Create firewall policy"
      }
    }, 
    "/v2.0/fw/firewall_policies/{firewall_policy_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteFirewallPolicy", 
        "parameters": [
          {
            "description": "The UUID of the firewall policy.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a firewall policy.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Delete firewall policy"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the user is not an administrative user and the firewall policy\nobject does not belong to the tenant account, this call returns the\n``Forbidden (403)`` response code.", 
        "operationId": "showFirewallPolicy", 
        "parameters": [
          {
            "description": "The UUID of the firewall policy.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall_policy": {
                  "audited": false, 
                  "description": "", 
                  "firewall_rules": [
                    "8722e0e0-9cc9-4490-9660-8c9a5732fbb0"
                  ], 
                  "id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                  "name": "test-policy", 
                  "shared": false, 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showFirewallPolicy_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a firewall policy.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Show firewall policy details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateFirewallPolicy", 
        "parameters": [
          {
            "description": "The UUID of the firewall policy.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall_policy": {
                  "audited": false, 
                  "description": "", 
                  "firewall_rules": [
                    "a08ef905-0ff6-4784-8374-175fffe7dade", 
                    "8722e0e0-9cc9-4490-9660-8c9a5732fbb0"
                  ], 
                  "id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                  "name": "test-policy", 
                  "shared": false, 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateFirewallPolicy_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a firewall policy.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Update firewall policy"
      }
    }, 
    "/v2.0/fw/firewall_policies/{firewall_policy_id}/insert_rule": {
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "A firewall_rule_id is inserted relative to the position of the\nfirewall_rule_id set in ``insert_before`` or ``insert_after``. If\n``insert_before`` is set, ``insert_after`` is ignored. If both\n``insert_before`` and ``insert_after`` are not set, the new\nfirewall_rule_id is inserted at the top of the policy.", 
        "operationId": "insert_ruleFirewallPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/insert_ruleFirewallPolicy"
            }
          }, 
          {
            "description": "The UUID of the firewall policy.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "audited": false, 
                "description": "", 
                "firewall_list": [], 
                "firewall_rules": [
                  "a08ef905-0ff6-4784-8374-175fffe7dade", 
                  "7bc34b8c-8d3b-4ada-a9c8-1f4c11c65692", 
                  "8722e0e0-9cc9-4490-9660-8c9a5732fbb0"
                ], 
                "id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                "name": "test-policy", 
                "shared": false, 
                "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/insert_ruleFirewallPolicy_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Insert firewall rule into a policy.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Insert rule into a firewall policy"
      }
    }, 
    "/v2.0/fw/firewall_policies/{firewall_policy_id}/remove_rule": {
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "remove_ruleFirewallPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/remove_ruleFirewallPolicy"
            }
          }, 
          {
            "description": "The UUID of the firewall policy.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "audited": false, 
                "description": "", 
                "firewall_list": [], 
                "firewall_rules": [
                  "a08ef905-0ff6-4784-8374-175fffe7dade", 
                  "8722e0e0-9cc9-4490-9660-8c9a5732fbb0"
                ], 
                "id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                "name": "test-policy", 
                "shared": false, 
                "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/remove_ruleFirewallPolicy_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Remove firewall rule from a policy.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Remove rule from firewall policy"
      }
    }, 
    "/v2.0/fw/firewall_rules": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.", 
        "operationId": "listFirewallRules", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall_rules": [
                  {
                    "action": "allow", 
                    "description": "", 
                    "destination_ip_address": null, 
                    "destination_port": "80", 
                    "enabled": true, 
                    "firewall_policy_id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                    "id": "8722e0e0-9cc9-4490-9660-8c9a5732fbb0", 
                    "ip_version": 4, 
                    "name": "ALLOW_HTTP", 
                    "position": 1, 
                    "protocol": "tcp", 
                    "shared": false, 
                    "source_ip_address": null, 
                    "source_port": null, 
                    "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listFirewallRules_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all firewall rules.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "List firewall rules"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createFirewallRule", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createFirewallRule"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall_rule": {
                  "action": "allow", 
                  "description": "", 
                  "destination_ip_address": null, 
                  "destination_port": "80", 
                  "enabled": true, 
                  "firewall_policy_id": null, 
                  "id": "8722e0e0-9cc9-4490-9660-8c9a5732fbb0", 
                  "ip_version": 4, 
                  "name": "ALLOW_HTTP", 
                  "position": null, 
                  "protocol": "tcp", 
                  "shared": false, 
                  "source_ip_address": null, 
                  "source_port": null, 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createFirewallRule_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a firewall rule.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Create firewall rule"
      }
    }, 
    "/v2.0/fw/firewall_rules/{firewall_rule_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteFirewallRule", 
        "parameters": [
          {
            "description": "The UUID for the firewall rule.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_rule_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a firewall rule.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Delete firewall rule"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the user is not an administrative user and the firewall rule\nobject does not belong to the tenant account, this call returns the\n``Forbidden (403)`` response code.", 
        "operationId": "showFirewallRule", 
        "parameters": [
          {
            "description": "The UUID for the firewall rule.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_rule_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall_rule": {
                  "action": "allow", 
                  "description": "", 
                  "destination_ip_address": null, 
                  "destination_port": "80", 
                  "enabled": true, 
                  "firewall_policy_id": null, 
                  "id": "8722e0e0-9cc9-4490-9660-8c9a5732fbb0", 
                  "ip_version": 4, 
                  "name": "ALLOW_HTTP", 
                  "position": null, 
                  "protocol": "tcp", 
                  "shared": false, 
                  "source_ip_address": null, 
                  "source_port": null, 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showFirewallRule_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a firewall rule.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Show firewall rule details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateFirewallRule", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateFirewallRule"
            }
          }, 
          {
            "description": "The UUID for the firewall rule.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_rule_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall_rule": {
                  "action": "allow", 
                  "description": "", 
                  "destination_ip_address": null, 
                  "destination_port": "80", 
                  "enabled": true, 
                  "firewall_policy_id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                  "id": "8722e0e0-9cc9-4490-9660-8c9a5732fbb0", 
                  "ip_version": 4, 
                  "name": "ALLOW_HTTP", 
                  "position": 1, 
                  "protocol": "tcp", 
                  "shared": true, 
                  "source_ip_address": null, 
                  "source_port": null, 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateFirewallRule_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a firewall rule.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Update firewall rule"
      }
    }, 
    "/v2.0/fw/firewalls": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.", 
        "operationId": "listFirewalls", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewalls": [
                  {
                    "admin_state_up": true, 
                    "description": "", 
                    "firewall_policy_id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                    "id": "3b0ef8f4-82c7-44d4-a4fb-6177f9a21977", 
                    "name": "", 
                    "router_ids": [
                      "650bfd2f-7766-4a0d-839f-218f33e16998"
                    ], 
                    "status": "ACTIVE", 
                    "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listFirewalls_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all firewalls.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "List firewalls"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The firewall must be associated with a firewall policy.\n\nIf ``admin_state_up`` is ``false``, the firewall would block all\ntraffic.", 
        "operationId": "createFirewall", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createFirewall"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall": {
                  "admin_state_up": true, 
                  "description": "", 
                  "firewall_policy_id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                  "id": "3b0ef8f4-82c7-44d4-a4fb-6177f9a21977", 
                  "name": "", 
                  "router_ids": [
                    "650bfd2f-7766-4a0d-839f-218f33e16998"
                  ], 
                  "status": "PENDING_CREATE", 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createFirewall_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a firewall.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Create firewall"
      }
    }, 
    "/v2.0/fw/firewalls/{firewall_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteFirewall", 
        "parameters": [
          {
            "description": "The UUID of the firewall.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a firewall.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Delete firewall"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the user is not an administrative user and the firewall object\ndoes not belong to the tenant account, this call returns the\n``Forbidden (403)`` response code.", 
        "operationId": "showFirewall", 
        "parameters": [
          {
            "description": "The UUID of the firewall.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall": {
                  "admin_state_up": true, 
                  "description": "", 
                  "firewall_policy_id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                  "id": "3b0ef8f4-82c7-44d4-a4fb-6177f9a21977", 
                  "name": "", 
                  "router_ids": [
                    "650bfd2f-7766-4a0d-839f-218f33e16998"
                  ], 
                  "status": "ACTIVE", 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showFirewall_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a firewall.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Show firewall details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "To update a service, the service status cannot be a ``PENDING_*``\nstatus.", 
        "operationId": "updateFirewall", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateFirewall"
            }
          }, 
          {
            "description": "The UUID of the firewall.", 
            "format": "", 
            "in": "path", 
            "name": "firewall_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "firewall": {
                  "admin_state_up": false, 
                  "description": "", 
                  "firewall_policy_id": "c69933c1-b472-44f9-8226-30dc4ffd454c", 
                  "id": "3b0ef8f4-82c7-44d4-a4fb-6177f9a21977", 
                  "name": "", 
                  "router_ids": [
                    "650bfd2f-7766-4a0d-839f-218f33e16998"
                  ], 
                  "status": "PENDING_UPDATE", 
                  "tenant_id": "45977fa2dbd7482098dd68d0d8970117"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateFirewall_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a firewall.", 
        "tags": [
          "fwaas-v2.0"
        ], 
        "x-title": "Update firewall"
      }
    }, 
    "/v2.0/lb/health_monitors": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listHealthMonitors", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitors": [
                  {
                    "admin_state_up": true, 
                    "delay": 1, 
                    "expected_codes": "200,201,202", 
                    "http_method": "GET", 
                    "id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                    "max_retries": 5, 
                    "pools": [
                      {
                        "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                        "status": "ACTIVE", 
                        "status_description": null
                      }
                    ], 
                    "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                    "timeout": 1, 
                    "type": "HTTP", 
                    "url_path": "/index.html"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listHealthMonitors_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists health monitors.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List health monitors"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createHealthMonitor", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createHealthMonitor"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitor": {
                  "admin_state_up": true, 
                  "delay": 1, 
                  "expected_codes": "200,201,202", 
                  "http_method": "GET", 
                  "id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                  "max_retries": 5, 
                  "pools": [], 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "timeout": 1, 
                  "type": "HTTP", 
                  "url_path": "/index.html"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createHealthMonitor_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a load balancer health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Create a load balancer health monitor"
      }
    }, 
    "/v2.0/lb/health_monitors/{health_monitor_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteHealthMonitor", 
        "parameters": [
          {
            "description": "The UUID for the health monitor.", 
            "format": "", 
            "in": "path", 
            "name": "health_monitor_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a load balancer health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Delete health monitor"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showHealthMonitor", 
        "parameters": [
          {
            "description": "The UUID for the health monitor.", 
            "format": "", 
            "in": "path", 
            "name": "health_monitor_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitor": {
                  "admin_state_up": true, 
                  "delay": 1, 
                  "expected_codes": "200,201,202", 
                  "http_method": "GET", 
                  "id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                  "max_retries": 5, 
                  "pools": [
                    {
                      "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                      "status": "ACTIVE", 
                      "status_description": null
                    }
                  ], 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "timeout": 1, 
                  "type": "HTTP", 
                  "url_path": "/index.html"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showHealthMonitor_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show health monitor details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateHealthMonitor", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateHealthMonitor"
            }
          }, 
          {
            "description": "The UUID for the health monitor.", 
            "format": "", 
            "in": "path", 
            "name": "health_monitor_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitor": {
                  "admin_state_up": false, 
                  "delay": 2, 
                  "expected_codes": "200", 
                  "http_method": "POST", 
                  "id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                  "max_retries": 2, 
                  "pools": [
                    {
                      "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                      "status": "ACTIVE", 
                      "status_description": null
                    }
                  ], 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "timeout": 2, 
                  "type": "HTTP", 
                  "url_path": "/page.html"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateHealthMonitor_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a load balancer health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update health monitor"
      }
    }, 
    "/v2.0/lb/members": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listMembers", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "members": [
                  {
                    "address": "10.0.1.22", 
                    "admin_state_up": true, 
                    "id": "cf024846-7516-4e3a-b0fb-6590322c836f", 
                    "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                    "protocol_port": 90, 
                    "status": "ACTIVE", 
                    "status_description": null, 
                    "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                    "weight": 1
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listMembers_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists members.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List members"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createMember", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createMember"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.1.22", 
                  "admin_state_up": true, 
                  "id": "cf024846-7516-4e3a-b0fb-6590322c836f", 
                  "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "protocol_port": 90, 
                  "status": "PENDING_CREATE", 
                  "status_description": null, 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createMember_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a load balancer member.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Create a load balancer member"
      }
    }, 
    "/v2.0/lb/members/{member_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteMember", 
        "parameters": [
          {
            "description": "The UUID for the member.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a load balancer member.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Delete member"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showMember", 
        "parameters": [
          {
            "description": "The UUID for the member.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.1.22", 
                  "admin_state_up": true, 
                  "id": "cf024846-7516-4e3a-b0fb-6590322c836f", 
                  "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "protocol_port": 90, 
                  "status": "ACTIVE", 
                  "status_description": null, 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showMember_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a member.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show member details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateMember", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateMember"
            }
          }, 
          {
            "description": "The UUID for the member.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.1.22", 
                  "admin_state_up": true, 
                  "id": "cf024846-7516-4e3a-b0fb-6590322c836f", 
                  "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "protocol_port": 90, 
                  "status": "PENDING_UPDATE", 
                  "status_description": null, 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "weight": 5
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateMember_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a load balancer member.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update member"
      }
    }, 
    "/v2.0/lb/pools": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listPools", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "pools": [
                  {
                    "admin_state_up": true, 
                    "description": "", 
                    "health_monitors": [
                      "b7633ade-24dc-4d72-8475-06aa22be5412"
                    ], 
                    "health_monitors_status": [
                      {
                        "monitor_id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                        "status": "ACTIVE", 
                        "status_description": null
                      }
                    ], 
                    "id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                    "lb_algorithm": "ROUND_ROBIN", 
                    "members": [
                      "cf024846-7516-4e3a-b0fb-6590322c836f"
                    ], 
                    "name": "pool1", 
                    "protocol": "HTTP", 
                    "provider": "haproxy", 
                    "status": "ACTIVE", 
                    "status_description": null, 
                    "subnet_id": "aa547115-d710-4d6d-bb2c-b038d9c2704b", 
                    "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                    "vip_id": "388c739a-6a57-4e74-bc7b-a5cd60248bba"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listPools_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists pools.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List pools"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createPool", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createPool"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "simple pool", 
                  "health_monitors": [], 
                  "health_monitors_status": [], 
                  "id": "af95e0ce-8a26-4f29-9524-db41e7769c73", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "members": [], 
                  "name": "my-pool", 
                  "protocol": "HTTP", 
                  "provider": "haproxy", 
                  "status": "PENDING_CREATE", 
                  "status_description": null, 
                  "subnet_id": "e301aed0-d9e7-498a-977c-1bbfaf14ed5d", 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "vip_id": null
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createPool_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a load balancer pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Create a load balancer pool"
      }
    }, 
    "/v2.0/lb/pools/{pool_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deletePool", 
        "parameters": [
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a load balancer pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Delete pool"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showPool", 
        "parameters": [
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "", 
                  "health_monitors": [
                    "b7633ade-24dc-4d72-8475-06aa22be5412"
                  ], 
                  "health_monitors_status": [
                    {
                      "monitor_id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                      "status": "ACTIVE", 
                      "status_description": null
                    }
                  ], 
                  "id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "members": [
                    "cf024846-7516-4e3a-b0fb-6590322c836f"
                  ], 
                  "name": "pool1", 
                  "protocol": "HTTP", 
                  "provider": "haproxy", 
                  "status": "ACTIVE", 
                  "status_description": null, 
                  "subnet_id": "aa547115-d710-4d6d-bb2c-b038d9c2704b", 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "vip_id": "388c739a-6a57-4e74-bc7b-a5cd60248bba"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showPool_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show pool details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updatePool", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updatePool"
            }
          }, 
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "", 
                  "health_monitors": [
                    "b7633ade-24dc-4d72-8475-06aa22be5412"
                  ], 
                  "health_monitors_status": [
                    {
                      "monitor_id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                      "status": "ACTIVE", 
                      "status_description": null
                    }
                  ], 
                  "id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "members": [
                    "cf024846-7516-4e3a-b0fb-6590322c836f"
                  ], 
                  "name": "SuperPool", 
                  "protocol": "HTTP", 
                  "provider": "haproxy", 
                  "status": "PENDING_UPDATE", 
                  "status_description": null, 
                  "subnet_id": "aa547115-d710-4d6d-bb2c-b038d9c2704b", 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "vip_id": "388c739a-6a57-4e74-bc7b-a5cd60248bba"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updatePool_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a load balancer pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update pool"
      }
    }, 
    "/v2.0/lb/pools/{pool_id}/health_monitors": {
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "associateHealthMonitor", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/associateHealthMonitor"
            }
          }, 
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitor": {}
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/associateHealthMonitor_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Associates a health monitor with a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Associate health monitor with pool"
      }
    }, 
    "/v2.0/lb/pools/{pool_id}/health_monitors/{health_monitor_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "disassociateHealthMonitor", 
        "parameters": [
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID for the health monitor.", 
            "format": "", 
            "in": "path", 
            "name": "health_monitor_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Disassociates a health monitor from a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Disassociate health monitor from pool"
      }
    }, 
    "/v2.0/lb/vips": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.", 
        "operationId": "listVIPs", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "vips": [
                  {
                    "address": "10.0.0.4", 
                    "admin_state_up": true, 
                    "connection_limit": -1, 
                    "description": "", 
                    "id": "388c739a-6a57-4e74-bc7b-a5cd60248bba", 
                    "name": "my-Vip", 
                    "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                    "port_id": "5328aeea-2988-41c0-b5fe-0fd0660979d3", 
                    "protocol": "HTTP", 
                    "protocol_port": 80, 
                    "session_persistence": null, 
                    "status": "ACTIVE", 
                    "status_description": null, 
                    "subnet_id": "aa547115-d710-4d6d-bb2c-b038d9c2704b", 
                    "tenant_id": "eabfefa3fd1740a88a47ad98e132d238"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listVIPs_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists VIPs.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List VIPs"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createVIP", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createVIP"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "vip": {
                  "address": "10.0.0.4", 
                  "admin_state_up": true, 
                  "connection_limit": -1, 
                  "description": "", 
                  "id": "fa0373e0-9dd4-4ff7-98fc-8cceca9bdb4e", 
                  "name": "NewVip", 
                  "pool_id": "105320c3-8416-4997-9c1c-4098b95fdaca", 
                  "port_id": "0ba4cd9c-edb4-4594-bac4-b68b49d5f04c", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "session_persistence": null, 
                  "status": "PENDING_CREATE", 
                  "status_description": null, 
                  "subnet_id": "0ba2ef27-0054-4b28-a8fa-f215e8079272", 
                  "tenant_id": "e68c3e65e1f34ee9b2357d0fe418a78b"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createVIP_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a load balancer VIP.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Create a load balancer VIP"
      }
    }, 
    "/v2.0/lb/vips/{vip_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteVIP", 
        "parameters": [
          {
            "description": "The UUID for the VIP.", 
            "format": "", 
            "in": "path", 
            "name": "vip_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a load balancer VIP.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Delete VIP"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showVIP", 
        "parameters": [
          {
            "description": "The UUID for the VIP.", 
            "format": "", 
            "in": "path", 
            "name": "vip_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "vip": {
                  "address": "10.0.0.4", 
                  "admin_state_up": true, 
                  "connection_limit": -1, 
                  "description": "", 
                  "id": "388c739a-6a57-4e74-bc7b-a5cd60248bba", 
                  "name": "my-Vip", 
                  "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "port_id": "5328aeea-2988-41c0-b5fe-0fd0660979d3", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "session_persistence": null, 
                  "status": "ACTIVE", 
                  "status_description": null, 
                  "subnet_id": "aa547115-d710-4d6d-bb2c-b038d9c2704b", 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showVIP_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a VIP.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show VIP details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateVIP", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateVIP"
            }
          }, 
          {
            "description": "The UUID for the VIP.", 
            "format": "", 
            "in": "path", 
            "name": "vip_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "vip": {
                  "address": "10.0.0.4", 
                  "admin_state_up": true, 
                  "connection_limit": 1000, 
                  "description": "", 
                  "id": "fa0373e0-9dd4-4ff7-98fc-8cceca9bdb4e", 
                  "name": "NewVip", 
                  "pool_id": "105320c3-8416-4997-9c1c-4098b95fdaca", 
                  "port_id": "0ba4cd9c-edb4-4594-bac4-b68b49d5f04c", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "session_persistence": null, 
                  "status": "PENDING_UPDATE", 
                  "status_description": null, 
                  "subnet_id": "0ba2ef27-0054-4b28-a8fa-f215e8079272", 
                  "tenant_id": "e68c3e65e1f34ee9b2357d0fe418a78b"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateVIP_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a load balancer VIP.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update VIP"
      }
    }, 
    "/v2.0/lbaas/health_monitors": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation lists all health monitors that are associated with\nyour tenant account.\n\nThis operation returns a list, which might be empty.", 
        "operationId": "listHealthMonitorsv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitors": [
                  {
                    "admin_state_up": true, 
                    "delay": 1, 
                    "expected_codes": "200,201,202", 
                    "http_method": "GET", 
                    "id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                    "max_retries": 5, 
                    "pools": [
                      {
                        "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                        "status": "ACTIVE", 
                        "status_description": null
                      }
                    ], 
                    "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                    "timeout": 1, 
                    "type": "HTTP", 
                    "url_path": "/index.html"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listHealthMonitorsv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists health monitors.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List health monitors"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a health monitor by using the\nconfiguration that you define in the request object. After the API\nvalidates the request and start the provisioning process, it\nreturns a response object. The object contains a unique identifier.\n\nAt a minimum, you must specify these health monitor attributes:\n\n- ``tenant_id``. Admin only. Required to create a health monitor for\n  another tenant.\n\n- ``type``. The type of health monitor. A valid value is ``TCP``,\n  ``HTTP``, or ``HTTPS``.\n\n- ``delay``. The interval, in seconds, between health checks.\n\n- ``timeout``. The time, in seconds, after which a health check\n  times out.\n\n- ``max_retries``. Number of failed health checks before marked as\n  OFFLINE.\n\n- ``pool_id``. The pool to monitor.\n\nSome attributes receive default values if you omit them from the\nrequest, and are only useful when you specify a health monitor type\nof HTTP(S):\n\n- ``http_method``. Default is ``GET``.\n\n- ``url_path``. Default is ``/``.\n\n- ``expected_codes``. The expected HTTP status codes to get from a\n  successful health check. Default is ``200``.\n\n- ``admin_state_up``. Default is ``true``.\n\nIf the API cannot fulfill the request due to insufficient data or\ndata that is not valid, it returns the ``Bad Request (400)``\nresponse code with information about the nature of the failure in\nthe response body. Failures in the validation process are non-\nrecoverable and require that you correct the cause of the failure\nand submit the request again.\n\nYou can configure all documented features of the health monitor at\ncreation time by specifying the additional elements or attributes\nin the request.\n\nAdministrative users can specify a tenant ID that is different than\ntheir own to create health monitors for other tenants.\n\nTo update a health monitor, the load balancer to which to attach\nmust have an ``ACTIVE`` provisioning status.", 
        "operationId": "createHealthMonitorv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createHealthMonitorv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitor": {
                  "admin_state_up": true, 
                  "delay": 1, 
                  "expected_codes": "200,201,202", 
                  "http_method": "GET", 
                  "id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                  "max_retries": 5, 
                  "pools": [], 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "timeout": 1, 
                  "type": "HTTP", 
                  "url_path": "/index.html"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createHealthMonitorv2_201"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Create health monitor"
      }
    }, 
    "/v2.0/lbaas/health_monitors/{health_monitor_id}": {
      "delete": {
        "consumes": [], 
        "description": "The API immediately purges any and all configuration data. You\ncannot recover it.\n\nYou cannot delete a health monitor if the attached load balancer\ndoes not have an ``ACTIVE`` provisioning status.\n\nExample: Delete a health monitor", 
        "operationId": "deleteHealthMonitorv2", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a health monitor and its associated configuration from the tenant account.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Remove health monitor"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a health monitor object, by health monitor\nID. If you are not an administrative user and the health monitor\nobject does not belong to your tenant account, the service returns\nthe HTTP ``Forbidden (403)`` response code.\n\nExample: Show health monitor details", 
        "operationId": "showHealthMonitorv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitor": {
                  "admin_state_up": true, 
                  "delay": 1, 
                  "expected_codes": "200,201,202", 
                  "http_method": "GET", 
                  "id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                  "max_retries": 5, 
                  "pools": [
                    {
                      "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                      "status": "ACTIVE", 
                      "status_description": null
                    }
                  ], 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "timeout": 1, 
                  "type": "HTTP", 
                  "url_path": "/index.html"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showHealthMonitorv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show health monitor details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "Upon successful validation of the request, the service returns the\nHTTP ``Accepted (202)`` response code.\n\nNote: The health monitor UUID, ``tenant_id``, ``pool_id``, and type\nare immutable attributes and cannot be updated. If you specify an\nunsupported attribute, the service returns the HTTP ``Immutable\n(422)`` response code.", 
        "operationId": "updateHealthMonitorv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateHealthMonitorv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "health_monitor": {
                  "admin_state_up": false, 
                  "delay": 2, 
                  "expected_codes": "200", 
                  "http_method": "POST", 
                  "id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                  "max_retries": 2, 
                  "pools": [
                    {
                      "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                      "status": "ACTIVE", 
                      "status_description": null
                    }
                  ], 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "timeout": 2, 
                  "type": "HTTP", 
                  "url_path": "/page.html"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateHealthMonitorv2_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update health monitor"
      }
    }, 
    "/v2.0/lbaas/listeners": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation lists all listeners that are associated with your\ntenant account.\n\nThe list might be empty.\n\nExample: List listeners", 
        "operationId": "listListenersv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "listeners": [
                  {
                    "admin_state_up": true, 
                    "connection_limit": 100, 
                    "default_pool_id": null, 
                    "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                    "description": "", 
                    "id": "35cb8516-1173-4035-8dae-0dae3453f37f", 
                    "loadbalancers": [
                      {
                        "id": "a9729389-6147-41a3-ab22-a24aed8692b2"
                      }
                    ], 
                    "name": "", 
                    "protocol": "HTTP", 
                    "protocol_port": 80, 
                    "sni_container_refs": [
                      "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                      "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
                    ], 
                    "tenant_id": "3e4d8bec50a845fcb09e03a4375c691d"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listListenersv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all listeners.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List listeners"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a new listener by using the configuration\nthat you define in the request object. After the request is\nvalidated and the provisioning process begins, a response object is\nreturned. The object contains a unique identifier.\n\nAt a minimum, you must specify these listener attributes:\n\n- ``tenant_id``. Admin only. Required to create a listener for\n  another tenant.\n\n- ``loadbalancer_id``. The load balancer on which to provision this\n  listener. A tenant can only create listeners on load balancers\n  that the policy authorizes. For example, her own load balancers.\n\n- ``description``. The load balancer description.\n\n- ``protocol``. The protocol for which the front end listens. Must\n  be ``HTTP``, ``HTTPS``, ``TCP``, or ``TERMINATED_HTTPS``.\n\nSome attributes receive default values if you omit them from the\nrequest:\n\n- ``protocol_port``. The port on which the front end listens. Must\n  be an integer from 1 to 65535.\n\n- ``default_tls_container_ref``. The reference to a container that\n  holds TLS secrets. If you also specify ``sni_container_refs``,\n  this container is the default. This parameter is required for the\n  ``TERMINATED_HTTPS`` protocol.\n\n- ``sni_container_refs``. A list of references to containers that\n  hold TLS secrets for server name indication (SNI). This parameter\n  is required for the ``TERMINATED_HTTPS`` protocol.\n\n- ``admin_state_up``. Default is ``true``.\n\n- ``name``. Default is an empty string.\n\n- ``description``. Default is an empty string.\n\n- ``connection_limit``. Default is ``-1``, which indicates an\n  infinite limit.\n\nIf the API cannot fulfill the request due to insufficient data or\ndata that is not valid, the service returns the HTTP ``Bad Request\n(400)`` response code with information about the failure in the\nresponse body. Validation errors require that you correct the error\nand submit the request again.\n\nYou can configure all documented features of the listener at\ncreation time by specifying the additional elements or attributes\nin the request.\n\nAdministrative users can specify a tenant ID that is different than\ntheir own to create listeners for other tenants.\n\nTo update a listener, the load balancer to which to attach must\nhave an ``ACTIVE`` provisioning status.", 
        "operationId": "createListenerv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createListenerv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "listener": {
                  "admin_state_up": true, 
                  "connection_limit": 100, 
                  "default_pool_id": null, 
                  "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "description": "listener one", 
                  "id": "39de4d56-d663-46e5-85a1-5b9d5fa17829", 
                  "loadbalancers": [
                    {
                      "id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c"
                    }
                  ], 
                  "name": "listener1", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "sni_container_refs": [
                    "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                    "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
                  ], 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createListenerv2_201"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a listener.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Create listener"
      }
    }, 
    "/v2.0/lbaas/listeners/{listener_id}": {
      "delete": {
        "consumes": [], 
        "description": "This operation removes a listener and its associated configuration\nfrom the tenant account. The API immediately purges any and all\nconfiguration data. You cannot recover it.\n\nYou cannot delete a listener if the load balancer to which it is\nattached does not have an ``ACTIVE`` provisioning status.\n\nExample: Delete a listener", 
        "operationId": "deleteListenerv2", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a listener.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Remove listener"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a listener object, by ID. If you are not an\nadministrative user and the listener object does not belong to your\naccount, the API returns the HTTP ``Forbidden (403)`` response\ncode.\n\nExample: Show listener details", 
        "operationId": "showListenerv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "listener": {
                  "admin_state_up": true, 
                  "connection_limit": 100, 
                  "default_pool_id": null, 
                  "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "description": "", 
                  "id": "35cb8516-1173-4035-8dae-0dae3453f37f", 
                  "loadbalancers": [
                    {
                      "id": "a9729389-6147-41a3-ab22-a24aed8692b2"
                    }
                  ], 
                  "name": "", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "sni_container_refs": [
                    "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                    "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
                  ], 
                  "tenant_id": "3e4d8bec50a845fcb09e03a4375c691d"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showListenerv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a listener.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show listener details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation updates the attributes of a listener. Upon\nsuccessful validation of the request, the service returns the HTTP\n``Accepted (202)`` response code.\n\nNote: You cannot update the ``listener_id``, ``tenant_id``,\n``loadbalancer_id``, ``loadbalancers``, ``default_pool_id``,\n``protocol``, and ``protocol_port`` attributes. Attempting to\nupdate an immutable attribute results in the HTTP ``Immutable\n(422)`` response code.\n\nNote: You cannot update a listener if the load balancer to which\nthe listener is attached does not have an ``ACTIVE`` provisioning\nstatus.", 
        "operationId": "updateListenerv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateListenerv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "listener": {
                  "admin_state_up": false, 
                  "connection_limit": 200, 
                  "default_pool_id": null, 
                  "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "description": "listener two", 
                  "id": "39de4d56-d663-46e5-85a1-5b9d5fa17829", 
                  "loadbalancers": [
                    {
                      "id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c"
                    }
                  ], 
                  "name": "listener2", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "sni_container_refs": [
                    "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                    "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
                  ], 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateListenerv2_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a listener.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update listener"
      }
    }, 
    "/v2.0/lbaas/loadbalancers": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.", 
        "operationId": "listLoadBalancersv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "loadbalancers": [
                  {
                    "admin_state_up": true, 
                    "description": "simple lb", 
                    "id": "a9729389-6147-41a3-ab22-a24aed8692b2", 
                    "listeners": [], 
                    "name": "loadbalancer1", 
                    "operating_status": "ONLINE", 
                    "provisioning_status": "ACTIVE", 
                    "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                    "vip_address": "10.0.0.2", 
                    "vip_subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listLoadBalancersv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all load balancers for the tenant account.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List load balancers"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a new load balancer by using the\nconfiguration that you define in the request object. After the API\nvalidates the request and starts the provisioning process, the API\nreturns a response object that contains a unique ID and the status\nof provisioning the load balancer.\n\nIn the response, the load balancer provisioning status is\n``ACTIVE``, ``PENDING_CREATE``, or ``ERROR``.\n\nIf the status is ``PENDING_CREATE``, issue GET\n``/lbaas/loadbalancers/loadbalancer_id`` to view the progress of\nthe provisioning operation. When the load balancer status changes\nto ``ACTIVE``, the load balancer is successfully provisioned and\noperational for traffic handling.\n\nIf the API cannot fulfill the request due to insufficient data or\ndata that is not valid, the service returns the HTTP ``Bad Request\n(400)`` response code with information about the failure in the\nresponse body. Validation errors require that you correct the error\nand submit the request again.\n\nYou can configure all documented features of the load balancer at\ncreation time by specifying the additional elements or attributes\nin the request.\n\nAdministrative users can specify a tenant ID that is different than\ntheir own to create load balancers for other tenants.\n\n**Example: Create a load balancer**\n\n- ``tenant_id``. Admin only. Required to create a load balancer for\n  another tenant.\n\n- ``vip_subnet_id``. The network on which to allocate the VIP\n  address for the load balancer. A tenant can only create load\n  balancer VIPs on networks that the policy authorizes, such as her\n  own networks or shared or provider networks.\n\nSome attributes receive default values if you omit them from the\nrequest:\n\n- ``admin_state_up``. Default is ``true``.\n\n- ``name``. Default is an empty string.\n\n- ``description``. Default is an empty string.\n\nIf the API cannot fulfill the request due to insufficient data or\ndata that is not valid, the service returns the HTTP ``Bad Request\n(400)`` response code with information about the failure in the\nresponse body. Validation errors require that you correct the error\nand submit the request again.\n\nYou can configure all documented features of the load balancer at\ncreation time by specifying the additional elements or attributes\nin the request.\n\nAdministrative users can specify a tenant ID that is different than\ntheir own to create load balancers for other tenants.\n\nIf you own the subnet where you want to create the load balancer\nVIP, you can specify a ``vip_address`` attribute. If you omit the\n``vip_address`` attribute from the payload, the LBaaS service\nallocates a VIP address from the subnet of the load balancer VIP.\n\nAn optional ``flavor`` attribute can be passed to enable dynamic\nselection of an appropriate provider if configured by the operator.\nThe basic selection algorithm chooses the provider in the first\nservice profile currently associated with flavor.\n\nYou can also specify the ``provider`` attribute when you create a\nload balancer. You can set this attribute to any service provider\nwith a ``LOADBALANCER`` service type. Setting both a flavor and a\nprovider will result in a conflict error.\n\nExample: Create a load balancer", 
        "operationId": "createLoadBalancerv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createLoadBalancerv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "loadbalancer": {
                  "admin_state_up": true, 
                  "description": "simple lb", 
                  "flavor": "a7ae5d5a-d855-4f9a-b187-af66b53f4d04", 
                  "id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "listeners": [], 
                  "name": "loadbalancer1", 
                  "operating_status": "ONLINE", 
                  "provider": "sample_provider", 
                  "provisioning_status": "ACTIVE", 
                  "tenant_id": "b7c1a69e88bf4b21a8148f787aef2081", 
                  "vip_address": "10.0.0.4", 
                  "vip_subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createLoadBalancerv2_201"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a load balancer.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Create load balancer"
      }
    }, 
    "/v2.0/lbaas/loadbalancers/{loadbalancer_id}": {
      "delete": {
        "consumes": [], 
        "description": "The API immediately purges any and all configuration data. You\ncannot recover it.\n\nExample: Delete a load balancer", 
        "operationId": "deleteLoadBalancerv2", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a load balancer and its associated configuration from the tenant account.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Remove load balancer"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a load balancer object, by ID. If you are\nnot an administrative user and the load balancer object does not\nbelong to your tenant account, the service returns the HTTP\n``Forbidden (403)`` response code.", 
        "operationId": "showLoadBalancerv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "loadbalancer": {
                  "admin_state_up": true, 
                  "description": "simple lb", 
                  "id": "a9729389-6147-41a3-ab22-a24aed8692b2", 
                  "listeners": [], 
                  "name": "loadbalancer1", 
                  "operating_status": "ONLINE", 
                  "provisioning_status": "ACTIVE", 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                  "vip_address": "10.0.0.2", 
                  "vip_subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showLoadBalancerv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a load balancer.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show load balancer details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the request is valid, the service returns the ``Accepted (202)``\nresponse code. To confirm the update, check that the load balancer\nprovisioning status is ``ACTIVE``. If the status is\n``PENDING_UPDATE``, use a GET operation to poll the load balancer\nobject for changes.\n\nThis operation returns the updated load balancer object with the\n``ACTIVE``, ``PENDING_UPDATE``, or ``ERROR`` provisioning status.", 
        "operationId": "updateLoadBalancerv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateLoadBalancerv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "loadbalancer": {
                  "admin_state_up": false, 
                  "description": "simple lb2", 
                  "id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "listeners": [], 
                  "name": "loadbalancer2", 
                  "operating_status": "ONLINE", 
                  "provisioning_status": "PENDING_UPDATE", 
                  "tenant_id": "b7c1a69e88bf4b21a8148f787aef2081", 
                  "vip_address": "10.0.0.4", 
                  "vip_subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateLoadBalancerv2_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a load balancer.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update load balancer"
      }
    }, 
    "/v2.0/lbaas/loadbalancers/{loadbalancer_id}/statuses": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a status tree for a load balancer object, by\nload balancer ID. If you are not an administrative user and the\nload balancer object does not belong to the tenant account, the API\nreturns the ``Forbidden (403)`` response code.\n\nIf the operation succeeds, the returned element is a status tree\nthat contains the load balancer and all provisioning and operating\nstatuses for its children.", 
        "operationId": "showLoadBalancerStatusTree", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "statuses": {
                  "loadbalancer": {
                    "id": "a4c19566-6f81-4c96-ac11-33954a9825a2", 
                    "listeners": [
                      {
                        "id": "c2a41fbe-b70a-4645-bb11-4d3c28f23a25", 
                        "name": "listener1", 
                        "operating_status": "ONLINE", 
                        "pools": [
                          {
                            "health_monitor": {
                              "id": "90f7c765-0bc9-47c4-8513-4cc0c264c8f8", 
                              "provisioning_status": "ACTIVE", 
                              "type": "HTTP"
                            }, 
                            "id": "ae6f93b8-a3f6-46cd-bb18-c2ab0308abf7", 
                            "members": [
                              {
                                "address": "10.0.0.4", 
                                "id": "32723bee-2484-4de3-b6fc-c0b98d35fc84", 
                                "operating_status": "ONLINE", 
                                "protocol_port": 80, 
                                "provisioning_status": "ACTIVE"
                              }, 
                              {
                                "address": "10.0.0.3", 
                                "id": "173b8164-0c9a-43ec-ab33-4ae0e7a8f863", 
                                "operating_status": "ONLINE", 
                                "protocol_port": 80, 
                                "provisioning_status": "ACTIVE"
                              }
                            ], 
                            "name": "pool1", 
                            "operating_status": "ONLINE", 
                            "provisioning_status": "ACTIVE"
                          }
                        ], 
                        "provisioning_status": "ACTIVE"
                      }
                    ], 
                    "name": "lb1", 
                    "operating_status": "ONLINE", 
                    "provisioning_status": "ACTIVE"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showLoadBalancerStatusTree_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows the status tree for a load balancer.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show load balancer status tree"
      }
    }, 
    "/v2.0/lbaas/pools": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.\n\nExample: List pools", 
        "operationId": "listPoolsv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "pools": [
                  {
                    "admin_state_up": true, 
                    "description": "", 
                    "health_monitors": [
                      "b7633ade-24dc-4d72-8475-06aa22be5412"
                    ], 
                    "health_monitors_status": [
                      {
                        "monitor_id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                        "status": "ACTIVE", 
                        "status_description": null
                      }
                    ], 
                    "id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                    "lb_algorithm": "ROUND_ROBIN", 
                    "members": [
                      "cf024846-7516-4e3a-b0fb-6590322c836f"
                    ], 
                    "name": "pool1", 
                    "protocol": "HTTP", 
                    "provider": "haproxy", 
                    "status": "ACTIVE", 
                    "status_description": null, 
                    "subnet_id": "aa547115-d710-4d6d-bb2c-b038d9c2704b", 
                    "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                    "vip_id": "388c739a-6a57-4e74-bc7b-a5cd60248bba"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listPoolsv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all pools that are associated with your tenant account.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List pools"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a pool by using the configuration that\nyou define in the request object. After the API validates the\nrequest and starts the provisioning process, the API returns a\nresponse object, which contains a unique ID.\n\nAt a minimum, you must specify these pool attributes:\n\n- ``tenant_id``. Admin only. Required to create a pool for another\n  tenant.\n\n- ``protocol``. The protocol for which this pool and its members\n  listen. A valid value is ``TCP``, ``HTTP``, or ``HTTPS``.\n\n- ``lb_algorithm``. The load-balancer algorithm, such as\n  ``ROUND_ROBIN``, ``LEAST_CONNECTIONS``, and ``SOURCE_IP``, that\n  distributes traffic to the pool members. The load-balancer\n  provider must support this algorithm.\n\n- ``listener_id``. The UUID of the listener in which this pool\n  becomes the default pool. Each listener has only one default\n  pool.\n\nSome attributes receive default values if you omit them from the\nrequest:\n\n- ``admin_state_up``. Default is ``true``.\n\n- ``name``. Default is an empty string.\n\n- ``description``. Default is an empty string.\n\n- ``session_persistence``. Default is an empty dictionary.\n\nIf the API cannot fulfill the request due to insufficient data or\ndata that is not valid, the service returns the HTTP ``Bad Request\n(400)`` response code with information about the failure in the\nresponse body. Validation errors require that you correct the error\nand submit the request again.\n\nUsers can configure all documented features at creation time by\nproviding the additional elements or attributes in the request.\n\nAdministrative users can specify a tenant ID that is different than\ntheir own to create pools for other tenants.\n\nTo update a pool, the load balancer to which to attach must have an\n``ACTIVE`` provisioning status.", 
        "operationId": "createPoolv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createPoolv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "simple pool", 
                  "health_monitors": [], 
                  "health_monitors_status": [], 
                  "id": "af95e0ce-8a26-4f29-9524-db41e7769c73", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "members": [], 
                  "name": "my-pool", 
                  "protocol": "HTTP", 
                  "provider": "haproxy", 
                  "status": "PENDING_CREATE", 
                  "status_description": null, 
                  "subnet_id": "e301aed0-d9e7-498a-977c-1bbfaf14ed5d", 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "vip_id": null
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createPoolv2_201"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Create pool"
      }
    }, 
    "/v2.0/lbaas/pools/{pool_id}": {
      "delete": {
        "consumes": [], 
        "description": "This operation removes a pool and its associated configuration from\nthe tenant account. The API immediately purges any and all\nconfiguration data. You cannot recover it.\n\nYou cannot delete a pool if the load balancer to which it is\nattached does not have an ``ACTIVE`` provisioning status.", 
        "operationId": "deletePoolv2", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Remove pool"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation shows details for a pool, by ID. If you are not an\nadministrative user and the pool object does not belong to your\ntenant account, the call returns the HTTP ``Forbidden (403)``\nresponse code.\n\nIf this operation succeeds, it returns a ``pool`` element.\n\nExample: Show pool details", 
        "operationId": "showPoolv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "", 
                  "health_monitors": [
                    "b7633ade-24dc-4d72-8475-06aa22be5412"
                  ], 
                  "health_monitors_status": [
                    {
                      "monitor_id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                      "status": "ACTIVE", 
                      "status_description": null
                    }
                  ], 
                  "id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "members": [
                    "cf024846-7516-4e3a-b0fb-6590322c836f"
                  ], 
                  "name": "pool1", 
                  "protocol": "HTTP", 
                  "provider": "haproxy", 
                  "status": "ACTIVE", 
                  "status_description": null, 
                  "subnet_id": "aa547115-d710-4d6d-bb2c-b038d9c2704b", 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "vip_id": "388c739a-6a57-4e74-bc7b-a5cd60248bba"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showPoolv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show pool details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation updates the attributes of a pool. Upon successful\nvalidation of the request, the service returns the HTTP ``Accepted\n(202)`` response code.\n\nNote: You cannot update the pool UUID, ``tenant_id``,\n``listener_id``, ``listeners``, ``health_monitor_id``,\n``protocol``, and ``members`` immutable attributes. If you try to\nupdate any of these attributes, the service returns the HTTP\n``Immutable (422)`` response code.\n\nNote: You cannot update a pool if the load balancer to which it is\nattached does not have an ``ACTIVE`` provisioning status.", 
        "operationId": "updatePoolv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updatePoolv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "", 
                  "health_monitors": [
                    "b7633ade-24dc-4d72-8475-06aa22be5412"
                  ], 
                  "health_monitors_status": [
                    {
                      "monitor_id": "b7633ade-24dc-4d72-8475-06aa22be5412", 
                      "status": "ACTIVE", 
                      "status_description": null
                    }
                  ], 
                  "id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "members": [
                    "cf024846-7516-4e3a-b0fb-6590322c836f"
                  ], 
                  "name": "SuperPool", 
                  "protocol": "HTTP", 
                  "provider": "haproxy", 
                  "status": "PENDING_UPDATE", 
                  "status_description": null, 
                  "subnet_id": "aa547115-d710-4d6d-bb2c-b038d9c2704b", 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "vip_id": "388c739a-6a57-4e74-bc7b-a5cd60248bba"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updatePoolv2_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update pool"
      }
    }, 
    "/v2.0/lbaas/pools/{pool_id}/members": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Lists all members that are associated with a pool that is\nassociated with your tenant account. The list of members includes\nonly members that belong to the pool object identified by\n``pool_id``.\n\nThe list might be empty.\n\nExample: List pool members", 
        "operationId": "listMembersv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "members": [
                  {
                    "address": "10.0.0.8", 
                    "admin_state_up": true, 
                    "id": "9a7aff27-fd41-4ec1-ba4c-3eb92c629313", 
                    "protocol_port": 80, 
                    "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
                    "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                    "weight": 1
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listMembersv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists members of a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "List pool members"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a member and adds it to a pool by using\nthe configuration that you define in the request object. After the\nAPI validates the request and starts the provisioning process, it\nreturns a response object, which contains a unique ID.\n\nAt a minimum, you must specify these pool attributes:\n\n- ``tenant_id``. Admin only. Required to create a pool for another\n  tenant.\n\n- ``address``. The IP address of the member to receive traffic from\n  the load balancer.\n\n- ``protocol_port`` The port on which the member listens for\n  traffic.\n\nSome attributes receive default values if you omit them from the\nrequest:\n\n- ``admin_state_up``. Default is ``true``.\n\n- ``weight``. Default is ``1``.\n\nIf you omit the ``subnet_id`` parameter, LBaaS uses the\n``vip_subnet_id`` parameter value for the subnet UUID.\n\nIf the request fails due to incorrect data, the service returns the\nHTTP ``Bad Request (400)`` response code with information about the\nfailure in the response body. Validation errors require that you\ncorrect the error and submit the request again.\n\nTo configure all documented member features at creation time,\nspecify additional elements or attributes in the request.\n\nAdministrative users can specify a tenant ID that is different than\ntheir own to create members for other tenants.\n\nTo update a member, the load balancer must have an ``ACTIVE``\nprovisioning status.", 
        "operationId": "createMemberv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createMemberv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.1.22", 
                  "admin_state_up": true, 
                  "id": "cf024846-7516-4e3a-b0fb-6590322c836f", 
                  "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "protocol_port": 90, 
                  "status": "PENDING_CREATE", 
                  "status_description": null, 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createMemberv2_201"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Adds a member to a pool.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Add member to pool"
      }
    }, 
    "/v2.0/lbaas/pools/{pool_id}/members/{member_id}": {
      "delete": {
        "consumes": [], 
        "description": "The API immediately purges any and all configuration data. You\ncannot recover it.\n\nYou cannot delete a member if the attached load balancer does not\nhave an ``ACTIVE`` provisioning status.\n\nExample: Remove a member from a pool", 
        "operationId": "deleteMemberv2", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a member from a pool and its associated configuration from the tenant account.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Remove member from pool"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a member object identified by ``member_id``\nthat belongs to a pool object identified by ``pool_id``. If you are\nnot an administrative user and the pool or member object does not\nbelong to your tenant account, the service returns the HTTP\n``Forbidden (403)`` response code.\n\nIf this operation succeeds, it returns a pool element.\n\nExample: Show pool member details", 
        "operationId": "showMemberv2", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.1.22", 
                  "admin_state_up": true, 
                  "id": "cf024846-7516-4e3a-b0fb-6590322c836f", 
                  "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "protocol_port": 90, 
                  "status": "ACTIVE", 
                  "status_description": null, 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showMemberv2_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a pool member.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Show pool member details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "Upon successful validation of the request, the service returns the\nHTTP ``OK (200)`` response code.\n\nNote: You cannot update the member UUID, ``tenant_id``,\n``address``, ``protocol_port``, and ``subnet_id`` attributes. If\nyou attempt to update any of these attributes, the service returns\nthe HTTP ``Immutable (422)`` response code.\n\nNote: You cannot update a member if the attached load balancer does\nnot have an ``ACTIVE`` provisioning status.", 
        "operationId": "updateMemberv2", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateMemberv2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.1.22", 
                  "admin_state_up": true, 
                  "id": "cf024846-7516-4e3a-b0fb-6590322c836f", 
                  "pool_id": "5a9a3e9e-d1aa-448e-af37-a70171f2a332", 
                  "protocol_port": 90, 
                  "status": "PENDING_UPDATE", 
                  "status_description": null, 
                  "tenant_id": "eabfefa3fd1740a88a47ad98e132d238", 
                  "weight": 5
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateMemberv2_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates attributes for a pool member.", 
        "tags": [
          "lbaas"
        ], 
        "x-title": "Update pool member"
      }
    }, 
    "/v2.0/metering/metering-label-rules": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list shows the UUID for each metering label rule.", 
        "operationId": "listMeteringLabelRules", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "metering_label_rules": [
                  {
                    "direction": "ingress", 
                    "excluded": false, 
                    "id": "9536641a-7d14-4dc5-afaf-93a973ce0eb8", 
                    "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                    "remote_ip_prefix": "20.0.0.0/24"
                  }, 
                  {
                    "direction": "ingress", 
                    "excluded": false, 
                    "id": "ffc6fd15-40de-4e7d-b617-34d3f7a93aec", 
                    "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                    "remote_ip_prefix": "10.0.0.0/24"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listMeteringLabelRules_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists a summary of all L3 metering label rules that belong to the tenant.", 
        "tags": [
          "metering-labels-ext"
        ], 
        "x-title": "List metering label rules"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createMeteringLabelRule", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createMeteringLabelRule"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "metering_label_rule": {
                  "direction": "ingress", 
                  "excluded": false, 
                  "id": "00e13b58-b4f2-4579-9c9c-7ac94615f9ae", 
                  "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                  "remote_ip_prefix": "10.0.1.0/24"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createMeteringLabelRule_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates an L3 metering label rule.", 
        "tags": [
          "metering-labels-ext"
        ], 
        "x-title": "Create metering label rule"
      }
    }, 
    "/v2.0/metering/metering-label-rules/{metering-label-rule-id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteMeteringLabelRule", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {
              "text/plain": "status: 204\n"
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes an L3 metering label rule.", 
        "tags": [
          "metering-labels-ext"
        ], 
        "x-title": "Delete metering label rule"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body shows this information for each metering label\nrule:\n\n- ``direction``. Either ingress or egress.\n\n- ``excluded``. Either ``true`` or ``false``.\n\n- The UUID for the metering label rule.\n\n- The remote IP prefix.\n\n- The metering label ID for the metering label with which the rule\n  is associated.", 
        "operationId": "showMeteringLabelRule", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "metering_label_rule": {
                  "direction": "ingress", 
                  "excluded": false, 
                  "id": "9536641a-7d14-4dc5-afaf-93a973ce0eb8", 
                  "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                  "remote_ip_prefix": "20.0.0.0/24"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a metering label rule.", 
        "tags": [
          "metering-labels-ext"
        ], 
        "x-title": "Show metering label rule details"
      }
    }, 
    "/v2.0/metering/metering-labels": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list shows the UUID for each metering label.", 
        "operationId": "listMeteringLabels", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "metering_labels": [
                  {
                    "description": "label1 description", 
                    "id": "a6700594-5b7a-4105-8bfe-723b346ce866", 
                    "name": "label1", 
                    "shared": false, 
                    "tenant_id": "45345b0ee1ea477fac0f541b2cb79cd4"
                  }, 
                  {
                    "description": "label2 description", 
                    "id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                    "name": "label2", 
                    "shared": false, 
                    "tenant_id": "45345b0ee1ea477fac0f541b2cb79cd4"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listMeteringLabels_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all L3 metering labels that belong to the tenant.", 
        "tags": [
          "metering-labels-ext"
        ], 
        "x-title": "List metering labels"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createMeteringLabel", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createMeteringLabel"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "metering_label": {
                  "description": "description of label1", 
                  "id": "bc91b832-8465-40a7-a5d8-ba87de442266", 
                  "name": "label1", 
                  "shared": false, 
                  "tenant_id": "45345b0ee1ea477fac0f541b2cb79cd4"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createMeteringLabel_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates an L3 metering label.", 
        "tags": [
          "metering-labels-ext"
        ], 
        "x-title": "Create metering label"
      }
    }, 
    "/v2.0/metering/metering-labels/{metering-label-id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteMeteringLabel", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {
              "text/plain": "status: 204\n"
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes an L3 metering label.", 
        "tags": [
          "metering-labels-ext"
        ], 
        "x-title": "Delete metering label"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body shows the description, name, and UUID.", 
        "operationId": "showMeteringLabel", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "metering_label": {
                  "description": "label1 description", 
                  "id": "a6700594-5b7a-4105-8bfe-723b346ce866", 
                  "name": "label1", 
                  "shared": false, 
                  "tenant_id": "45345b0ee1ea477fac0f541b2cb79cd4"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showMeteringLabel_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a metering label.", 
        "tags": [
          "metering-labels-ext"
        ], 
        "x-title": "Show metering label details"
      }
    }, 
    "/v2.0/network-ip-availabilities": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "ListNetworkIpAvailability", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "network_ip_availabilities": [
                  {
                    "network_id": "4cf895c9-c3d1-489e-b02e-59b5c8976809", 
                    "network_name": "public", 
                    "subnet_ip_availability": [
                      {
                        "cidr": "2001:db8::/64", 
                        "ip_version": 6, 
                        "subnet_id": "ca3f46c4-c6ff-4272-9be4-0466f84c6077", 
                        "subnet_name": "ipv6-public-subnet", 
                        "total_ips": 18446744073709552000, 
                        "used_ips": 1
                      }, 
                      {
                        "cidr": "172.24.4.0/24", 
                        "ip_version": 4, 
                        "subnet_id": "cc02efc1-9d47-46bd-bab6-760919c836b5", 
                        "subnet_name": "public-subnet", 
                        "total_ips": 253, 
                        "used_ips": 1
                      }
                    ], 
                    "tenant_id": "1a02cc95f1734fcc9d3c753818f03002", 
                    "total_ips": 253, 
                    "used_ips": 2
                  }, 
                  {
                    "network_id": "6801d9c8-20e6-4b27-945d-62499f00002e", 
                    "network_name": "private", 
                    "subnet_ip_availability": [
                      {
                        "cidr": "10.0.0.0/24", 
                        "ip_version": 4, 
                        "subnet_id": "44e70d00-80a2-4fb1-ab59-6190595ceb61", 
                        "subnet_name": "private-subnet", 
                        "total_ips": 253, 
                        "used_ips": 2
                      }, 
                      {
                        "cidr": "fdbf:ac66:9be8::/64", 
                        "ip_version": 6, 
                        "subnet_id": "a90623df-00e1-4902-a675-40674385d74c", 
                        "subnet_name": "ipv6-private-subnet", 
                        "total_ips": 18446744073709552000, 
                        "used_ips": 2
                      }
                    ], 
                    "tenant_id": "d56d3b8dd6894a508cf41b96b522328c", 
                    "total_ips": 18446744073709552000, 
                    "used_ips": 4
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/ListNetworkIpAvailability_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists network IP availability of all networks.", 
        "tags": [
          "networking-ip-availability-ext"
        ], 
        "x-title": "List Network IP Availability"
      }
    }, 
    "/v2.0/network-ip-availabilities/{network_id}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "ShowNetworkIpAvailability", 
        "parameters": [
          {
            "description": "The UUID of the network.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "network_ip_availability": {
                  "network_id": "6801d9c8-20e6-4b27-945d-62499f00002e", 
                  "network_name": "private", 
                  "subnet_ip_availability": [
                    {
                      "cidr": "10.0.0.0/24", 
                      "ip_version": 4, 
                      "subnet_id": "44e70d00-80a2-4fb1-ab59-6190595ceb61", 
                      "subnet_name": "private-subnet", 
                      "total_ips": 253, 
                      "used_ips": 2
                    }, 
                    {
                      "cidr": "fdbf:ac66:9be8::/64", 
                      "ip_version": 6, 
                      "subnet_id": "a90623df-00e1-4902-a675-40674385d74c", 
                      "subnet_name": "ipv6-private-subnet", 
                      "total_ips": 18446744073709552000, 
                      "used_ips": 2
                    }
                  ], 
                  "tenant_id": "d56d3b8dd6894a508cf41b96b522328c", 
                  "total_ips": 18446744073709552000, 
                  "used_ips": 4
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/ShowNetworkIpAvailability_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows network IP availability details for a network.", 
        "tags": [
          "networking-ip-availability-ext"
        ], 
        "x-title": "Show Network IP Availability"
      }
    }, 
    "/v2.0/networks": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listMultiNetworks", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "networks": [
                  {
                    "admin_state_up": true, 
                    "id": "4e8e5957-649f-477b-9e5b-f1f75b21c03c", 
                    "name": "net1", 
                    "qos_policy_id": "6a8454ade84346f59e8d40665f878b2e", 
                    "router:external": false, 
                    "segments": [
                      {
                        "provider:network_type": "vlan", 
                        "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                        "provider:segmentation_id": 2
                      }, 
                      {
                        "provider:network_type": "stt", 
                        "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                        "provider:segmentation_id": 0
                      }
                    ], 
                    "shared": false, 
                    "status": "ACTIVE", 
                    "subnets": [], 
                    "tenant_id": "9bacb3c5d39d41a79512987f338cf177"
                  }, 
                  {
                    "admin_state_up": true, 
                    "id": "db193ab3-96e3-4cb3-8fc5-05f4296d0324", 
                    "name": "private", 
                    "provider:network_type": "local", 
                    "provider:physical_network": null, 
                    "provider:segmentation_id": null, 
                    "qos_policy_id": "bfdb6c39f71e4d44b1dfbda245c50819", 
                    "router:external": true, 
                    "shared": true, 
                    "status": "ACTIVE", 
                    "subnets": [
                      "08eae331-0402-425a-923c-34f7cfe39c1b"
                    ], 
                    "tenant_id": "26a7980765d0414dbc1fc1f88cdb7e6e"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listMultiNetworks_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists networks that are accessible to the tenant who submits the request. Networks with multiple segments include the ``segments`` list in the response.", 
        "tags": [
          "networks-multi-provider-ext"
        ], 
        "x-title": "List networks"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createMultiNetwork", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createMultiNetwork"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "4e8e5957-649f-477b-9e5b-f1f75b21c03c", 
                  "name": "net1", 
                  "qos_policy_id": "6a8454ade84346f59e8d40665f878b2e", 
                  "segments": [
                    {
                      "provider:network_type": "vlan", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": 2
                    }, 
                    {
                      "provider:network_type": "stt", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": null
                    }
                  ], 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "9bacb3c5d39d41a79512987f338cf177"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createMultiNetwork_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a network with multiple segment mappings.", 
        "tags": [
          "networks-multi-provider-ext"
        ], 
        "x-title": "Create network with multiple segment mappings"
      }, 
      "x-get-listProviderNetworks": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listProviderNetworks", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "networks": [
                  {
                    "admin_state_up": true, 
                    "id": "d32019d3-bc6e-4319-9c1d-6722fc136a22", 
                    "mtu": 0, 
                    "name": "private-network", 
                    "provider:network_type": "local", 
                    "provider:physical_network": null, 
                    "provider:segmentation_id": null, 
                    "qos_policy_id": "6a8454ade84346f59e8d40665f878b2e", 
                    "router:external": true, 
                    "shared": true, 
                    "status": "ACTIVE", 
                    "subnets": [
                      "54d6f61d-db07-451c-9ab3-b9609b6b6f0b"
                    ], 
                    "tenant_id": "4fd44f30292945e481c7b8a0c8908869"
                  }, 
                  {
                    "admin_state_up": true, 
                    "id": "db193ab3-96e3-4cb3-8fc5-05f4296d0324", 
                    "mtu": 0, 
                    "name": "private", 
                    "provider:network_type": "local", 
                    "provider:physical_network": null, 
                    "provider:segmentation_id": null, 
                    "qos_policy_id": "bfdb6c39f71e4d44b1dfbda245c50819", 
                    "router:external": true, 
                    "shared": true, 
                    "status": "ACTIVE", 
                    "subnets": [
                      "08eae331-0402-425a-923c-34f7cfe39c1b"
                    ], 
                    "tenant_id": "26a7980765d0414dbc1fc1f88cdb7e6e"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listProviderNetworks_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists networks that are accessible to the tenant who submits the request.", 
        "tags": [
          "network-provider"
        ], 
        "x-title": "List networks"
      }, 
      "x-get-listVTNetworks": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listVTNetworks", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "networks": [
                  {
                    "admin_state_up": true, 
                    "id": "f5e6d63c-04a4-4b2c-8b27-a9854412d5a7", 
                    "name": "net1", 
                    "router:external": false, 
                    "shared": false, 
                    "status": "ACTIVE", 
                    "subnets": [], 
                    "tenant_id": "e252a863-92ee-480f-8bd8-71be77089499", 
                    "vlan_transparent": true
                  }, 
                  {
                    "admin_state_up": true, 
                    "id": "37e11503-3244-49f1-b92a-9f21bab017d9", 
                    "name": "private", 
                    "router:external": false, 
                    "shared": true, 
                    "status": "ACTIVE", 
                    "subnets": [
                      "3daba37a-bced-4153-a4bb-d83dcc0552d9"
                    ], 
                    "tenant_id": "109e5fae-d976-4791-84c7-6ae0bb3896c3", 
                    "vlan_transparent": false
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listVTNetworks_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists networks. The response shows the VLAN transparency attribute.", 
        "tags": [
          "networks-vlan-transparency-ext"
        ], 
        "x-title": "List networks with VLAN transparency attribute"
      }, 
      "x-post-createProviderNetwork": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createProviderNetwork", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createProviderNetwork"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "4e8e5957-649f-477b-9e5b-f1f75b21c03c", 
                  "mtu": 0, 
                  "name": "net1", 
                  "qos_policy_id": "6a8454ade84346f59e8d40665f878b2e", 
                  "router:external": false, 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "9bacb3c5d39d41a79512987f338cf177"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createProviderNetwork_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a network.", 
        "tags": [
          "network-provider"
        ], 
        "x-title": "Create network"
      }, 
      "x-post-createVTNetwork": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createVTNetwork", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createVTNetwork"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "3114f6e9-f9bc-4570-a941-7329b3b9759f", 
                  "name": "net1", 
                  "router:external": false, 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "5831268f-1f52-49a7-88d5-bc0d7a74d523", 
                  "vlan_transparent": true
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createVTNetwork_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a VLAN-transparent network.", 
        "tags": [
          "networks-vlan-transparency-ext"
        ], 
        "x-title": "Create VLAN-transparent network"
      }
    }, 
    "/v2.0/networks/{network_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteProviderNetwork", 
        "parameters": [
          {
            "description": "The UUID of the network.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a network.", 
        "tags": [
          "network-provider"
        ], 
        "x-title": "Delete network"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showMultiNetwork", 
        "parameters": [
          {
            "description": "The UUID of the network.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "4e8e5957-649f-477b-9e5b-f1f75b21c03c", 
                  "name": "net1", 
                  "qos_policy_id": "6a8454ade84346f59e8d40665f878b2e", 
                  "router:external": false, 
                  "segments": [
                    {
                      "provider:network_type": "vlan", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": 2
                    }, 
                    {
                      "provider:network_type": "stt", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": 0
                    }
                  ], 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "9bacb3c5d39d41a79512987f338cf177"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showMultiNetwork_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a network with multiple segments.", 
        "tags": [
          "networks-multi-provider-ext"
        ], 
        "x-title": "Show details for a network with multiple segments"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateProviderNetwork", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateProviderNetwork"
            }
          }, 
          {
            "description": "The UUID of the network.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "1f370095-98f6-4079-be64-6d3d4a6adcc6", 
                  "mtu": 0, 
                  "name": "sample_network_5_updated", 
                  "port_security_enabled": true, 
                  "provider:network_type": "local", 
                  "provider:physical_network": null, 
                  "provider:segmentation_id": null, 
                  "qos_policy_id": "6a8454ade84346f59e8d40665f878b2e", 
                  "router:external": false, 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "4fd44f30292945e481c7b8a0c8908869"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateProviderNetwork_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a network.", 
        "tags": [
          "network-provider"
        ], 
        "x-title": "Update network"
      }, 
      "x-get-showProviderNetwork": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showProviderNetwork", 
        "parameters": [
          {
            "description": "The UUID of the network.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "created_at": "2016-03-08T20:19:41", 
                  "id": "d32019d3-bc6e-4319-9c1d-6722fc136a22", 
                  "mtu": 0, 
                  "name": "private-network", 
                  "port_security_enabled": true, 
                  "qos_policy_id": "6a8454ade84346f59e8d40665f878b2e", 
                  "router:external": false, 
                  "shared": true, 
                  "status": "ACTIVE", 
                  "subnets": [
                    "54d6f61d-db07-451c-9ab3-b9609b6b6f0b"
                  ], 
                  "tenant_id": "4fd44f30292945e481c7b8a0c8908869", 
                  "updated_at": "2016-03-08T20:19:41"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showProviderNetwork_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a network.", 
        "tags": [
          "network-provider"
        ], 
        "x-title": "Show network details"
      }, 
      "x-get-showVTNetwork": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showVTNetwork", 
        "parameters": [
          {
            "description": "The UUID of the network.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "20403fe9-6c9c-48e5-9edb-c3426a955068", 
                  "name": "net1", 
                  "router:external": false, 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "e926fd5a-e9f6-4dc8-8043-a352d974ceaf", 
                  "vlan_transparent": true
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showVTNetwork_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a VLAN-transparent network.", 
        "tags": [
          "networks-vlan-transparency-ext"
        ], 
        "x-title": "Show VLAN-transparent network details"
      }
    }, 
    "/v2.0/ports": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listPorts", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ports": [
                  {
                    "admin_state_up": true, 
                    "allowed_address_pairs": [], 
                    "device_id": "9ae135f4-b6e0-4dad-9e91-3c223e385824", 
                    "device_owner": "network:router_gateway", 
                    "extra_dhcp_opts": [], 
                    "fixed_ips": [
                      {
                        "ip_address": "172.24.4.2", 
                        "subnet_id": "008ba151-0b8c-4a67-98b5-0d2b87666062"
                      }
                    ], 
                    "id": "d80b1a3b-4fc1-49f3-952e-1e2ab7081d8b", 
                    "mac_address": "fa:16:3e:58:42:ed", 
                    "name": "", 
                    "network_id": "70c1db1f-b701-45bd-96e0-a313ee3430b3", 
                    "security_groups": [], 
                    "status": "ACTIVE", 
                    "tenant_id": ""
                  }, 
                  {
                    "admin_state_up": true, 
                    "allowed_address_pairs": [], 
                    "device_id": "9ae135f4-b6e0-4dad-9e91-3c223e385824", 
                    "device_owner": "network:router_interface", 
                    "extra_dhcp_opts": [], 
                    "fixed_ips": [
                      {
                        "ip_address": "10.0.0.1", 
                        "subnet_id": "288bf4a1-51ba-43b6-9d0a-520e9005db17"
                      }
                    ], 
                    "id": "f71a6703-d6de-4be1-a91a-a570ede1d159", 
                    "mac_address": "fa:16:3e:bb:3c:e4", 
                    "name": "", 
                    "network_id": "f27aa545-cbdd-4907-b0c6-c9e8b039dcc2", 
                    "security_groups": [], 
                    "status": "ACTIVE", 
                    "tenant_id": "d397de8a63f341818f198abb0966f6f3"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists ports to which the tenant has access.", 
        "tags": [
          "port-binding"
        ], 
        "x-title": "List ports"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createPort", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "port": {
                  "admin_state_up": true, 
                  "allowed_address_pairs": [], 
                  "binding:host_id": "", 
                  "binding:profile": {}, 
                  "binding:vif_details": {}, 
                  "binding:vif_type": "unbound", 
                  "binding:vnic_type": "normal", 
                  "device_id": "", 
                  "device_owner": "", 
                  "fixed_ips": [
                    {
                      "ip_address": "10.0.0.2", 
                      "subnet_id": "a0304c3a-4f08-4c43-88af-d796509c97d2"
                    }
                  ], 
                  "id": "65c0ee9f-d634-4522-8954-51021b570b0d", 
                  "mac_address": "fa:16:3e:c9:cb:f0", 
                  "name": "private-port", 
                  "network_id": "a87cc70a-3e15-4acf-8205-9b711a3531b7", 
                  "security_groups": [
                    "f0ac4394-7e4a-4409-9701-ba8be283dbc3"
                  ], 
                  "status": "DOWN", 
                  "tenant_id": "d6700c0c9ffa4f1cb322cd4a1f3906fa"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a port on a network.", 
        "tags": [
          "port-binding"
        ], 
        "x-title": "Create port"
      }
    }, 
    "/v2.0/ports/{port_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deletePort", 
        "parameters": [
          {
            "description": "The UUID of the port.", 
            "format": "", 
            "in": "path", 
            "name": "port_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a port.", 
        "tags": [
          "port-binding"
        ], 
        "x-title": "Delete port"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showPort", 
        "parameters": [
          {
            "description": "The UUID of the port.", 
            "format": "", 
            "in": "path", 
            "name": "port_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "port": {
                  "admin_state_up": true, 
                  "allowed_address_pairs": [], 
                  "binding:host_id": "devstack", 
                  "binding:profile": {}, 
                  "binding:vif_details": {
                    "ovs_hybrid_plug": true, 
                    "port_filter": true
                  }, 
                  "binding:vif_type": "ovs", 
                  "binding:vnic_type": "normal", 
                  "device_id": "5e3898d7-11be-483e-9732-b2f5eccd2b2e", 
                  "device_owner": "network:router_interface", 
                  "extra_dhcp_opts": [], 
                  "fixed_ips": [
                    {
                      "ip_address": "10.0.0.1", 
                      "subnet_id": "a0304c3a-4f08-4c43-88af-d796509c97d2"
                    }
                  ], 
                  "id": "46d4bfb9-b26e-41f3-bd2e-e6dcc1ccedb2", 
                  "mac_address": "fa:16:3e:23:fd:d7", 
                  "name": "", 
                  "network_id": "a87cc70a-3e15-4acf-8205-9b711a3531b7", 
                  "port_security_enabled": false, 
                  "security_groups": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "7e02058126cc4950b75f9970368ba177"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a port.", 
        "tags": [
          "port-binding"
        ], 
        "x-title": "Show port details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updatePort", 
        "parameters": [
          {
            "description": "The UUID of the port.", 
            "format": "", 
            "in": "path", 
            "name": "port_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "port": {
                  "admin_state_up": true, 
                  "allowed_address_pairs": [], 
                  "binding:host_id": "", 
                  "binding:profile": {}, 
                  "binding:vif_details": {}, 
                  "binding:vif_type": "unbound", 
                  "binding:vnic_type": "normal", 
                  "device_id": "", 
                  "device_owner": "", 
                  "fixed_ips": [
                    {
                      "ip_address": "10.0.0.2", 
                      "subnet_id": "a0304c3a-4f08-4c43-88af-d796509c97d2"
                    }
                  ], 
                  "id": "65c0ee9f-d634-4522-8954-51021b570b0d", 
                  "mac_address": "fa:16:3e:c9:cb:f0", 
                  "name": "private-port", 
                  "network_id": "a87cc70a-3e15-4acf-8205-9b711a3531b7", 
                  "security_groups": [
                    "f0ac4394-7e4a-4409-9701-ba8be283dbc3"
                  ], 
                  "status": "DOWN", 
                  "tenant_id": "d6700c0c9ffa4f1cb322cd4a1f3906fa"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a port.", 
        "tags": [
          "port-binding"
        ], 
        "x-title": "Update port"
      }
    }, 
    "/v2.0/qos/policies": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.", 
        "operationId": "listPolicies", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "policies": [
                  {
                    "bandwidth_limit_rules": [
                      {
                        "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c793", 
                        "max_burst_kbps": "0", 
                        "max_kbps": "10000", 
                        "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                      }
                    ], 
                    "description": "This policy limits the ports to 10Mbit max.", 
                    "dscp_marking_rules": [
                      {
                        "dscp_mark": "26", 
                        "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c794", 
                        "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                      }
                    ], 
                    "id": "46ebaec0-0570-43ac-82f6-60d2b03168c4", 
                    "name": "10Mbit", 
                    "shared": false, 
                    "tenant_id": "8d4c70a21fed4aeba121a1a429ba0d04"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listPolicies_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all QoS policies that are associated with your tenant account.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "List QoS policies"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "Creates a QoS policy by using the configuration that you define in\nthe request object. A response object is returned. The object\ncontains a unique ID.\n\nIf the caller is not an administrative user, this call returns the\nHTTP ``Forbidden (403)`` response code.\n\nUsers with an administrative role can create policies on behalf of\nother tenants by specifying a tenant UUID that is different than\ntheir own.", 
        "operationId": "createPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createPolicy"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "policy": {
                  "description": "This policy limits the ports to 10Mbit max.", 
                  "id": "46ebaec0-0570-43ac-82f6-60d2b03168c4", 
                  "name": "10Mbit", 
                  "shared": false, 
                  "tenant_id": "8d4c70a21fed4aeba121a1a429ba0d04"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createPolicy_201"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Create QoS policy"
      }
    }, 
    "/v2.0/qos/policies/{policy_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deletePolicy", 
        "parameters": [
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Delete QoS policy"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showPolicy", 
        "parameters": [
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "policy": {
                  "bandwidth_limit_rules": [
                    {
                      "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c793", 
                      "max_burst_kbps": "0", 
                      "max_kbps": "10000", 
                      "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                    }
                  ], 
                  "description": "This policy limits the ports to 10Mbit max.", 
                  "dscp_marking_rules": [
                    {
                      "dscp_mark": "26", 
                      "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c794", 
                      "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                    }
                  ], 
                  "id": "46ebaec0-0570-43ac-82f6-60d2b03168c4", 
                  "name": "10Mbit", 
                  "shared": false, 
                  "tenant_id": "8d4c70a21fed4aeba121a1a429ba0d04"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showPolicy_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Show QoS policy details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the request is valid, the service returns the ``Accepted (202)``\nresponse code.", 
        "operationId": "updatePolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updatePolicy"
            }
          }, 
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "policy": {
                  "description": "This policy limits the ports to 10Mbit max.", 
                  "id": "46ebaec0-0570-43ac-82f6-60d2b03168c4", 
                  "name": "10Mbit", 
                  "shared": false, 
                  "tenant_id": "8d4c70a21fed4aeba121a1a429ba0d04"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updatePolicy_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Update QoS policy"
      }
    }, 
    "/v2.0/qos/policies/{policy_id}/bandwidth_limit_rules": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.", 
        "operationId": "listBandwidthLimitRules", 
        "parameters": [
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "bandwidth_limit_rules": [
                  {
                    "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c793", 
                    "max_burst_kbps": "0", 
                    "max_kbps": "10000", 
                    "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listBandwidthLimitRules_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all bandwidth limit rules for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "List bandwidth limit rules for QoS policy"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createBandwidthLimitRule", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createBandwidthLimitRule"
            }
          }, 
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "bandwidth_limit_rule": {
                  "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c793", 
                  "max_burst_kbps": "0", 
                  "max_kbps": "10000", 
                  "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createBandwidthLimitRule_201"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a bandwidth limit rule for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Create bandwidth limit rule"
      }
    }, 
    "/v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{rule_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteBandwidthLimitRule", 
        "parameters": [
          {
            "description": "The UUID of the rule.", 
            "format": "", 
            "in": "path", 
            "name": "rule_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a bandwidth limit rule for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Delete bandwidth limit rule"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showBandwidthLimitRule", 
        "parameters": [
          {
            "description": "The UUID of the rule.", 
            "format": "", 
            "in": "path", 
            "name": "rule_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "bandwidth_limit_rule": {
                  "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c793", 
                  "max_burst_kbps": "0", 
                  "max_kbps": "10000", 
                  "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showBandwidthLimitRule_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a bandwidth limit rule for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Show bandwidth limit rule details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the request is valid, the service returns the ``Accepted (202)``\nresponse code.", 
        "operationId": "updateBandwidthLimitRule", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateBandwidthLimitRule"
            }
          }, 
          {
            "description": "The UUID of the rule.", 
            "format": "", 
            "in": "path", 
            "name": "rule_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "bandwidth_limit_rule": {
                  "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c793", 
                  "max_burst_kbps": "0", 
                  "max_kbps": "10000", 
                  "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateBandwidthLimitRule_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a bandwidth limit rule for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Update bandwidth limit rule"
      }
    }, 
    "/v2.0/qos/policies/{policy_id}/dscp_marking_rules": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list may be empty.", 
        "operationId": "listDscpMarkingRules", 
        "parameters": [
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "dscp_marking_rules": [
                  {
                    "dscp_mark": "26", 
                    "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c794", 
                    "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listDscpMarkingRules_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all DSCP marking rules for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "List DSCP marking rules for QoS policy"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createDscpMarkingRule", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createDscpMarkingRule"
            }
          }, 
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "dscp_marking_rule": {
                  "dscp_mark": "26", 
                  "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c794", 
                  "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createDscpMarkingRule_201"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a DSCP marking rule for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Create DSCP marking rule"
      }
    }, 
    "/v2.0/qos/policies/{policy_id}/dscp_marking_rules/{dscp_rule_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteDscpMarkingRule", 
        "parameters": [
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a DSCP marking rule for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Delete DSCP marking rule"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showDscpMarkingRule", 
        "parameters": [
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "dscp_marking_rule": {
                  "dscp_mark": "26", 
                  "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c794", 
                  "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showDscpMarkingRule_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a DSCP marking rule for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Show DSCP marking rule details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the request is valid, the service returns the ``Accepted (202)``\nresponse code.", 
        "operationId": "updateDscpMarkingRule", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateDscpMarkingRule"
            }
          }, 
          {
            "description": "The UUID of the policy.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "dscp_marking_rule": {
                  "dscp_mark": "16", 
                  "id": "5f126d84-551a-4dcf-bb01-0e9c0df0c794", 
                  "policy_id": "46ebaec0-0570-43ac-82f6-60d2b03168c4"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateDscpMarkingRule_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a DSCP marking rule for a QoS policy.", 
        "tags": [
          "qos-ext"
        ], 
        "x-title": "Update DSCP marking rule"
      }
    }, 
    "/v2.0/quotas": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listQuotas", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "quotas": [
                  {
                    "floatingip": 50, 
                    "network": 15, 
                    "port": 50, 
                    "rbac_policy": -1, 
                    "router": 10, 
                    "security_group": 10, 
                    "security_group_rule": 100, 
                    "subnet": 10, 
                    "subnetpool": -1, 
                    "tenant_id": "bab7d5c60cd041a0a36f7c4b6e1dd978"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listQuotas_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists quotas for tenants who have non-default quota values.", 
        "tags": [
          "quotas"
        ], 
        "x-title": "List quotas for tenants with non-default quota values"
      }
    }, 
    "/v2.0/quotas/{tenant_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "resetQuota", 
        "parameters": [
          {
            "description": "The UUID of the tenant.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Resets quotas to default values for a tenant.", 
        "tags": [
          "quotas"
        ], 
        "x-title": "Reset quota for a tenant"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listQuotasForTenant", 
        "parameters": [
          {
            "description": "The UUID of the tenant.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "quota": {
                  "floatingip": 50, 
                  "network": 10, 
                  "port": 50, 
                  "rbac_policy": -1, 
                  "router": 10, 
                  "security_group": 10, 
                  "security_group_rule": 100, 
                  "subnet": 10, 
                  "subnetpool": -1
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listQuotasForTenant_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists quotas for a tenant.", 
        "tags": [
          "quotas"
        ], 
        "x-title": "List quotas for a tenant"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateQuota", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateQuota"
            }
          }, 
          {
            "description": "The UUID of the tenant.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "quota": {
                  "floatingip": 50, 
                  "network": 15, 
                  "port": 50, 
                  "rbac_policy": -1, 
                  "router": 10, 
                  "security_group": 10, 
                  "security_group_rule": 100, 
                  "subnet": 10, 
                  "subnetpool": -1
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateQuota_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates quotas for a tenant. Use when non-default quotas are desired.", 
        "tags": [
          "quotas"
        ], 
        "x-title": "Update quota for a tenant"
      }
    }, 
    "/v2.0/routers": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Default policy settings return only those routers that the tenant\nwho submits the request owns, unless an administrative user submits\nthe request.\n\nThis example request lists routers in JSON format:\n\n::\n\n   GET /v2.0/routers Accept: application/json\n\nUse the ``fields`` query parameter to control which fields are\nreturned in the response body. Additionally, you can filter results\nby using query string parameters. For information, see `Filtering\nand Column Selection <https://wiki.openstack.org/wiki/Neutron/APIv2\n-specification#Filtering_and_Column_Selection>`_.", 
        "operationId": "listRouters", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "routers": [
                  {
                    "admin_state_up": true, 
                    "external_gateway_info": null, 
                    "id": "7177abc4-5ae9-4bb7-b0d4-89e94a4abf3b", 
                    "name": "second_routers", 
                    "routes": [], 
                    "status": "ACTIVE", 
                    "tenant_id": "6b96ff0cb17a4b859e1e575d221683d3"
                  }, 
                  {
                    "admin_state_up": true, 
                    "external_gateway_info": {
                      "enable_snat": true, 
                      "external_fixed_ips": [
                        {
                          "ip": "192.168.10.2", 
                          "subnet_id": "255.255.255.0"
                        }
                      ], 
                      "network_id": "3c5bcddd-6af9-4e6b-9c3e-c153e521cab8"
                    }, 
                    "id": "a9254bdb-2613-4a13-ac4c-adc581fba50d", 
                    "name": "router1", 
                    "routes": [], 
                    "status": "ACTIVE", 
                    "tenant_id": "33a40233088643acb66ff6eb0ebea679"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listRouters_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists logical routers that the tenant who submits the request can access.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "List routers"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation creates a logical router. The logical router does\nnot have any internal interface and it is not associated with any\nsubnet. You can optionally specify an external gateway for a router\nat create time. The external gateway for the router must be plugged\ninto an external network. An external network has its\n``router:external`` extended field set to ``true``. To specify an\nexternal gateway, the UUID of the external network must be passed\nin the ``external_gateway_info`` attribute in the request body, as\nfollows:\n\n.. code-block:: json\n\n   {\n      \"router\": {\n         \"external_gateway_info\": {\n            \"network_id\": \"8ca37218-28ff-41cb-9b10-039601ea7e6b\"\n         }\n      }\n   }", 
        "operationId": "createRouter", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createRouter"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "router": {
                  "admin_state_up": true, 
                  "distributed": false, 
                  "external_gateway_info": {
                    "enable_snat": true, 
                    "external_fixed_ips": [
                      {
                        "ip": "192.168.10.2", 
                        "subnet_id": "255.255.255.0"
                      }
                    ], 
                    "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
                  }, 
                  "ha": false, 
                  "id": "8604a0de-7f6b-409a-a47c-a1cc7bc77b2e", 
                  "name": "another_router", 
                  "routes": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "6b96ff0cb17a4b859e1e575d221683d3"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createRouter_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a logical router.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Create router"
      }
    }, 
    "/v2.0/routers/{router_id}": {
      "delete": {
        "consumes": [], 
        "description": "This operation fails if the router has attached interfaces.\n\nUse the remove router interface operation to remove all router\ninterfaces before you delete the router.\n\nThis example deletes a router:\n\n::\n\n   DELETE /v2.0/routers/{router_id} Accept: application/json", 
        "operationId": "deleteRouter", 
        "parameters": [
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a logical router and, if present, its external gateway interface.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Delete router"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This example request shows details for a router in JSON format:\n\n::\n\n   GET /v2.0/routers/{router_id} Accept: application/json\n\nUse the ``fields`` query parameter to control which fields are\nreturned in the response body. For information, see `Filtering and\nColumn Selection <http://specs.openstack.org/openstack/neutron-\nspecs/specs/api/networking_general_api_information.html#filtering-\nand-column-selection>`_.", 
        "operationId": "showRouter", 
        "parameters": [
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "router": {
                  "admin_state_up": true, 
                  "external_gateway_info": {
                    "enable_snat": true, 
                    "external_fixed_ips": [
                      {
                        "ip": "192.168.10.2", 
                        "subnet_id": "255.255.255.0"
                      }
                    ], 
                    "network_id": "85d76829-6415-48ff-9c63-5c5ca8c61ac6"
                  }, 
                  "id": "a07eea83-7710-4860-931b-5fe220fae533", 
                  "name": "router1", 
                  "routes": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "d6554fe62e2f41efbb6e026fad5c1542"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showRouter_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a router.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Show router details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "The next hop IP address must be a part of one of the subnets to\nwhich the router interfaces are connected. Otherwise, the server\nresponds with the ``Bad Request (400)`` error code.\n\nWhen a validation error is detected, such as a format error of IP\naddress or CIDR, the server responds with the ``Bad Request (400)``\nresponse code.\n\nWhen Networking receives a request to delete the router interface\nfor subnets that are used by one or more routes, it responds with a\n``Conflict (409)`` response code.", 
        "operationId": "updateExtraRoutes", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateExtraRoutes"
            }
          }, 
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "router": {
                  "admin_state_up": true, 
                  "distributed": false, 
                  "external_gateway_info": {
                    "enable_snat": true, 
                    "external_fixed_ips": [
                      {
                        "ip": "192.168.10.2", 
                        "subnet_id": "255.255.255.0"
                      }
                    ], 
                    "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
                  }, 
                  "ha": false, 
                  "id": "8604a0de-7f6b-409a-a47c-a1cc7bc77b2e", 
                  "name": "another_router", 
                  "routes": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "6b96ff0cb17a4b859e1e575d221683d3"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateExtraRoutes_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates extra routes on a router.", 
        "tags": [
          "extraroute"
        ], 
        "x-title": "Update extra routes"
      }, 
      "x-put-updateRouter": {
        "consumes": [
          "application/json"
        ], 
        "description": "You can update the name, administrative state, and the external\ngateway. For more information about how to set the external gateway\nfor a router, see the create router operation. This operation does\nnot enable the update of router interfaces. To update a router, use\nthe add router interface and remove router interface operations.\n\nThis example updates the external gateway information for a router:\n\n::\n\n   PUT /v2.0/routers/{router_id} Accept: application/json", 
        "operationId": "updateRouter", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateRouter"
            }
          }, 
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "router": {
                  "admin_state_up": true, 
                  "distributed": false, 
                  "external_gateway_info": {
                    "enable_snat": true, 
                    "external_fixed_ips": [
                      {
                        "ip": "192.168.10.2", 
                        "subnet_id": "255.255.255.0"
                      }
                    ], 
                    "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
                  }, 
                  "ha": false, 
                  "id": "8604a0de-7f6b-409a-a47c-a1cc7bc77b2e", 
                  "name": "another_router", 
                  "routes": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "6b96ff0cb17a4b859e1e575d221683d3"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateRouter_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a logical router.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Update router"
      }
    }, 
    "/v2.0/routers/{router_id}/add_router_interface": {
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "Attaches a subnet to an internal router interface.\n\nSpecify the UUID of a subnet or port in the request body:\n\n- Subnet UUID. The gateway IP address for the subnet is used to\n  create the router interface.\n\n- Port UUID. The IP address associated with the port is used to\n  create the router interface.\n\nWhen you specify an IPv6 subnet, this operation adds the subnet to\nan existing internal port with same network UUID, on the router. If\na port with the same network UUID does not exist, this operation\ncreates a port on the router for that subnet.\n\nThe limitation of one IPv4 subnet per router port remains, though a\nport can contain any number of IPv6 subnets that belong to the same\nnetwork UUID.\n\nWhen you use the ``port-create`` command to add a port and then\ncall ``router-interface-add`` with this port UUID, this operation\nadds the port to the router if the following conditions are met:\n\n- The port has no more than one IPv4 subnet.\n\n  The IPv6 subnets, if any, on the port do not have same network\n  UUID as the network UUID of IPv6 subnets on any other ports.\n\nIf you specify both UUIDs, this operation returns the ``Bad Request\n(400)`` response code.\n\nIf the port is already in use, this operation returns the\n``Conflict (409)`` response code.\n\nThis operation returns a port UUID that is either:\n\n- The same UUID that is passed in the request body.\n\n- The UUID of a port that this operation creates to attach the\n  subnet to the router.\n\nAfter you run this operation, the operation sets:\n\n- The device UUID of this port to the router UUID.\n\n- The ``device_owner`` attribute to ``network:router_interface``.", 
        "operationId": "addRouterInterface", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/addRouterInterface"
            }
          }, 
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "id": "b0294d7e-7da4-4202-9882-2ab1de9dabc0", 
                "port_id": "3a44f4e5-1694-493a-a1fb-393881c673a4", 
                "subnet_id": "a2f1f29d-571b-4533-907f-5803ab96ead1", 
                "subnet_ids": [
                  "a2f1f29d-571b-4533-907f-5803ab96ead1"
                ], 
                "tenant_id": "6ba032e4730d42e2ad928f430f5da33e"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/addRouterInterface_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Adds an internal interface to a logical router.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Add interface to router"
      }
    }, 
    "/v2.0/routers/{router_id}/remove_router_interface": {
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation deletes an internal router interface, which detaches\na subnet from the router. If this subnet UUID is the last subnet on\nthe port, this operation deletes the port itself. You must specify\neither a subnet UUID or port UUID in the request body; the\noperation uses this value to identify which router interface to\ndeletes.\n\nYou can also specify both a subnet UUID and port UUID. If you\nspecify both UUIDs, the subnet UUID must correspond to the subnet\nUUID of the first IP address on the port. Otherwise, this operation\nreturns the ``Conflict (409)`` response code with information about\nthe affected router and interface.\n\nIf the router or the subnet and port do not exist or are not\nvisible to you, this operation returns the ``Not Found (404)``\nresponse code. As a consequence of this operation, the operation\nremoves the port connecting the router with the subnet from the\nsubnet for the network.\n\nThis example deletes an interface from a router:\n\n::\n\n   PUT /v2.0/routers/{router_id}/remove_router_interface Accept: application/json", 
        "operationId": "deleteRouterInterface", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/deleteRouterInterface"
            }
          }, 
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "id": "8604a0de-7f6b-409a-a47c-a1cc7bc77b2e", 
                "port_id": "3a44f4e5-1694-493a-a1fb-393881c673a4", 
                "subnet_id": "a2f1f29d-571b-4533-907f-5803ab96ead1", 
                "tenant_id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7"
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/deleteRouterInterface_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes an internal interface from a logical router.", 
        "tags": [
          "layer3-ext"
        ], 
        "x-title": "Delete interface from router"
      }
    }, 
    "/v2.0/security-group-rules": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list provides the UUID for each security group rule.", 
        "operationId": "listSecGroupRules", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "security_group_rules": [
                  {
                    "direction": "egress", 
                    "ethertype": "IPv6", 
                    "id": "3c0e45ff-adaf-4124-b083-bf390e5482ff", 
                    "port_range_max": null, 
                    "port_range_min": null, 
                    "protocol": null, 
                    "remote_group_id": null, 
                    "remote_ip_prefix": null, 
                    "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }, 
                  {
                    "direction": "egress", 
                    "ethertype": "IPv4", 
                    "id": "93aa42e5-80db-4581-9391-3a608bd0e448", 
                    "port_range_max": null, 
                    "port_range_min": null, 
                    "protocol": null, 
                    "remote_group_id": null, 
                    "remote_ip_prefix": null, 
                    "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }, 
                  {
                    "direction": "ingress", 
                    "ethertype": "IPv6", 
                    "id": "c0b09f00-1d49-4e64-a0a7-8a186d928138", 
                    "port_range_max": null, 
                    "port_range_min": null, 
                    "protocol": null, 
                    "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "remote_ip_prefix": null, 
                    "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }, 
                  {
                    "direction": "ingress", 
                    "ethertype": "IPv4", 
                    "id": "f7d45c89-008e-4bab-88ad-d6811724c51c", 
                    "port_range_max": null, 
                    "port_range_min": null, 
                    "protocol": null, 
                    "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "remote_ip_prefix": null, 
                    "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listSecGroupRules_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists a summary of all OpenStack Networking security group rules that the tenant can access.", 
        "tags": [
          "security_group_rules"
        ], 
        "x-title": "List security group rules"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createSecGroupRule", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createSecGroupRule"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "security_group_rule": {
                  "direction": "ingress", 
                  "ethertype": "IPv4", 
                  "id": "2bc0accf-312e-429a-956e-e4407625eb62", 
                  "port_range_max": 80, 
                  "port_range_min": 80, 
                  "protocol": "tcp", 
                  "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                  "remote_ip_prefix": null, 
                  "security_group_id": "a7734e61-b545-452d-a3cd-0189cbd9747a", 
                  "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createSecGroupRule_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates an OpenStack Networking security group rule.", 
        "tags": [
          "security_group_rules"
        ], 
        "x-title": "Create security group rule"
      }
    }, 
    "/v2.0/security-group-rules/{security-group-rules-id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteSecGroupRule", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {
              "text/plain": "status: 204"
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a rule from an OpenStack Networking security group.", 
        "tags": [
          "security_group_rules"
        ], 
        "x-title": "Delete security group rule"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body contains the following information about the\nsecurity group rule:", 
        "operationId": "showSecGroupRule", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "security_group_rule": {
                  "direction": "egress", 
                  "ethertype": "IPv6", 
                  "id": "3c0e45ff-adaf-4124-b083-bf390e5482ff", 
                  "port_range_max": null, 
                  "port_range_min": null, 
                  "protocol": null, 
                  "remote_group_id": null, 
                  "remote_ip_prefix": null, 
                  "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                  "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showSecGroupRule_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows detailed information for a security group rule.", 
        "tags": [
          "security_group_rules"
        ], 
        "x-title": "Show security group rule"
      }
    }, 
    "/v2.0/security-groups": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list shows the UUID for and the rules that are associated with\neach security group.", 
        "operationId": "listSecGroups", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "security_groups": [
                  {
                    "description": "default", 
                    "id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "name": "default", 
                    "security_group_rules": [
                      {
                        "direction": "egress", 
                        "ethertype": "IPv6", 
                        "id": "3c0e45ff-adaf-4124-b083-bf390e5482ff", 
                        "port_range_max": null, 
                        "port_range_min": null, 
                        "protocol": null, 
                        "remote_group_id": null, 
                        "remote_ip_prefix": null, 
                        "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                      }, 
                      {
                        "direction": "egress", 
                        "ethertype": "IPv4", 
                        "id": "93aa42e5-80db-4581-9391-3a608bd0e448", 
                        "port_range_max": null, 
                        "port_range_min": null, 
                        "protocol": null, 
                        "remote_group_id": null, 
                        "remote_ip_prefix": null, 
                        "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                      }, 
                      {
                        "direction": "ingress", 
                        "ethertype": "IPv6", 
                        "id": "c0b09f00-1d49-4e64-a0a7-8a186d928138", 
                        "port_range_max": null, 
                        "port_range_min": null, 
                        "protocol": null, 
                        "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "remote_ip_prefix": null, 
                        "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                      }, 
                      {
                        "direction": "ingress", 
                        "ethertype": "IPv4", 
                        "id": "f7d45c89-008e-4bab-88ad-d6811724c51c", 
                        "port_range_max": null, 
                        "port_range_min": null, 
                        "protocol": null, 
                        "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "remote_ip_prefix": null, 
                        "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                      }
                    ], 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listSecGroups_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists OpenStack Networking security groups to which the tenant has access.", 
        "tags": [
          "security-groups"
        ], 
        "x-title": "List security groups"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation creates a security group with default security group\nrules for the IPv4 and IPv6 ether types.", 
        "operationId": "createSecGroup", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createSecGroup"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "security_group": {
                  "description": "security group for webservers", 
                  "id": "2076db17-a522-4506-91de-c6dd8e837028", 
                  "name": "new-webservers", 
                  "security_group_rules": [
                    {
                      "direction": "egress", 
                      "ethertype": "IPv4", 
                      "id": "38ce2d8e-e8f1-48bd-83c2-d33cb9f50c3d", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": null, 
                      "remote_ip_prefix": null, 
                      "security_group_id": "2076db17-a522-4506-91de-c6dd8e837028", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }, 
                    {
                      "direction": "egress", 
                      "ethertype": "IPv6", 
                      "id": "565b9502-12de-4ffd-91e9-68885cff6ae1", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": null, 
                      "remote_ip_prefix": null, 
                      "security_group_id": "2076db17-a522-4506-91de-c6dd8e837028", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }
                  ], 
                  "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createSecGroup_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates an OpenStack Networking security group.", 
        "tags": [
          "security-groups"
        ], 
        "x-title": "Create security group"
      }
    }, 
    "/v2.0/security-groups/{security_group_id}": {
      "delete": {
        "consumes": [], 
        "description": "This operation deletes an OpenStack Networking security group and\nits associated security group rules, provided that a port is not\nassociated with the security group.\n\nThis operation does not require a request body. This operation does\nnot return a response body.", 
        "operationId": "deleteSecGroup", 
        "parameters": [
          {
            "description": "The UUID of the security group.", 
            "format": "", 
            "in": "path", 
            "name": "security_group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {
              "text/plain": "status: 204"
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes an OpenStack Networking security group.", 
        "tags": [
          "security-groups"
        ], 
        "x-title": "Delete security group"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The response contains the description, name, UUID, and security\ngroup rules that are associated with the security group and tenant.", 
        "operationId": "showSecGroup", 
        "parameters": [
          {
            "description": "The UUID of the security group.", 
            "format": "", 
            "in": "path", 
            "name": "security_group_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Show detailed information.", 
            "format": "", 
            "in": "query", 
            "name": "verbose", 
            "required": false, 
            "type": "boolean"
          }, 
          {
            "description": "The fields that you want the server to return.", 
            "format": "", 
            "in": "query", 
            "name": "fields", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "security_group": {
                  "description": "default", 
                  "id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                  "name": "default", 
                  "security_group_rules": [
                    {
                      "direction": "egress", 
                      "ethertype": "IPv6", 
                      "id": "3c0e45ff-adaf-4124-b083-bf390e5482ff", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": null, 
                      "remote_ip_prefix": null, 
                      "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }, 
                    {
                      "direction": "egress", 
                      "ethertype": "IPv4", 
                      "id": "93aa42e5-80db-4581-9391-3a608bd0e448", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": null, 
                      "remote_ip_prefix": null, 
                      "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }, 
                    {
                      "direction": "ingress", 
                      "ethertype": "IPv6", 
                      "id": "c0b09f00-1d49-4e64-a0a7-8a186d928138", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "remote_ip_prefix": null, 
                      "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }, 
                    {
                      "direction": "ingress", 
                      "ethertype": "IPv4", 
                      "id": "f7d45c89-008e-4bab-88ad-d6811724c51c", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "remote_ip_prefix": null, 
                      "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }
                  ], 
                  "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showSecGroup_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a security group.", 
        "tags": [
          "security-groups"
        ], 
        "x-title": "Show security group"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateSecGroup", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateSecGroup"
            }
          }, 
          {
            "description": "The UUID of the security group.", 
            "format": "", 
            "in": "path", 
            "name": "security_group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "security_group": {
                  "description": "my security group", 
                  "id": "01fbade5-b664-42f6-83ae-4e214f4263fa", 
                  "name": "mysecgroup", 
                  "rules": [], 
                  "tenant_id": "a52cdb9cc7854a39a23d3af73a40899e"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateSecGroup_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "405": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "413": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a security group.", 
        "tags": [
          "security-groups"
        ], 
        "x-title": "Update security group"
      }
    }, 
    "/v2.0/service_profiles": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list can be empty.\n\nStandard query parameters are supported on the URI.", 
        "operationId": "listServiceProfiles", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "service_profiles": [
                  {
                    "description": "", 
                    "driver": "neutron_lbaas.drivers.octavia.driver.OctaviaDriver", 
                    "enabled": true, 
                    "id": "4e5b9191-ffbe-4f7a-b112-2db98232fd32", 
                    "metainfo": ""
                  }, 
                  {
                    "description": "", 
                    "driver": "neutron_lbaas.drivers.octavia.driver.OctaviaDriver", 
                    "enabled": true, 
                    "id": "684322c5-703a-48a2-8138-34b99942a7ef", 
                    "metainfo": ""
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listServiceProfiles_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all service profiles visible for the tenant account.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "List service profiles"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation establishes a new service profile that can be\nassociated with one or more flavors.\n\nEither metadata or a driver is required.\n\nIf a driver is specified but does not exist, call will return a\n``Not found 404`` error with the response body explaining that the\ndriver could not be found.\n\nCreation currently limited to administrators. Other users will\nreceive a ``Forbidden 403`` response code with a response body\nNeutronError message expressing that creation is disallowed by\npolicy.\n\nIf the API cannot fulfill the request due to insufficient data or\ndata that is not valid, the service returns the HTTP ``Bad Request\n(400)`` response code with information about the failure in the\nresponse body. Validation errors require that you correct the error\nand submit the request again.", 
        "operationId": "createServiceProfile", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createServiceProfile"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "service_profile": {
                  "description": "Dummy profile", 
                  "driver": "neutron_lbaas.drivers.octavia.driver.OctaviaDriver", 
                  "enabled": true, 
                  "id": "7c793e5f-9b64-44e0-8b1f-902e59c85a01", 
                  "metainfo": "{'foo': 'bar'}"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createServiceProfile_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a service profile.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Create service profile"
      }
    }, 
    "/v2.0/service_profiles/{profile_id}": {
      "delete": {
        "consumes": [], 
        "description": "Attempting to delete a service profile that is currently associated\nwith a flavor will return a ``Conflict 409`` with a response body\ncontaining an in use message.", 
        "operationId": "deleteServiceProfile", 
        "parameters": [
          {
            "description": "The UUID of the profile.", 
            "format": "", 
            "in": "path", 
            "name": "profile_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a service profile.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Delete service profile"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a service profile object by ID. If you are\nnot an administrative user and the object is not visible to your\ntenant account, the service returns the HTTP ``Forbidden (403)``\nresponse code.", 
        "operationId": "showServiceProfile", 
        "parameters": [
          {
            "description": "The UUID of the profile.", 
            "format": "", 
            "in": "path", 
            "name": "profile_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "service_profile": {
                  "description": "Dummy profile", 
                  "driver": "neutron_lbaas.drivers.octavia.driver.OctaviaDriver", 
                  "enabled": true, 
                  "id": "7c793e5f-9b64-44e0-8b1f-902e59c85a01", 
                  "metainfo": "{'foo': 'bar'}"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showServiceProfile_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a service profile.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Show service profile details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateServiceProfile", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateServiceProfile"
            }
          }, 
          {
            "description": "The UUID of the profile.", 
            "format": "", 
            "in": "path", 
            "name": "profile_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "service_profile": {
                  "description": "New description", 
                  "driver": "neutron_lbaas.drivers.octavia.driver.OctaviaDriver", 
                  "enabled": false, 
                  "id": "7c793e5f-9b64-44e0-8b1f-902e59c85a01", 
                  "metainfo": "{'new': 'info'}"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateServiceProfile_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a service profile.", 
        "tags": [
          "flavors-framework-v2.0"
        ], 
        "x-title": "Update service profile"
      }
    }, 
    "/v2.0/subnetpools": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Default policy settings returns exclusively subnet pools owned by\nthe tenant submitting the request, unless the request is submitted\nby a user with administrative rights.", 
        "operationId": "listSubnetPools", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "subnetpools": [
                  {
                    "address_scope_id": null, 
                    "default_prefixlen": "64", 
                    "default_quota": null, 
                    "id": "03f761e6-eee0-43fc-a921-8acf64c14988", 
                    "ip_version": 6, 
                    "is_default": false, 
                    "max_prefixlen": "64", 
                    "min_prefixlen": "64", 
                    "name": "my-subnet-pool-ipv6", 
                    "prefixes": [
                      "2001:db8:0:2::/64", 
                      "2001:db8::/63"
                    ], 
                    "shared": false, 
                    "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                  }, 
                  {
                    "address_scope_id": null, 
                    "default_prefixlen": "25", 
                    "default_quota": null, 
                    "id": "f49a1319-423a-4ee6-ba54-1d95a4f6cc68", 
                    "ip_version": 4, 
                    "is_default": false, 
                    "max_prefixlen": "30", 
                    "min_prefixlen": "24", 
                    "name": "my-subnet-pool-ipv4", 
                    "prefixes": [
                      "10.10.0.0/21", 
                      "192.168.0.0/16"
                    ], 
                    "shared": false, 
                    "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listSubnetPools_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists subnet pools to which the tenant has access.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "x-title": "List subnet pools"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createSubnetPool", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createSubnetPool"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "subnetpool": {
                  "address_scope_id": null, 
                  "default_prefixlen": "25", 
                  "default_quota": null, 
                  "id": "f49a1319-423a-4ee6-ba54-1d95a4f6cc68", 
                  "ip_version": 4, 
                  "is_default": false, 
                  "max_prefixlen": "30", 
                  "min_prefixlen": "24", 
                  "name": "my-subnet-pool", 
                  "prefixes": [
                    "10.10.0.0/21", 
                    "192.168.0.0/16"
                  ], 
                  "shared": false, 
                  "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createSubnetPool_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a subnet pool.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "x-title": "Create subnet pool"
      }
    }, 
    "/v2.0/subnetpools/{subnetpool_id}": {
      "delete": {
        "consumes": [], 
        "description": "The operation fails if any subnets allocated from the subnet pool\nare still in use.", 
        "operationId": "removeSubnetPool", 
        "parameters": [
          {
            "description": "The UUID of the subnet pool.", 
            "format": "", 
            "in": "path", 
            "name": "subnetpool_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a subnet pool.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "x-title": "Delete subnet pool"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Use the ``fields`` query parameter to filter the results.", 
        "operationId": "showSubnetPool", 
        "parameters": [
          {
            "description": "The UUID of the subnet pool.", 
            "format": "", 
            "in": "path", 
            "name": "subnetpool_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "subnetpool": {
                  "address_scope_id": null, 
                  "created_at": "2016-03-08T20:19:41", 
                  "default_prefixlen": "64", 
                  "default_quota": null, 
                  "id": "03f761e6-eee0-43fc-a921-8acf64c14988", 
                  "ip_version": 6, 
                  "is_default": false, 
                  "max_prefixlen": "64", 
                  "min_prefixlen": "64", 
                  "name": "my-subnet-pool", 
                  "prefixes": [
                    "2001:db8:0:2::/64", 
                    "2001:db8::/63"
                  ], 
                  "shared": false, 
                  "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08", 
                  "updated_at": "2016-03-08T20:19:41"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showSubnetPool_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows information for a subnet pool.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "x-title": "Show subnet pool"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateSubnetPool", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateSubnetPool"
            }
          }, 
          {
            "description": "The UUID of the subnet pool.", 
            "format": "", 
            "in": "path", 
            "name": "subnetpool_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "subnetpool": {
                  "address_scope_id": null, 
                  "default_prefixlen": 64, 
                  "default_quota": null, 
                  "id": "03f761e6-eee0-43fc-a921-8acf64c14988", 
                  "ip_version": 6, 
                  "is_default": false, 
                  "max_prefixlen": 64, 
                  "min_prefixlen": 64, 
                  "name": "my-new-subnetpool-name", 
                  "prefixes": [
                    "2001:db8::/63", 
                    "2001:db8:0:2::/64"
                  ], 
                  "shared": false, 
                  "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateSubnetPool_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a subnet pool.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "x-title": "Update subnet pool"
      }
    }, 
    "/v2.0/vpn/endpoint-groups": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listVpnEndpointGroups", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "endpoint_groups": [
                  {
                    "description": "", 
                    "endpoints": [
                      "a3da778c-adfb-46db-88b3-d2ce53290a89"
                    ], 
                    "id": "6bf34c7c-864c-4948-a6d4-db791669f9d4", 
                    "name": "locals", 
                    "tenant_id": "4ad57e7ce0b24fca8f12b9834d91079d", 
                    "type": "subnet"
                  }, 
                  {
                    "description": "", 
                    "endpoints": [
                      "10.2.0.0/24", 
                      "10.3.0.0/24"
                    ], 
                    "id": "6ecd9cf3-ca64-46c7-863f-f2eb1b9e838a", 
                    "name": "peers", 
                    "tenant_id": "4ad57e7ce0b24fca8f12b9834d91079d", 
                    "type": "cidr"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listVpnEndpointGroups_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists VPN endpoint groups.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "List VPN endpoint groups"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The endpoint group contains one or more endpoints of a specific\ntype that you can use to create a VPN connections.", 
        "operationId": "createVpnEndpointGroup", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createVpnEndpointGroup"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "endpoint_group": {
                  "description": "", 
                  "endpoints": [
                    "10.2.0.0/24", 
                    "10.3.0.0/24"
                  ], 
                  "id": "6ecd9cf3-ca64-46c7-863f-f2eb1b9e838a", 
                  "name": "peers", 
                  "tenant_id": "4ad57e7ce0b24fca8f12b9834d91079d", 
                  "type": "cidr"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createVpnEndpointGroup_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a VPN endpoint group.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Create VPN endpoint group"
      }
    }, 
    "/v2.0/vpn/endpoint-groups/{endpoint_group_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteVpnEndpointGroup", 
        "parameters": [
          {
            "description": "The UUID of the VPN endpoint group.", 
            "format": "", 
            "in": "path", 
            "name": "endpoint_group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a VPN endpoint group.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Remove VPN endpoint group"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showVpnEndpointGroup", 
        "parameters": [
          {
            "description": "The UUID of the VPN endpoint group.", 
            "format": "", 
            "in": "path", 
            "name": "endpoint_group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "endpoint_group": {
                  "description": "", 
                  "endpoints": [
                    "10.2.0.0/24", 
                    "10.3.0.0/24"
                  ], 
                  "id": "6ecd9cf3-ca64-46c7-863f-f2eb1b9e838a", 
                  "name": "peers", 
                  "tenant_id": "4ad57e7ce0b24fca8f12b9834d91079d", 
                  "type": "cidr"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showVpnEndpointGroup_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a VPN endpoint group.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Show VPN endpoint group"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateVpnEndpointGroup", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateVpnEndpointGroup"
            }
          }, 
          {
            "description": "The UUID of the VPN endpoint group.", 
            "format": "", 
            "in": "path", 
            "name": "endpoint_group_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "endpoint_group": {
                  "description": "New description", 
                  "endpoints": [
                    "10.2.0.0/24", 
                    "10.3.0.0/24"
                  ], 
                  "id": "6ecd9cf3-ca64-46c7-863f-f2eb1b9e838a", 
                  "name": "peers", 
                  "tenant_id": "4ad57e7ce0b24fca8f12b9834d91079d", 
                  "type": "cidr"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateVpnEndpointGroup_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates settings for a VPN endpoint group.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Update VPN endpoint group"
      }
    }, 
    "/v2.0/vpn/ikepolicies": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listIKEPolicies", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ikepolicies": [
                  {
                    "auth_algorithm": "sha1", 
                    "description": "", 
                    "encryption_algorithm": "aes-256", 
                    "id": "5522aff7-1b3c-48dd-9c3c-b50f016b73db", 
                    "ike_version": "v1", 
                    "lifetime": {
                      "units": "seconds", 
                      "value": 3600
                    }, 
                    "name": "ikepolicy1", 
                    "pfs": "group5", 
                    "phase1_negotiation_mode": "main", 
                    "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listIKEPolicies_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists IKE policies.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "List IKE policies"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The IKE policy is used for phases one and two negotiation of the\nVPN connection. You can specify both the authentication and\nencryption algorithms for connections.", 
        "operationId": "createIKEPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createIKEPolicy"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "ikepolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encryption_algorithm": "aes-128", 
                  "id": "5522aff7-1b3c-48dd-9c3c-b50f016b73db", 
                  "ike_version": "v1", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 7200
                  }, 
                  "name": "ikepolicy1", 
                  "pfs": "group5", 
                  "phase1_negotiation_mode": "main", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createIKEPolicy_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates an IKE policy.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Create IKE policy"
      }
    }, 
    "/v2.0/vpn/ikepolicies/{ikepolicy_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteIKEPolicy", 
        "parameters": [
          {
            "description": "The UUID of the IKE policy.", 
            "format": "", 
            "in": "path", 
            "name": "ikepolicy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes an IKE policy.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Remove IKE policy"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showIKEPolicy", 
        "parameters": [
          {
            "description": "The UUID of the IKE policy.", 
            "format": "", 
            "in": "path", 
            "name": "ikepolicy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ikepolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encryption_algorithm": "aes-256", 
                  "id": "5522aff7-1b3c-48dd-9c3c-b50f016b73db", 
                  "ike_version": "v1", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 3600
                  }, 
                  "name": "ikepolicy1", 
                  "pfs": "group5", 
                  "phase1_negotiation_mode": "main", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showIKEPolicy_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for an IKE policy.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Show IKE policy details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateIKEPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateIKEPolicy"
            }
          }, 
          {
            "description": "The UUID of the IKE policy.", 
            "format": "", 
            "in": "path", 
            "name": "ikepolicy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ikepolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encryption_algorithm": "aes-256", 
                  "id": "5522aff7-1b3c-48dd-9c3c-b50f016b73db", 
                  "ike_version": "v1", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 3600
                  }, 
                  "name": "ikepolicy1", 
                  "pfs": "group5", 
                  "phase1_negotiation_mode": "main", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateIKEPolicy_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates policy settings in an IKE policy.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Update IKE policy"
      }
    }, 
    "/v2.0/vpn/ipsec-site-connections": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listIPSecSiteConnections", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ipsec_site_connections": [
                  {
                    "admin_state_up": true, 
                    "auth_mode": "psk", 
                    "description": "", 
                    "dpd": {
                      "action": "hold", 
                      "interval": 30, 
                      "timeout": 120
                    }, 
                    "id": "851f280f-5639-4ea3-81aa-e298525ab74b", 
                    "ikepolicy_id": "9b00d6b0-6c93-4ca5-9747-b8ade7bb514f", 
                    "initiator": "bi-directional", 
                    "ipsecpolicy_id": "e6e23d0c-9519-4d52-8ea4-5b1f96d857b1", 
                    "local_ep_group_id": "3e1815dd-e212-43d0-8f13-b494fa553e68", 
                    "mtu": 1500, 
                    "name": "vpnconnection1", 
                    "peer_address": "172.24.4.226", 
                    "peer_cidrs": [], 
                    "peer_ep_group_id": "9ad5a7e0-6dac-41b4-b20d-a7b8645fddf1", 
                    "peer_id": "172.24.4.226", 
                    "psk": "secret", 
                    "route_mode": "static", 
                    "status": "PENDING CREATE", 
                    "tenant_id": "10039663455a446d8ba2cbb058b0f578", 
                    "vpnservice_id": "5c561d9d-eaea-45f6-ae3e-08d1a7080828"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listIPSecSiteConnections_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all IPSec connections.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "List IPSec connections"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "createIPSecSiteConnection", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createIPSecSiteConnection"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "ipsec_site_connection": {
                  "admin_state_up": true, 
                  "auth_mode": "psk", 
                  "description": "", 
                  "dpd": {
                    "action": "hold", 
                    "interval": 30, 
                    "timeout": 120
                  }, 
                  "id": "851f280f-5639-4ea3-81aa-e298525ab74b", 
                  "ikepolicy_id": "9b00d6b0-6c93-4ca5-9747-b8ade7bb514f", 
                  "initiator": "bi-directional", 
                  "ipsecpolicy_id": "e6e23d0c-9519-4d52-8ea4-5b1f96d857b1", 
                  "local_ep_group_id": "3e1815dd-e212-43d0-8f13-b494fa553e68", 
                  "mtu": 1500, 
                  "name": "vpnconnection1", 
                  "peer_address": "172.24.4.233", 
                  "peer_cidrs": [], 
                  "peer_ep_group_id": "9ad5a7e0-6dac-41b4-b20d-a7b8645fddf1", 
                  "peer_id": "172.24.4.233", 
                  "psk": "secret", 
                  "route_mode": "static", 
                  "status": "PENDING_CREATE", 
                  "tenant_id": "10039663455a446d8ba2cbb058b0f578", 
                  "vpnservice_id": "5c561d9d-eaea-45f6-ae3e-08d1a7080828"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createIPSecSiteConnection_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a site-to-site IPSec connection for a service.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Create IPSec connection"
      }
    }, 
    "/v2.0/vpn/ipsec-site-connections/{connection_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteIPSecSiteConnection", 
        "parameters": [
          {
            "description": "The UUID of the IPSec site-to-site connection.", 
            "format": "", 
            "in": "path", 
            "name": "connection_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes an IPSec connection.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Remove IPSec connection"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showIPSecSiteConnection", 
        "parameters": [
          {
            "description": "The UUID of the IPSec site-to-site connection.", 
            "format": "", 
            "in": "path", 
            "name": "connection_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ipsec_site_connection": {
                  "admin_state_up": true, 
                  "auth_mode": "psk", 
                  "description": "", 
                  "dpd": {
                    "action": "hold", 
                    "interval": 30, 
                    "timeout": 120
                  }, 
                  "id": "851f280f-5639-4ea3-81aa-e298525ab74b", 
                  "ikepolicy_id": "9b00d6b0-6c93-4ca5-9747-b8ade7bb514f", 
                  "initiator": "bi-directional", 
                  "ipsecpolicy_id": "e6e23d0c-9519-4d52-8ea4-5b1f96d857b1", 
                  "local_ep_group_id": "3e1815dd-e212-43d0-8f13-b494fa553e68", 
                  "mtu": 1500, 
                  "name": "vpnconnection1", 
                  "peer_address": "172.24.4.226", 
                  "peer_cidrs": [], 
                  "peer_ep_group_id": "9ad5a7e0-6dac-41b4-b20d-a7b8645fddf1", 
                  "peer_id": "172.24.4.226", 
                  "psk": "secret", 
                  "route_mode": "static", 
                  "status": "DOWN", 
                  "tenant_id": "10039663455a446d8ba2cbb058b0f578", 
                  "vpnservice_id": "5c561d9d-eaea-45f6-ae3e-08d1a7080828"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showIPSecSiteConnection_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for an IPSec connection.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Show IPSec connection"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateIPSecSiteConnection", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateIPSecSiteConnection"
            }
          }, 
          {
            "description": "The UUID of the IPSec site-to-site connection.", 
            "format": "", 
            "in": "path", 
            "name": "connection_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ipsec_site_connection": {
                  "admin_state_up": true, 
                  "auth_mode": "psk", 
                  "description": "New description", 
                  "dpd": {
                    "action": "hold", 
                    "interval": 30, 
                    "timeout": 120
                  }, 
                  "id": "851f280f-5639-4ea3-81aa-e298525ab74b", 
                  "ikepolicy_id": "9b00d6b0-6c93-4ca5-9747-b8ade7bb514f", 
                  "initiator": "bi-directional", 
                  "ipsecpolicy_id": "e6e23d0c-9519-4d52-8ea4-5b1f96d857b1", 
                  "local_ep_group_id": "3e1815dd-e212-43d0-8f13-b494fa553e68", 
                  "mtu": 2000, 
                  "name": "vpnconnection1", 
                  "peer_address": "172.24.4.233", 
                  "peer_cidrs": [], 
                  "peer_ep_group_id": "9ad5a7e0-6dac-41b4-b20d-a7b8645fddf1", 
                  "peer_id": "172.24.4.233", 
                  "psk": "secret", 
                  "route_mode": "static", 
                  "status": "DOWN", 
                  "tenant_id": "10039663455a446d8ba2cbb058b0f578", 
                  "vpnservice_id": "5c561d9d-eaea-45f6-ae3e-08d1a7080828"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateIPSecSiteConnection_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates connection settings for an IPSec connection.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Update IPSec connection"
      }
    }, 
    "/v2.0/vpn/ipsecpolicies": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listIPSecPolicies", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ipsecpolicies": [
                  {
                    "auth_algorithm": "sha1", 
                    "description": "", 
                    "encapsulation_mode": "tunnel", 
                    "encryption_algorithm": "aes-128", 
                    "id": "5291b189-fd84-46e5-84bd-78f40c05d69c", 
                    "lifetime": {
                      "units": "seconds", 
                      "value": 3600
                    }, 
                    "name": "ipsecpolicy1", 
                    "pfs": "group14", 
                    "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                    "transform_protocol": "esp"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listIPSecPolicies_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all IPSec policies.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "List IPSec policies"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The IPsec policy specifies the authentication and encryption\nalgorithms and encapsulation mode to use for the established VPN\nconnection.", 
        "operationId": "createIPSecPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createIPSecPolicy"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "ipsecpolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encapsulation_mode": "tunnel", 
                  "encryption_algorithm": "aes-128", 
                  "id": "5291b189-fd84-46e5-84bd-78f40c05d69c", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 7200
                  }, 
                  "name": "ipsecpolicy1", 
                  "pfs": "group5", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                  "transform_protocol": "esp"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createIPSecPolicy_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates an IP security (IPSec) policy.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Create IPSec policy"
      }
    }, 
    "/v2.0/vpn/ipsecpolicies/{ipsecpolicy_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteIPSecPolicy", 
        "parameters": [
          {
            "description": "The UUID of the IPSec policy.", 
            "format": "", 
            "in": "path", 
            "name": "ipsecpolicy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes an IPSec policy.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Remove IPSec policy"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "showIPSecPolicy", 
        "parameters": [
          {
            "description": "The UUID of the IPSec policy.", 
            "format": "", 
            "in": "path", 
            "name": "ipsecpolicy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ipsecpolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encapsulation_mode": "tunnel", 
                  "encryption_algorithm": "aes-128", 
                  "id": "5291b189-fd84-46e5-84bd-78f40c05d69c", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 3600
                  }, 
                  "name": "ipsecpolicy1", 
                  "pfs": "group14", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                  "transform_protocol": "esp"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showIPSecPolicy_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for an IPSec policy.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Show IPSec policy"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateIPSecPolicy", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateIPSecPolicy"
            }
          }, 
          {
            "description": "The UUID of the IPSec policy.", 
            "format": "", 
            "in": "path", 
            "name": "ipsecpolicy_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "ipsecpolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encapsulation_mode": "tunnel", 
                  "encryption_algorithm": "aes-128", 
                  "id": "5291b189-fd84-46e5-84bd-78f40c05d69c", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 3600
                  }, 
                  "name": "ipsecpolicy1", 
                  "pfs": "group14", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                  "transform_protocol": "esp"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateIPSecPolicy_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates policy settings in an IPSec policy.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Update IPSec policy"
      }
    }, 
    "/v2.0/vpn/vpnservices": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The list might be empty.", 
        "operationId": "listVPNServices", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "vpnservices": [
                  {
                    "admin_state_up": true, 
                    "description": "", 
                    "external_v4_ip": "172.32.1.11", 
                    "external_v6_ip": "2001:db8::1", 
                    "id": "5c561d9d-eaea-45f6-ae3e-08d1a7080828", 
                    "name": "myservice", 
                    "router_id": "66e3b16c-8ce5-40fb-bb49-ab6d8dc3f2aa", 
                    "status": "PENDING_CREATE", 
                    "subnet_id": null, 
                    "tenant_id": "10039663455a446d8ba2cbb058b0f578"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/listVPNServices_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all VPN services.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "List VPN services"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "The service is associated with a router. After you create the\nservice, it can contain multiple VPN connections.", 
        "operationId": "createVPNService", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createVPNService"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "vpnservice": {
                  "admin_state_up": true, 
                  "description": "", 
                  "external_v4_ip": "172.32.1.11", 
                  "external_v6_ip": "2001:db8::1", 
                  "id": "5c561d9d-eaea-45f6-ae3e-08d1a7080828", 
                  "name": "myservice", 
                  "router_id": "66e3b16c-8ce5-40fb-bb49-ab6d8dc3f2aa", 
                  "status": "PENDING_CREATE", 
                  "subnet_id": null, 
                  "tenant_id": "10039663455a446d8ba2cbb058b0f578"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/createVPNService_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a VPN service.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Create VPN service"
      }
    }, 
    "/v2.0/vpn/vpnservices/{service_id}": {
      "delete": {
        "consumes": [], 
        "description": "If the service has connections, the request is rejected.", 
        "operationId": "deleteVPNService", 
        "parameters": [
          {
            "description": "The UUID of the VPN service.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a VPN service.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Remove VPN service"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "If the user is not an administrative user and the VPN service\nobject does not belong to the tenant account for the user, the\noperation returns the ``Forbidden (403)`` response code.", 
        "operationId": "showVPNService", 
        "parameters": [
          {
            "description": "The UUID of the VPN service.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "vpnservice": {
                  "admin_state_up": true, 
                  "description": "", 
                  "external_v4_ip": "172.32.1.11", 
                  "external_v6_ip": "2001:db8::1", 
                  "id": "5c561d9d-eaea-45f6-ae3e-08d1a7080828", 
                  "name": "myservice", 
                  "router_id": "66e3b16c-8ce5-40fb-bb49-ab6d8dc3f2aa", 
                  "status": "PENDING_CREATE", 
                  "subnet_id": null, 
                  "tenant_id": "10039663455a446d8ba2cbb058b0f578"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/showVPNService_200"
            }
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a VPN service.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Show VPN service details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "Updates the attributes of a VPN service. You cannot update a\nservice with a ``PENDING_*`` status.", 
        "operationId": "updateVPNService", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateVPNService"
            }
          }, 
          {
            "description": "The UUID of the VPN service.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "vpnservice": {
                  "admin_state_up": true, 
                  "description": "Updated description", 
                  "id": "41bfef97-af4e-4f6b-a5d3-4678859d2485", 
                  "name": "myvpn", 
                  "router_id": "881b7b30-4efb-407e-a162-5630a7af3595", 
                  "status": "ACTIVE", 
                  "subnet_id": null, 
                  "tenant_id": "26de9cd6cae94c8cb9f79d660d628e1f"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateVPNService_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a VPN service.", 
        "tags": [
          "vpnaas"
        ], 
        "x-title": "Update VPN service"
      }
    }, 
    "/v2.0/{resource_type}/{resource_id}/tags": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteTags", 
        "parameters": [
          {
            "description": "The type of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_type", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes all tags on the resource.", 
        "tags": [
          "tag-ext"
        ], 
        "x-title": "Remove all tags"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "updateTags", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateTags"
            }
          }, 
          {
            "description": "The type of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_type", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "tags": [
                  "red", 
                  "blue"
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/updateTags_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Replaces all tags on the resource.", 
        "tags": [
          "tag-ext"
        ], 
        "x-title": "Replace all tags"
      }
    }, 
    "/v2.0/{resource_type}/{resource_id}/tags/{tag}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "deleteTag", 
        "parameters": [
          {
            "description": "The type of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_type", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name for the tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Removes a tag on the resource.", 
        "tags": [
          "tag-ext"
        ], 
        "x-title": "Remove a tag"
      }, 
      "get": {
        "consumes": [], 
        "description": "", 
        "operationId": "showTag", 
        "parameters": [
          {
            "description": "The type of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_type", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name for the tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Confirms a given tag is set on the resource.", 
        "tags": [
          "tag-ext"
        ], 
        "x-title": "Confirm a tag"
      }, 
      "put": {
        "consumes": [], 
        "description": "", 
        "operationId": "updateTag", 
        "parameters": [
          {
            "description": "The type of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_type", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name for the tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of resource which the tag is set on.", 
            "format": "", 
            "in": "path", 
            "name": "resource_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Adds a tag on the resource.", 
        "tags": [
          "tag-ext"
        ], 
        "x-title": "Add a tag"
      }
    }
  }, 
  "produces": [
    "application/json"
  ], 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "Extensions", 
      "name": "extensions", 
      "x-summary": "Lists available Networking API v2.0 extensions and shows details\nfor an extension."
    }, 
    {
      "description": "Networking Flavors Framework v2.0 (CURRENT) (flavor, service_profile)", 
      "name": "flavors-framework-v2.0", 
      "x-summary": "Extension that allows user selection of operator-curated flavors\nduring resource creation.\n\nService ``q-flavors`` must be enabled in the configuration to use\nthis feature."
    }, 
    {
      "description": "FWaaS v2.0 (CURRENT) (fw, firewalls, firewall_policies, firewall_rules)", 
      "name": "fwaas-v2.0", 
      "x-summary": "Use the Firewall-as-a-Service (FWaaS) v2.0 extension to deploy\nfirewalls to protect your networks.\n\nThe FWaaS extension enables you to:\n\n- Apply firewall rules on traffic entering and leaving tenant\n  networks.\n\n- Apply TCP, UDP, ICMP, or protocol-agnostic rules.\n\n- Create and share firewall policies that hold an ordered collection\n  of the firewall rules.\n\n- Audit firewall rules and policies.\n\nThis extension introduces these resources:\n\n- ``firewall``. A logical firewall resource that a tenant can\n  instantiate and manage. A firewall can have one firewall policy.\n\n- ``firewall_policy``. An ordered collection of firewall rules. You\n  can share a firewall policy across tenants. You can include a\n  firewall policy as part of an audit workflow so that an\n  authorized relevant entity can audit the firewall policy. This\n  entity can differ from the tenant who created, or the tenants\n  that use, the firewall policy.\n\n- ``firewall_rule``. A collection of attributes, such as ports and\n  IP addresses. These attributes define match criteria and an\n  action to take, such as allow or deny, on matched data traffic."
    }, 
    {
      "description": "LBaaS 2.0 (STABLE) (lbaas, loadbalancers, listeners, health_monitors, pools, members)", 
      "name": "lbaas", 
      "x-summary": "The Load-Balancer-as-a-Service (LBaaS) version 2.0 extension pairs\nwith the Networking 2.0 API to enable OpenStack tenants to manage\nload balancers for their VMs. With this extension you can load-\nbalance client traffic from one network to application services,\nsuch as VMs, on the same network.\n\nUse this extension to create and manage load balancers, listeners,\npools, members of a pool, and health monitors and view status of a\nresource.\n\n**Load balancer statuses**\n\n+----------------+--------------------------------------------------------------------+\n| Status         | Description                                                        |\n+----------------+--------------------------------------------------------------------+\n| ACTIVE         | The resource is ready and active.                                  |\n+----------------+--------------------------------------------------------------------+\n| PENDING_CREATE | The resource is being created.                                     |\n+----------------+--------------------------------------------------------------------+\n| PENDING_UPDATE | The resource is being updated.                                     |\n+----------------+--------------------------------------------------------------------+\n| PENDING_DELETE | The resource is pending deletion.                                  |\n+----------------+--------------------------------------------------------------------+\n| INACTIVE       | The resource is not active.                                        |\n+----------------+--------------------------------------------------------------------+\n| ERROR          | An object within the service is not working. The ``error_details`` |\n|                | attribute provides an explanation for the error, its cause, and    |\n|                | possibly a solution.                                               |\n+----------------+--------------------------------------------------------------------+"
    }, 
    {
      "description": "LBaaS 1.0 (DEPRECATED) (lb, vips, health_monitors, pools, members)", 
      "name": "lbaas", 
      "x-summary": "The Load-Balancer-as-a-Service (LBaaS) v1.0 extension pairs with\nthe Networking v2.0 API to enable OpenStack tenants to manage load\nbalancers for their VMs. With this extension, you can load-balance\nclient traffic from one network to application services, such as\nVMs, on the same network.\n\nUse this extension to create and manage virtual IP addresses\n(VIPs), pools, members of a pool, health monitors, and view status\nof a resource.\n\n**Load balancer statuses**\n\n+----------------+--------------------------------------------------------------------+\n| Status         | Description                                                        |\n+----------------+--------------------------------------------------------------------+\n| ACTIVE         | The resource is ready and active.                                  |\n+----------------+--------------------------------------------------------------------+\n| PENDING_CREATE | The resource is being created.                                     |\n+----------------+--------------------------------------------------------------------+\n| PENDING_UPDATE | The resource is being updated.                                     |\n+----------------+--------------------------------------------------------------------+\n| PENDING_DELETE | The resource is pending deletion.                                  |\n+----------------+--------------------------------------------------------------------+\n| INACTIVE       | The resource is not active.                                        |\n+----------------+--------------------------------------------------------------------+\n| ERROR          | An object within the service is not working. The ``error_details`` |\n|                | attribute provides an explanation for the error, its cause, and    |\n|                | possibly a solution.                                               |\n+----------------+--------------------------------------------------------------------+"
    }, 
    {
      "description": "Metering labels and rules (metering-labels, metering-label-rules)", 
      "name": "metering-labels-ext", 
      "x-summary": "Creates, modifies, and deletes OpenStack Layer3 metering labels and\nrules."
    }, 
    {
      "description": "Networks provider extended attributes (networks)", 
      "name": "network-provider", 
      "x-summary": "Lists, creates, shows information for, updates, and deletes\nnetworks.\n\nThe provider extension decorates network resources with additional\nattributes. These attributes are ``provider:network_type``,\n``provider:physical_network``, and ``provider:segmentation_id``.\nThe validation rules for these attributes are the same as for the\n`Networks multiple provider extension\n<http://developer.openstack.org/api-ref-networking-v2-ext.html\n#networks-multi-provider-ext>`_ . You cannot use both extensions at\nthe same time."
    }, 
    {
      "description": "Networks multiple provider extension (networks)", 
      "name": "networks-multi-provider-ext", 
      "x-summary": "Enables administrative users to define multiple physical bindings\nfor an OpenStack Networking network and list or show details for\nnetworks with multiple physical bindings.\n\nYou cannot update any ``provider`` attributes. If you try to do so,\nan error occurs.\n\nTo delete a network with multiple physical bindings, issue a normal\ndelete network request.\n\nTo define multiple physical bindings for a network, include a\n``segments`` list in the request body of a ``POST /v2.0/networks``\nrequest. Each element in the ``segments`` list has the same\nstructure as the provider network attributes. These attributes are\n``provider:network_type``, ``provider:physical_network``, and\n``provider:segmentation_id``. The validation rules for these\nattributes are the same as for the `Networks provider extended\nattributes <http://developer.openstack.org/api-ref-\nnetworking-v2-ext.html#network_provider-ext>`_ . You cannot use\nboth extensions at the same time.\n\nThe NSX and ML2 plug-ins support this extension. With the ML2 plug-\nin, you can specify multiple VLANs for a network, a VXLAN tunnel\nID, and a VLAN."
    }, 
    {
      "description": "VLAN transparency extension (networks)", 
      "name": "networks-vlan-transparency-ext", 
      "x-summary": "Enables plug-ins that support VLAN transparency to deliver VLAN-\ntransparent trunk networks. If the service does not support VLAN\ntransparency and a user requests a VLAN-transparent network, the\nplug-in refuses to create one and returns an appropriate error to\nthe user.\n\nYou cannot update the ``vlan-transparent`` attribute. If you try to\ndo so, an error occurs.\n\nTo delete a VLAN-transparent network, issue a normal delete network\nrequest.\n\nThe ML2 plug-in currently supports this extension. With the ML2\nplug-in, you can set the ``vlan-transparent`` attribute to either\n``true`` or ``false``."
    }, 
    {
      "description": "Ports binding extended attributes (ports)", 
      "name": "port-binding", 
      "x-summary": "Lists, creates, shows information for, updates, and deletes ports."
    }, 
    {
      "description": "QoS policies (qos)", 
      "name": "qos-ext", 
      "x-summary": "Lists, creates, shows information for, and updates QoS policies."
    }, 
    {
      "description": "Quotas extension (quotas)", 
      "name": "quotas", 
      "x-summary": "Lists quotas for tenants who have non-default quota values, and\nlists, updates, and resets quotas for a tenant.\n\nA quota value of ``-1`` means that quota has no limit."
    }, 
    {
      "description": "Extra routes (routers)", 
      "name": "extraroute", 
      "x-summary": "Adds extra routes to the ``router`` resource.\n\nYou can update a router to add a set of next hop IPs and\ndestination CIDRs.\n\nThe next hop IP must be part of a subnet to which the router\ninterfaces are connected. You can configure the ``routes``\nattribute on only update operations."
    }, 
    {
      "description": "Layer-3 networking (routers, floatingips)", 
      "name": "layer3-ext", 
      "x-summary": "Routes packets between subnets, forwards packets from internal\nnetworks to external ones, and accesses instances from external\nnetworks through floating IPs.\n\nThis extension introduces these resources:\n\n- **router**. A logical entity for forwarding packets across\n  internal subnets and NATting them on external networks through an\n  appropriate external gateway.\n\n- **floatingip**. An external IP address that you map to a port in\n  an internal network."
    }, 
    {
      "description": "Security groups (security-groups)", 
      "name": "security-groups", 
      "x-summary": "Lists, creates, shows information for, updates, and deletes\nsecurity groups."
    }, 
    {
      "description": "Security group rules (security-group-rules)", 
      "name": "security_group_rules", 
      "x-summary": "Lists, creates, shows information for, and deletes security group\nrules."
    }, 
    {
      "description": "Subnet pools extension (subnetpools)", 
      "name": "subnetpools-ext", 
      "x-summary": "Lists, creates, shows details for, updates, and deletes subnet\npools."
    }, 
    {
      "description": "Tag extension (tags)", 
      "name": "tag-ext", 
      "x-summary": "Shows details for, updates, and deletes tags. This extension is\navailable since Mitaka release."
    }, 
    {
      "description": "VPNaaS 2.0 (CURRENT) (vpn, vpnservices, ikepolicies, ipsecpolicies, endpoint-groups, ipsec-site-connections)", 
      "name": "vpnaas", 
      "x-summary": "The Virtual-Private-Network-as-a-Service (VPNaaS) extension enables\nOpenStack tenants to extend private networks across the public\ntelecommunication infrastructure.\n\nThis initial implementation of the VPNaaS extension provides:\n\n- Site-to-site VPN that connects two private networks.\n\n- Multiple VPN connections per tenant.\n\n- IKEv1 policy support with 3des, aes-128, aes-256, or aes-192\n  encryption.\n\n- IPSec policy support with 3des, aes-128, aes-192, or aes-256\n  encryption, sha1 authentication, ESP, AH, or AH-ESP transform\n  protocol, and tunnel or transport mode encapsulation.\n\n- Dead Peer Detection (DPD) with hold, clear, restart, disabled, or\n  restart-by-peer actions.\n\nThis extension introduces these resources:\n\n- ``service``. A parent object that associates VPN with a specific\n  subnet and router.\n\n- ``ikepolicy``. The Internet Key Exchange (IKE) policy that\n  identifies the authentication and encryption algorithm to use\n  during phase one and two negotiation of a VPN connection.\n\n- ``ipsecpolicy``. The IP security policy that specifies the\n  authentication and encryption algorithm and encapsulation mode to\n  use for the established VPN connection.\n\n- ``ipsec-site-connection``. Details for the site-to-site IPsec\n  connection, including the peer CIDRs, MTU, authentication mode,\n  peer address, DPD settings, and status."
    }, 
    {
      "description": "Network IP availability and usage stats", 
      "name": "networking-ip-availability-ext", 
      "x-summary": "List and show the network IP usage stats of all networks and a\nspecified network. These operations are available in the Mitaka\nrelease (April 2016)."
    }
  ]
}