{
  "basePath": "/", 
  "consumes": [
    "application/json"
  ], 
  "definitions": {
    "resource_list_200": {
      "properties": {
        "creation_time": {
          "description": "The date and time when the stack resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the stack resource.", 
          "format": "", 
          "type": "string"
        }, 
        "logical_resource_id": {
          "description": "The ID of the logical stack resource.", 
          "format": "", 
          "type": "string"
        }, 
        "physical_resource_id": {
          "description": "The ID of the stack physical resource.", 
          "format": "", 
          "type": "string"
        }, 
        "required_by": {
          "description": "The list of resources that require this stack resource.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "resource_name": {
          "description": "The name of the resource.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_status": {
          "description": "The status of the resource.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_status_reason": {
          "description": "The reason for the current stack resource state.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_type": {
          "description": "The type of the resource.", 
          "format": "", 
          "type": "string"
        }, 
        "resources": {
          "description": "A list of resources and their properties.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "updated_time": {
          "description": "The date and time when the stack resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "resources", 
        "creation_time", 
        "description", 
        "logical_resource_id", 
        "physical_resource_id", 
        "required_by", 
        "resource_name", 
        "resource_status", 
        "resource_status_reason", 
        "resource_type", 
        "updated_time"
      ], 
      "type": "object"
    }, 
    "resource_show_200": {
      "properties": {
        "creation_time": {
          "description": "The date and time when the stack resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the stack resource.", 
          "format": "", 
          "type": "string"
        }, 
        "logical_resource_id": {
          "description": "The ID of the logical stack resource.", 
          "format": "", 
          "type": "string"
        }, 
        "physical_resource_id": {
          "description": "The ID of the stack physical resource.", 
          "format": "", 
          "type": "string"
        }, 
        "required_by": {
          "description": "The list of resources that require this stack resource.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "resource": {
          "description": "Key and value pairs that contain stack resource properties.", 
          "format": "", 
          "type": "object"
        }, 
        "resource_name": {
          "description": "The name of the resource.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_status": {
          "description": "The status of the resource.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_status_reason": {
          "description": "The reason for the current stack resource state.", 
          "format": "", 
          "type": "string"
        }, 
        "resource_type": {
          "description": "The type of the resource.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_time": {
          "description": "The date and time when the stack resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "resource", 
        "creation_time", 
        "description", 
        "logical_resource_id", 
        "physical_resource_id", 
        "required_by", 
        "resource_name", 
        "resource_status", 
        "resource_status_reason", 
        "resource_type", 
        "updated_time"
      ], 
      "type": "object"
    }, 
    "resource_type_get_200": {
      "properties": {
        "attributes": {
          "description": "Key and value pairs that contain resource attributes.", 
          "format": "", 
          "type": "object"
        }, 
        "description": {
          "description": "The description of the resource attribute.", 
          "format": "", 
          "type": "string"
        }, 
        "properties": {
          "description": "The properties of the resource. Includes description, type, and so\non.", 
          "format": "", 
          "type": "object"
        }, 
        "required": {
          "description": "If set to ``true`` the attribute is required.", 
          "format": "", 
          "type": "boolean"
        }, 
        "resource_type": {
          "description": "The type of the resource.", 
          "format": "", 
          "type": "string"
        }, 
        "support_status": {
          "description": "Information about the current status.", 
          "format": "", 
          "type": "object"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "type": "string"
        }, 
        "update_allowed": {
          "description": "If set to ``true``, update is allowed.", 
          "format": "", 
          "type": "boolean"
        }
      }, 
      "required": [
        "attributes", 
        "description", 
        "properties", 
        "required", 
        "type", 
        "update_allowed", 
        "resource_type", 
        "support_status"
      ], 
      "type": "object"
    }, 
    "resource_type_list_200": {
      "properties": {
        "template_versions": {
          "description": "A ``template_versions`` object.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "type": {
          "description": "The template type. Currently ``hot`` and ``cfn`` are the available\ntemplate types.", 
          "format": "", 
          "type": "string"
        }, 
        "version": {
          "description": "The version of the template.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "template_versions", 
        "version", 
        "type"
      ], 
      "type": "object"
    }, 
    "resource_type_template_200": {
      "properties": {
        "HeatTemplateFormatVersion": {
          "description": "The version of the heat template.", 
          "format": "", 
          "type": "string"
        }, 
        "Outputs": {
          "description": "Key and value pairs that contain output data.", 
          "format": "", 
          "type": "object"
        }, 
        "Parameters": {
          "description": "Key and value pairs that contain template parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "Resources": {
          "description": "Contain ``KeyPair`` for resource template.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "HeatTemplateFormatVersion", 
        "Outputs", 
        "Parameters", 
        "Resources"
      ], 
      "type": "object"
    }, 
    "service_status_list_403": {
      "properties": {
        "binary": {
          "description": "The name of the binary form of the heat engine.", 
          "format": "", 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "deleted_at": {
          "description": "The date and time when the resource was deleted.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.", 
          "format": "", 
          "type": "string"
        }, 
        "hostname": {
          "description": "The name of the host for the service.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the heat engine.", 
          "format": "", 
          "type": "string"
        }, 
        "report_interval": {
          "description": "The polling interval, in seconds. The API reports events at this\ninterval until heat engine creation completes.", 
          "format": "", 
          "type": "integer"
        }, 
        "services": {
          "description": "A list of heat engines.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The status of the heat engine.", 
          "format": "", 
          "type": "string"
        }, 
        "topic": {
          "description": "The topic of the heat engine.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "binary", 
        "report_interval", 
        "created_at", 
        "hostname", 
        "updated_at", 
        "topic", 
        "deleted_at", 
        "id", 
        "services"
      ], 
      "type": "object"
    }, 
    "software_config_create": {
      "example": {
        "application/json": {
          "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2", 
          "group": "script", 
          "inputs": [
            {
              "default": null, 
              "description": null, 
              "name": "foo", 
              "type": "String"
            }, 
            {
              "default": null, 
              "description": null, 
              "name": "bar", 
              "type": "String"
            }
          ], 
          "name": "a-config-we5zpvyu7b5o", 
          "options": null, 
          "outputs": [
            {
              "description": null, 
              "error_output": false, 
              "name": "result", 
              "type": "String"
            }
          ]
        }
      }, 
      "properties": {
        "config": {
          "description": "Configuration script or manifest that defines which configuration\nis performed.", 
          "format": "", 
          "type": "string"
        }, 
        "group": {
          "description": "Namespace that groups this software configuration by when it is\ndelivered to a server. This setting might simply define which\nconfiguration tool performs the configuration.", 
          "format": "", 
          "type": "string"
        }, 
        "inputs": {
          "description": "Schema that represents the inputs that this software configuration\nexpects.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of the configuration to create.", 
          "format": "", 
          "type": "string"
        }, 
        "options": {
          "description": "Map that contains options that are specific to the configuration\nmanagement tool that this resource uses.", 
          "format": "", 
          "type": "string"
        }, 
        "outputs": {
          "description": "Schema that represents the outputs that this software configuration\nproduces.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "software_config_create_200": {
      "properties": {
        "config": {
          "description": "The configuration code.", 
          "format": "", 
          "type": "string"
        }, 
        "creation_time": {
          "description": "The date and time when the software was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "group": {
          "description": "The name of the group in which the software is configured.", 
          "format": "", 
          "type": "string"
        }, 
        "inputs": {
          "description": "A list of inputs to configure the software.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of the software configuration.", 
          "format": "", 
          "type": "string"
        }, 
        "options": {
          "description": "The options, if any, to include in the code. For example any\ndependent flags.", 
          "format": "", 
          "type": "string"
        }, 
        "outputs": {
          "description": "A list of software configuration output data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "inputs", 
        "name", 
        "outputs", 
        "creation_time", 
        "group", 
        "config", 
        "options"
      ], 
      "type": "object"
    }, 
    "software_config_show_200": {
      "properties": {
        "config": {
          "description": "The configuration code.", 
          "format": "", 
          "type": "string"
        }, 
        "creation_time": {
          "description": "The date and time when the software was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "group": {
          "description": "The name of the group in which the software is configured.", 
          "format": "", 
          "type": "string"
        }, 
        "inputs": {
          "description": "A list of inputs to configure the software.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of the software configuration.", 
          "format": "", 
          "type": "string"
        }, 
        "options": {
          "description": "The options, if any, to include in the code. For example any\ndependent flags.", 
          "format": "", 
          "type": "string"
        }, 
        "outputs": {
          "description": "A list of software configuration output data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "inputs", 
        "name", 
        "outputs", 
        "creation_time", 
        "group", 
        "config", 
        "options"
      ], 
      "type": "object"
    }, 
    "software_deployment_create": {
      "example": {
        "application/json": {
          "action": "CREATE", 
          "config_id": "8da95794-2ad9-4979-8ae5-739ce314c5cd", 
          "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5", 
          "stack_user_project_id": "c024bfada67845ddb17d2b0c0be8cd79", 
          "status": "IN_PROGRESS", 
          "status_reason": "Deploy data available"
        }
      }, 
      "properties": {
        "action": {
          "description": "The current stack action that triggers this deployment resource.", 
          "format": "", 
          "type": "string"
        }, 
        "config_id": {
          "description": "The UUID of the software configuration resource that runs when\napplying to the server.", 
          "format": "", 
          "type": "string"
        }, 
        "server_id": {
          "description": "The UUID of the compute server to which the configuration applies.", 
          "format": "", 
          "type": "string"
        }, 
        "stack_user_project_id": {
          "description": "Authentication project ID, which can also perform operations on\nthis deployment.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "Current status of the deployment. A valid value is ``COMPLETE``,\n``IN_PROGRESS``, or ``FAILED``.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "Error description for the last status change, which is ``FAILED``\nstatus.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config_id", 
        "server_id", 
        "action"
      ], 
      "type": "object"
    }, 
    "software_deployment_create_200": {
      "properties": {
        "action": {
          "description": "The deployment action.", 
          "format": "", 
          "type": "string"
        }, 
        "config_id": {
          "description": "The UUID of the configuration.", 
          "format": "", 
          "type": "string"
        }, 
        "creation_time": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the software deployment.", 
          "format": "", 
          "type": "string"
        }, 
        "input_values": {
          "description": "A list of input data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "output_values": {
          "description": "A list of output data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "server_id": {
          "description": "The UUID of the server.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the software deployment. The value is ``INPROGRESS``\nor ``COMPLETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "The debug information for the current status.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "server_id", 
        "config_id", 
        "output_values", 
        "input_values", 
        "action", 
        "status_reason", 
        "id", 
        "creation_time", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "software_deployment_index_200": {
      "properties": {
        "action": {
          "description": "The deployment action.", 
          "format": "", 
          "type": "string"
        }, 
        "config_id": {
          "description": "The UUID of the configuration.", 
          "format": "", 
          "type": "string"
        }, 
        "creation_time": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the software deployment.", 
          "format": "", 
          "type": "string"
        }, 
        "input_values": {
          "description": "A list of input data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "output_values": {
          "description": "A list of output data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "server_id": {
          "description": "The UUID of the server.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the software deployment. The value is ``INPROGRESS``\nor ``COMPLETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "The debug information for the current status.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "server_id", 
        "config_id", 
        "output_values", 
        "input_values", 
        "action", 
        "status_reason", 
        "id", 
        "creation_time", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "software_deployment_show_200": {
      "properties": {
        "action": {
          "description": "The deployment action.", 
          "format": "", 
          "type": "string"
        }, 
        "config_id": {
          "description": "The UUID of the configuration.", 
          "format": "", 
          "type": "string"
        }, 
        "creation_time": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the software deployment.", 
          "format": "", 
          "type": "string"
        }, 
        "input_values": {
          "description": "A list of input data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "output_values": {
          "description": "A list of output data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "server_id": {
          "description": "The UUID of the server.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the software deployment. The value is ``INPROGRESS``\nor ``COMPLETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "The debug information for the current status.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "server_id", 
        "config_id", 
        "output_values", 
        "input_values", 
        "action", 
        "status_reason", 
        "id", 
        "creation_time", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "software_deployment_update": {
      "example": {
        "application/json": {
          "output_values": {
            "deploy_status_code": 0, 
            "deploy_stderr": "+ echo Writing to /tmp/baaaaa\n+ echo fooooo\n+ cat /tmp/baaaaa\n+ echo -n The file /tmp/baaaaa contains fooooo for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE\n+ echo Written to /tmp/baaaaa\n+ echo Output to stderr\nOutput to stderr\n", 
            "deploy_stdout": "Writing to /tmp/baaaaa\nWritten to /tmp/baaaaa\n", 
            "result": "The file /tmp/baaaaa contains fooooo for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE"
          }, 
          "status": "COMPLETE", 
          "status_reason": "Outputs received"
        }
      }, 
      "properties": {
        "action": {
          "description": "Current stack action in which this deployment resource is being\ntriggered.", 
          "format": "", 
          "type": "string"
        }, 
        "config_id": {
          "description": "The UUID of the software configuration resource to run when\napplying to the server. This UUID might not be the same\nconfiguration UUID with which the deployment was created because\nephemeral configurations are created throughout the life cycle of\nthe deployment.", 
          "format": "", 
          "type": "string"
        }, 
        "output_values": {
          "description": "Map of output values for the deployment, as signaled from the\nserver.", 
          "format": "", 
          "type": "object"
        }, 
        "status": {
          "description": "Current status of the deployment. Value is ``IN_PROGRESS``,\n``COMPLETE``, or ``FAILED``.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "Error description for the last status change, which is ``FAILED``\nstatus.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "config_id", 
        "action"
      ], 
      "type": "object"
    }, 
    "software_deployment_update_200": {
      "properties": {
        "action": {
          "description": "The deployment action.", 
          "format": "", 
          "type": "string"
        }, 
        "config_id": {
          "description": "The UUID of the configuration.", 
          "format": "", 
          "type": "string"
        }, 
        "creation_time": {
          "description": "The date and time when the resource was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the software deployment.", 
          "format": "", 
          "type": "string"
        }, 
        "input_values": {
          "description": "A list of input data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "output_values": {
          "description": "A list of output data.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "server_id": {
          "description": "The UUID of the server.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the software deployment. The value is ``INPROGRESS``\nor ``COMPLETE``.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "The debug information for the current status.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC. In the previous example, the offset value is ``-05:00``.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "server_id", 
        "config_id", 
        "output_values", 
        "input_values", 
        "action", 
        "status_reason", 
        "id", 
        "creation_time", 
        "updated_at"
      ], 
      "type": "object"
    }, 
    "stack_action_cancel_update": {
      "example": {
        "application/json": {
          "cancel_update": null
        }
      }, 
      "properties": {
        "cancel_update": {
          "description": "Specify the ``cancel_update`` action in the request body.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "cancel_update"
      ], 
      "type": "object"
    }, 
    "stack_action_check": {
      "example": {
        "application/json": {
          "check": null
        }
      }, 
      "properties": {
        "check": {
          "description": "Specify the ``check`` action in the request body.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "check"
      ], 
      "type": "object"
    }, 
    "stack_action_resume": {
      "example": {
        "application/json": {
          "resume": null
        }
      }, 
      "properties": {
        "resume": {
          "description": "Specify the ``resume`` action in the request body.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "resume"
      ], 
      "type": "object"
    }, 
    "stack_action_suspend": {
      "example": {
        "application/json": {
          "suspend": null
        }
      }, 
      "properties": {
        "suspend": {
          "description": "Specify the ``suspend`` action in the request body.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "suspend"
      ], 
      "type": "object"
    }, 
    "stack_adopt": {
      "example": {
        "application/json": {
          "adopt_stack_data": {
            "action": "CREATE", 
            "id": "bxxxxx4-0xx2-4xx1-axx6-exxxxxxxc", 
            "name": "teststack", 
            "resources": {
              "MyServer": {
                "action": "CREATE", 
                "metadata": {}, 
                "name": "MyServer", 
                "resource_data": {}, 
                "resource_id": "cxxxx3-dxx3-4xx-bxx2-3xxxxxxxxa", 
                "status": "COMPLETE", 
                "type": "OS::Trove::Instance"
              }
            }, 
            "status": "COMPLETE", 
            "template": {
              "heat_template_version": "2013-05-23", 
              "resources": {
                "MyServer": {
                  "properties": {
                    "flavor": "m1.small", 
                    "size": 10
                  }, 
                  "type": "OS::Trove::Instance"
                }
              }
            }
          }, 
          "stack_name": "{stack_name}", 
          "timeout_mins": "{timeout_mins}"
        }
      }, 
      "properties": {
        "adopt_stack_data": {
          "description": "Existing resources data to adopt a stack. Data returned by abandon\nstack could be provided as ``adopt_stack_data``.", 
          "format": "", 
          "type": "object"
        }, 
        "disable_rollback": {
          "description": "Enables or disables deletion of all stack resources when stack\ncreation fails. Set to ``true`` to keep all resources when stack\ncreation fails. Set to ``false`` to delete all resources when stack\ncreation fails. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "environment": {
          "description": "A JSON environment for the stack.", 
          "format": "", 
          "type": "object"
        }, 
        "files": {
          "description": "Supplies the contents of files referenced in the template or the\nenvironment. Stack templates and resource templates can explicitly\nreference files by using the ``get_file`` intrinsic function. In\naddition, the ``environment`` parameter can contain implicit\nreferences to files.\n\nThe value is a JSON object, where each key is a relative or\nabsolute URI which serves as the name of a file, and the associated\nvalue provides the contents of the file. The following code shows\nthe general structure of this parameter.\n\n.. code-block:: json\n\n   { ...\n       \"files\": {\n           \"fileA.yaml\": \"Contents of the file\",\n           \"file:///usr/fileB.template\": \"Contents of the file\",\n           \"http://example.com/fileC.template\": \"Contents of the file\"\n       }\n   ...\n   }\n\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n\n   {\n   \u00a0\u00a0\u00a0\"files\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n   \u00a0\u00a0\u00a0},\n      ...,\n   \u00a0\u00a0\u00a0\"stack_name\": \"teststack\",\n   \u00a0\u00a0\u00a0\"template\": {\n         ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"resources\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"my_server\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"OS::Nova::Server\",\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"properties\": {\n                  ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"user_data\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"get_file\": \"myfile\"\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0},\n   \u00a0\u00a0\u00a0\"timeout_mins\": 60\n   }\n\nDo not use this parameter to provide the content of the template\nlocated at the ``template_url`` address. Instead, use the\n``template`` parameter to supply the template content as part of\nthe request.", 
          "format": "", 
          "type": "object"
        }, 
        "parameters": {
          "description": "Supplies arguments for parameters defined in the stack template.\n\nThe value is a JSON object, where each key is the name of a\nparameter defined in the template and the associated value is the\nargument to use for that parameter when instantiating the template.\nThe following code shows the general structure of this parameter.\nIn the example, ``a`` and ``b`` would be the names of two\nparameters defined in the template.\n\n.. code-block:: json\n\n   { ...\n       \"parameters\": {\n           \"a\": \"Value\",\n           \"b\": \"3\"\n       }\n   ...\n   }\n\nWhile the service accepts JSON numbers for parameters with the type\n``number`` and JSON objects for parameters with the type ``json``,\nall parameter values are converted to their string representation\nfor storage in the created Stack. Clients are encouraged to send\nall parameter values using their string representation for\nconsistency between requests and responses from the Orchestration\nservice.\n\nA value must be provided for each template parameter which does not\nspecify a default value. However, this parameter is not allowed to\ncontain JSON properties with names that do not match a parameter\ndefined in the template.\n\nThe ``files`` parameter maps logical file names to file contents.\nBoth the ``get_file`` intrinsic function and provider template\nfunctionality use this mapping. When you want to use a provider\ntemplate, for example, the Orchestration service adds an entry to\nthe ``files`` map by using:\n\n- The URL of the provider template as the name.\n\n- The contents of that file as the value.\n\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n\n   {\n      \"files\": {\n         \"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n      },\n      ...,\n      \"stack_name\": \"teststack\",\n      \"template\": {\n         ...,\n         \"resources\": {\n            \"my_server\": {\n               \"type\": \"OS::Nova::Server\",\n               \"properties\": {\n                  ...,\n                  \"user_data\": {\n                     \"get_file\": \"myfile\"\n                  }\n               }\n            }\n         }\n      },\n      \"timeout_mins\": 60\n   }", 
          "format": "", 
          "type": "object"
        }, 
        "stack_name": {
          "description": "A name for the new stack.\n\nThe value must be unique within a project. The name must start with\nan ASCII letter and can contain ASCII letters, digits, underscores,\nperiods, and hyphens. Specifically, the name must match the\n``^[a-zA-Z][a-zA-Z0-9_.-]*$`` regular expression.\n\nWhen you delete or abandon a stack, its name will not become\navailable for reuse until the deletion completes successfully.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout_mins": {
          "description": "The timeout for stack creation in minutes.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "stack_name", 
        "adopt_stack_data"
      ], 
      "type": "object"
    }, 
    "stack_adopt_201": {
      "properties": {
        "id": {
          "description": "The UUID of the system-assigned stack.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "A list of URLs for the stack. Each URL is a JSON object with an\n``href`` key indicating the URL and a ``rel`` key indicating its\nrelationship to the stack in question. There may be multiple links\nreturned. The ``self`` relationship identifies the URL of the stack\nitself.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "stack": {
          "description": "The ``stack`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "stack", 
        "id", 
        "links"
      ], 
      "type": "object"
    }, 
    "stack_create": {
      "example": {
        "application/json": {
          "disable_rollback": true, 
          "files": {}, 
          "parameters": {
            "flavor": "m1.heat"
          }, 
          "stack_name": "teststack", 
          "template": {
            "description": "Simple template to test heat commands", 
            "heat_template_version": "2013-05-23", 
            "parameters": {
              "flavor": {
                "default": "m1.tiny", 
                "type": "string"
              }
            }, 
            "resources": {
              "hello_world": {
                "properties": {
                  "flavor": {
                    "get_param": "flavor"
                  }, 
                  "image": "40be8d1a-3eb9-40de-8abd-43237517384f", 
                  "key_name": "heat_key", 
                  "user_data": "#!/bin/bash -xv\necho \"hello world\" &gt; /root/hello-world.txt\n"
                }, 
                "type": "OS::Nova::Server"
              }
            }
          }, 
          "timeout_mins": 60
        }
      }, 
      "properties": {
        "disable_rollback": {
          "description": "Enables or disables deletion of all previously-created stack\nresources when stack creation fails. Set to ``true`` to keep all\npreviously-created stack resources when stack creation fails. Set\nto ``false`` to delete all previously-created stack resources when\nstack creation fails. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "environment": {
          "description": "A JSON environment for the stack.", 
          "format": "", 
          "type": "object"
        }, 
        "files": {
          "description": "Supplies the contents of files referenced in the template or the\nenvironment. Stack templates and resource templates can explicitly\nreference files by using the ``get_file`` intrinsic function. In\naddition, the ``environment`` parameter can contain implicit\nreferences to files.\n\nThe value is a JSON object, where each key is a relative or\nabsolute URI which serves as the name of a file, and the associated\nvalue provides the contents of the file. The following code shows\nthe general structure of this parameter.\n\n.. code-block:: json\n\n   { ...\n       \"files\": {\n           \"fileA.yaml\": \"Contents of the file\",\n           \"file:///usr/fileB.template\": \"Contents of the file\",\n           \"http://example.com/fileC.template\": \"Contents of the file\"\n       }\n   ...\n   }\n\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n\n   {\n   \u00a0\u00a0\u00a0\"files\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n   \u00a0\u00a0\u00a0},\n      ...,\n   \u00a0\u00a0\u00a0\"stack_name\": \"teststack\",\n   \u00a0\u00a0\u00a0\"template\": {\n         ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"resources\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"my_server\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"OS::Nova::Server\",\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"properties\": {\n                  ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"user_data\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"get_file\": \"myfile\"\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0},\n   \u00a0\u00a0\u00a0\"timeout_mins\": 60\n   }\n\nDo not use this parameter to provide the content of the template\nlocated at the ``template_url`` address. Instead, use the\n``template`` parameter to supply the template content as part of\nthe request.", 
          "format": "", 
          "type": "object"
        }, 
        "parameters": {
          "description": "Supplies arguments for parameters defined in the stack template.\n\nThe value is a JSON object, where each key is the name of a\nparameter defined in the template and the associated value is the\nargument to use for that parameter when instantiating the template.\nThe following code shows the general structure of this parameter.\nIn the example, ``a`` and ``b`` would be the names of two\nparameters defined in the template.\n\n.. code-block:: json\n\n   { ...\n       \"parameters\": {\n           \"a\": \"Value\",\n           \"b\": \"3\"\n       }\n   ...\n   }\n\nWhile the service accepts JSON numbers for parameters with the type\n``number`` and JSON objects for parameters with the type ``json``,\nall parameter values are converted to their string representation\nfor storage in the created Stack. Clients are encouraged to send\nall parameter values using their string representation for\nconsistency between requests and responses from the Orchestration\nservice.\n\nA value must be provided for each template parameter which does not\nspecify a default value. However, this parameter is not allowed to\ncontain JSON properties with names that do not match a parameter\ndefined in the template.\n\nThe ``files`` parameter maps logical file names to file contents.\nBoth the ``get_file`` intrinsic function and provider template\nfunctionality use this mapping. When you want to use a provider\ntemplate, for example, the Orchestration service adds an entry to\nthe ``files`` map by using:\n\n- The URL of the provider template as the name.\n\n- The contents of that file as the value.\n\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n\n   {\n      \"files\": {\n         \"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n      },\n      ...,\n      \"stack_name\": \"teststack\",\n      \"template\": {\n         ...,\n         \"resources\": {\n            \"my_server\": {\n               \"type\": \"OS::Nova::Server\",\n               \"properties\": {\n                  ...,\n                  \"user_data\": {\n                     \"get_file\": \"myfile\"\n                  }\n               }\n            }\n         }\n      },\n      \"timeout_mins\": 60\n   }", 
          "format": "", 
          "type": "object"
        }, 
        "stack_name": {
          "description": "A name for the new stack.\n\nThis value must be unique within a project. The name must start\nwith an ASCII letter and can contain ASCII letters, digits,\nunderscores, periods, and hyphens. Specifically, the name must\nmatch the ``^[a-zA-Z][a-zA-Z0-9_.-]*$`` regular expression.\n\nWhen you delete or abandon a stack, its name will not become\navailable for reuse until the deletion completes successfully.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "One or more simple string tags to associate with the stack. To\nassociate multiple tags with a stack, separate the tags with\ncommas. For example, ``tag1,tag2``.", 
          "format": "", 
          "type": "string"
        }, 
        "template": {
          "description": "The stack template on which to perform the operation.\n\nThis parameter is always provided as a ``string`` in the JSON\nrequest body. The content of the string is a JSON- or YAML-\nformatted Orchestration template. For example:\n\n.. code-block:: json\n\n   \"template\": {\n       \"heat_template_version\": \"2013-05-23\",\n       ...}\n\nThis parameter is required only when you omit the ``template_url``\nparameter. If you specify both parameters, this value overrides the\n``template_url`` parameter value.", 
          "format": "", 
          "type": "object"
        }, 
        "template_url": {
          "description": "A URI to the location containing the stack template on which to\nperform the operation.\n\nSee the description of the ``template`` parameter for information\nabout the expected template content located at the URI.\n\nThis parameter is only required when you omit the ``template``\nparameter. If you specify both parameters, this parameter is\nignored.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout_mins": {
          "description": "The timeout for stack creation in minutes.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "required": [
        "stack_name", 
        "template"
      ], 
      "type": "object"
    }, 
    "stack_create_201": {
      "properties": {
        "id": {
          "description": "The UUID of the system-assigned stack.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "A list of URLs for the stack. Each URL is a JSON object with an\n``href`` key indicating the URL and a ``rel`` key indicating its\nrelationship to the stack in question. There may be multiple links\nreturned. The ``self`` relationship identifies the URL of the stack\nitself.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "stack": {
          "description": "The ``stack`` object.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "stack", 
        "id", 
        "links"
      ], 
      "type": "object"
    }, 
    "stack_list_200": {
      "properties": {
        "creation_time": {
          "description": "The date and time when the software was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2016-03-30T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the active stack.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the active stack.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "A list of URLs for the stack. Each URL is a JSON object with an\n``href`` key indicating the URL and a ``rel`` key indicating its\nrelationship to the stack in question. There may be multiple links\nreturned. The ``self`` relationship identifies the URL of the stack\nitself.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "stack_name": {
          "description": "The name of the active stack.", 
          "format": "", 
          "type": "string"
        }, 
        "stack_status": {
          "description": "The status of the active stack.", 
          "format": "", 
          "type": "string"
        }, 
        "stack_status_reason": {
          "description": "The reason for the current status of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "The stack tags.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_time": {
          "description": "The date and time when the stack resource was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2016-03-30T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "creation_time", 
        "description", 
        "id", 
        "links", 
        "stack_name", 
        "stack_status", 
        "stack_status_reason", 
        "updated_time", 
        "tags"
      ], 
      "type": "object"
    }, 
    "stack_list_outputs_200": {
      "properties": {
        "description": {
          "description": "The description of a stack output.", 
          "format": "", 
          "type": "string"
        }, 
        "output_error": {
          "description": "The error in a stack output.", 
          "format": "", 
          "type": "string"
        }, 
        "output_key": {
          "description": "The name of a stack output.", 
          "format": "", 
          "type": "string"
        }, 
        "output_value": {
          "description": "The value of a stack output.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "output_key", 
        "output_value", 
        "description", 
        "output_error"
      ], 
      "type": "object"
    }, 
    "stack_list_snapshot_200": {
      "properties": {
        "creation_time": {
          "description": "The date and time when the snapshot was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "data": {
          "description": "The snapshot data.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "snapshots": {
          "description": "A list of snapshots and their properties.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "status": {
          "description": "The status of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "The reason for the current snapshot status.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "snapshots", 
        "id", 
        "name", 
        "status", 
        "status_reason", 
        "creation_time", 
        "data"
      ], 
      "type": "object"
    }, 
    "stack_preview": {
      "example": {
        "application/json": {
          "disable_rollback": true, 
          "files": {}, 
          "parameters": {
            "flavor": "m1.heat"
          }, 
          "stack_name": "teststack", 
          "template": {
            "description": "Simple template to test heat commands", 
            "heat_template_version": "2013-05-23", 
            "parameters": {
              "flavor": {
                "default": "m1.tiny", 
                "type": "string"
              }
            }, 
            "resources": {
              "hello_world": {
                "properties": {
                  "flavor": {
                    "get_param": "flavor"
                  }, 
                  "image": "40be8d1a-3eb9-40de-8abd-43237517384f", 
                  "key_name": "heat_key", 
                  "user_data": "#!/bin/bash -xv\necho \"hello world\" &gt; /root/hello-world.txt\n"
                }, 
                "type": "OS::Nova::Server"
              }
            }
          }, 
          "timeout_mins": 60
        }
      }, 
      "properties": {
        "files": {
          "description": "Supplies the contents of files referenced in the template or the\nenvironment. Stack templates and resource templates can explicitly\nreference files by using the ``get_file`` intrinsic function. In\naddition, the ``environment`` parameter can contain implicit\nreferences to files.\n\nThe value is a JSON object, where each key is a relative or\nabsolute URI which serves as the name of a file, and the associated\nvalue provides the contents of the file. The following code shows\nthe general structure of this parameter.\n\n.. code-block:: json\n\n   { ...\n       \"files\": {\n           \"fileA.yaml\": \"Contents of the file\",\n           \"file:///usr/fileB.template\": \"Contents of the file\",\n           \"http://example.com/fileC.template\": \"Contents of the file\"\n       }\n   ...\n   }\n\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n\n   {\n   \u00a0\u00a0\u00a0\"files\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n   \u00a0\u00a0\u00a0},\n      ...,\n   \u00a0\u00a0\u00a0\"stack_name\": \"teststack\",\n   \u00a0\u00a0\u00a0\"template\": {\n         ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"resources\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"my_server\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"OS::Nova::Server\",\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"properties\": {\n                  ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"user_data\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"get_file\": \"myfile\"\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0},\n   \u00a0\u00a0\u00a0\"timeout_mins\": 60\n   }\n\nDo not use this parameter to provide the content of the template\nlocated at the ``template_url`` address. Instead, use the\n``template`` parameter to supply the template content as part of\nthe request.", 
          "format": "", 
          "type": "object"
        }, 
        "parameters": {
          "description": "Supplies arguments for parameters defined in the stack template.\n\nThe value is a JSON object, where each key is the name of a\nparameter defined in the template and the associated value is the\nargument to use for that parameter when instantiating the template.\nThe following code shows the general structure of this parameter.\nIn the example, ``a`` and ``b`` would be the names of two\nparameters defined in the template.\n\n.. code-block:: json\n\n   { ...\n       \"parameters\": {\n           \"a\": \"Value\",\n           \"b\": \"3\"\n       }\n   ...\n   }\n\nWhile the service accepts JSON numbers for parameters with the type\n``number`` and JSON objects for parameters with the type ``json``,\nall parameter values are converted to their string representation\nfor storage in the created Stack. Clients are encouraged to send\nall parameter values using their string representation for\nconsistency between requests and responses from the Orchestration\nservice.\n\nA value must be provided for each template parameter which does not\nspecify a default value. However, this parameter is not allowed to\ncontain JSON properties with names that do not match a parameter\ndefined in the template.\n\nThe ``files`` parameter maps logical file names to file contents.\nBoth the ``get_file`` intrinsic function and provider template\nfunctionality use this mapping. When you want to use a provider\ntemplate, for example, the Orchestration service adds an entry to\nthe ``files`` map by using:\n\n- The URL of the provider template as the name.\n\n- The contents of that file as the value.\n\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n\n   {\n      \"files\": {\n         \"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n      },\n      ...,\n      \"stack_name\": \"teststack\",\n      \"template\": {\n         ...,\n         \"resources\": {\n            \"my_server\": {\n               \"type\": \"OS::Nova::Server\",\n               \"properties\": {\n                  ...,\n                  \"user_data\": {\n                     \"get_file\": \"myfile\"\n                  }\n               }\n            }\n         }\n      },\n      \"timeout_mins\": 60\n   }", 
          "format": "", 
          "type": "object"
        }, 
        "stack_name": {
          "description": "A name for the new stack.\n\nThe value must be unique within a project. The name must start with\nan ASCII letter and can contain ASCII letters, digits, underscores,\nperiods, and hyphens. Specifically, the name must match the\n``^[a-zA-Z][a-zA-Z0-9_.-]*$`` regular expression.\n\nWhen you delete or abandon a stack, its name will not become\navailable for reuse until the deletion completes successfully.", 
          "format": "", 
          "type": "string"
        }, 
        "template": {
          "description": "The stack template on which to perform the operation.\n\nThis parameter is always provided as a ``string`` in the JSON\nrequest body. The content of the string is a JSON- or YAML-\nformatted Orchestration template. For example:\n\n.. code-block:: json\n\n   \"template\": {\n       \"heat_template_version\": \"2013-05-23\",\n       ...}\n\nThis parameter is required only when you omit the ``template_url``\nparameter. If you specify both parameters, this value overrides the\n``template_url`` parameter value.", 
          "format": "", 
          "type": "object"
        }, 
        "template_url": {
          "description": "A URI to the location containing the stack template on which to\nperform the operation.\n\nSee the description of the ``template`` parameter for information\nabout the expected template content located at the URI.\n\nThis parameter is only required when you omit the ``template``\nparameter. If you specify both parameters, this parameter is\nignored.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "stack_name", 
        "template"
      ], 
      "type": "object"
    }, 
    "stack_preview_200": {
      "properties": {
        "capabilities": {
          "description": "List of stack capabilities for stack.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "creation_time": {
          "description": "The date and time when the software was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "A description of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "disable_rollback": {
          "description": "Enables or disables stack rollback when stack creation fails. Set\nto ``true`` to rollback the stack when stack creation fails. Set to\n``false`` to disable stack rollback when stack creation fails.\nDefault is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "id": {
          "description": "The UUID of the system-assigned stack.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "A list of URLs for the stack. Each URL is a JSON object with an\n``href`` key indicating the URL and a ``rel`` key indicating its\nrelationship to the stack in question. There may be multiple links\nreturned. The ``self`` relationship identifies the URL of the stack\nitself.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "notification_topics": {
          "description": "List of notification topics for stack.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "parameters": {
          "description": "List of parameters defined for the stack.", 
          "format": "", 
          "type": "object"
        }, 
        "parent": {
          "description": "The stack ID of the parent stack, if this is a nested stack.", 
          "format": "", 
          "type": "string"
        }, 
        "resources": {
          "description": "List of stack resources.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "stack": {
          "description": "The ``stack`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "stack_name": {
          "description": "The name of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "stack_owner": {
          "description": "Stack owner name.", 
          "format": "", 
          "type": "string"
        }, 
        "template_description": {
          "description": "A description of the template that defines the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout_mins": {
          "description": "Time-lines for stack creation.", 
          "format": "", 
          "type": "integer"
        }, 
        "updated_time": {
          "description": "Time of last stack update in the following format: ``YYYY-MM-\nDDThh:mm:ssTZD``, where ``TZD`` is the time zone designator.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "stack", 
        "parent", 
        "id", 
        "links", 
        "stack_name", 
        "description", 
        "template_description", 
        "timeout_mins", 
        "disable_rollback", 
        "capabilities", 
        "creation_time", 
        "notification_topics", 
        "updated_time", 
        "stack_owner", 
        "parameters", 
        "resources"
      ], 
      "type": "object"
    }, 
    "stack_show_200": {
      "properties": {
        "capabilities": {
          "description": "A list of stack capabilities.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "creation_time": {
          "description": "The date and time when the stack was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "id": {
          "description": "The UUID of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "links": {
          "description": "A list of stack links.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "notification_topics": {
          "description": "A list of stack notifications.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "outputs": {
          "description": "A list of stack outputs.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "parameters": {
          "description": "Key and value pairs that contain stack parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "parent": {
          "description": "The parent of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "stack": {
          "description": "The ``stack`` object.", 
          "format": "", 
          "type": "object"
        }, 
        "stack_name": {
          "description": "The name of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "stack_owner": {
          "description": "The owner of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "stack_status": {
          "description": "The status of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "stack_status_reason": {
          "description": "The reason for the current status of the stack.", 
          "format": "", 
          "type": "string"
        }, 
        "stack_user_project_id": {
          "description": "The project UUID of the stack user.", 
          "format": "", 
          "type": "string"
        }, 
        "tags": {
          "description": "The stack tags.", 
          "format": "", 
          "type": "string"
        }, 
        "template_description": {
          "description": "The description of the stack template.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout_mins": {
          "description": "The timeout, in minutes.", 
          "format": "", 
          "type": "string"
        }, 
        "updated_time": {
          "description": "The date and time when the stack was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the ``updated_at`` date and time stamp is not set, its value is\n``null``.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "stack", 
        "capabilities", 
        "creation_time", 
        "description", 
        "id", 
        "links", 
        "notification_topics", 
        "outputs", 
        "parameters", 
        "stack_name", 
        "stack_owner", 
        "stack_status", 
        "stack_status_reason", 
        "template_description", 
        "stack_user_project_id", 
        "timeout_mins", 
        "updated_time", 
        "parent", 
        "tags"
      ], 
      "type": "object"
    }, 
    "stack_show_output_200": {
      "properties": {
        "description": {
          "description": "The description of a stack output.", 
          "format": "", 
          "type": "string"
        }, 
        "output_error": {
          "description": "The error in a stack output.", 
          "format": "", 
          "type": "string"
        }, 
        "output_key": {
          "description": "The name of a stack output.", 
          "format": "", 
          "type": "string"
        }, 
        "output_value": {
          "description": "The value of a stack output.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "output_key", 
        "output_value", 
        "description", 
        "output_error"
      ], 
      "type": "object"
    }, 
    "stack_show_snapshot_200": {
      "properties": {
        "creation_time": {
          "description": "The date and time when the snapshot was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "data": {
          "description": "The snapshot data.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "project_id": {
          "description": "The UUID of the project.", 
          "format": "", 
          "type": "string"
        }, 
        "resources": {
          "description": "The snapshot resources.", 
          "format": "", 
          "type": "object"
        }, 
        "snapshot": {
          "description": "Key and value pairs that contain snapshot properties.", 
          "format": "", 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "The reason for the current snapshot status.", 
          "format": "", 
          "type": "string"
        }, 
        "template": {
          "description": "Information about the template.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "snapshot", 
        "project_id", 
        "resources", 
        "template", 
        "id", 
        "name", 
        "status", 
        "status_reason", 
        "creation_time", 
        "data"
      ], 
      "type": "object"
    }, 
    "stack_snapshot": {
      "example": {
        "application/json": {
          "name": "vol_snapshot"
        }
      }, 
      "properties": {
        "name": {
          "description": "The name of the snapshot.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "name"
      ], 
      "type": "object"
    }, 
    "stack_snapshot_200": {
      "properties": {
        "creation_time": {
          "description": "The date and time when the snapshot was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_:\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.", 
          "format": "", 
          "type": "string"
        }, 
        "data": {
          "description": "The snapshot data.", 
          "format": "", 
          "type": "object"
        }, 
        "id": {
          "description": "The UUID of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the snapshot.", 
          "format": "", 
          "type": "string"
        }, 
        "status_reason": {
          "description": "The reason for the current snapshot status.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "id", 
        "name", 
        "status", 
        "status_reason", 
        "creation_time", 
        "data"
      ], 
      "type": "object"
    }, 
    "stack_template_200": {
      "properties": {
        "description": {
          "description": "The description of the stack template.", 
          "format": "", 
          "type": "string"
        }, 
        "heat_template_version": {
          "description": "The version of the heat template.", 
          "format": "", 
          "type": "string"
        }, 
        "outputs": {
          "description": "Key and value pairs that contain output data.", 
          "format": "", 
          "type": "object"
        }, 
        "parameters": {
          "description": "Key and value pairs that contain template parameters.", 
          "format": "", 
          "type": "object"
        }, 
        "resources": {
          "description": "The required sources for creating the stack template.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "description", 
        "heat_template_version", 
        "outputs", 
        "parameters", 
        "resources"
      ], 
      "type": "object"
    }, 
    "stack_update": {
      "example": {
        "application/json": {
          "parameters": {
            "flavor": "m1.small"
          }, 
          "template": {
            "description": "Create a simple stack", 
            "heat_template_version": "2013-05-23", 
            "parameters": {
              "flavor": {
                "default": "m1.tiny", 
                "type": "string"
              }
            }, 
            "resources": {
              "hello_world": {
                "properties": {
                  "flavor": {
                    "get_param": "flavor"
                  }, 
                  "image": "40be8d1a-3eb9-40de-8abd-43237517384f", 
                  "key_name": "heat_key", 
                  "user_data": "#!/bin/bash -xv\necho \"hello world\" > /root/hello-world.txt\n"
                }, 
                "type": "OS::Nova::Server"
              }
            }
          }
        }
      }, 
      "properties": {
        "disable_rollback": {
          "description": "Enables or disables deletion of all previously-created stack\nresources when stack creation fails. Set to ``true`` to keep all\npreviously-created stack resources when stack creation fails. Set\nto ``false`` to delete all previously-created stack resources when\nstack creation fails. Default is ``true``.", 
          "format": "", 
          "type": "boolean"
        }, 
        "environment": {
          "description": "A JSON environment for the stack.", 
          "format": "", 
          "type": "object"
        }, 
        "files": {
          "description": "Supplies the contents of files referenced in the template or the\nenvironment. Stack templates and resource templates can explicitly\nreference files by using the ``get_file`` intrinsic function. In\naddition, the ``environment`` parameter can contain implicit\nreferences to files.\n\nThe value is a JSON object, where each key is a relative or\nabsolute URI which serves as the name of a file, and the associated\nvalue provides the contents of the file. The following code shows\nthe general structure of this parameter.\n\n.. code-block:: json\n\n   { ...\n       \"files\": {\n           \"fileA.yaml\": \"Contents of the file\",\n           \"file:///usr/fileB.template\": \"Contents of the file\",\n           \"http://example.com/fileC.template\": \"Contents of the file\"\n       }\n   ...\n   }\n\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n\n   {\n   \u00a0\u00a0\u00a0\"files\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n   \u00a0\u00a0\u00a0},\n      ...,\n   \u00a0\u00a0\u00a0\"stack_name\": \"teststack\",\n   \u00a0\u00a0\u00a0\"template\": {\n         ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"resources\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"my_server\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"OS::Nova::Server\",\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"properties\": {\n                  ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"user_data\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"get_file\": \"myfile\"\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0},\n   \u00a0\u00a0\u00a0\"timeout_mins\": 60\n   }\n\nDo not use this parameter to provide the content of the template\nlocated at the ``template_url`` address. Instead, use the\n``template`` parameter to supply the template content as part of\nthe request.", 
          "format": "", 
          "type": "object"
        }, 
        "parameters": {
          "description": "This parameter supplies updated arguments for parameters defined in\nthe stack template.\n\nThe value is a JSON object, where each key is the name of a\nparameter defined in the template and the associated value is the\nargument to use for that parameter when instantiating the template.\nThe following code shows the general structure of this parameter.\nIn the example, ``a`` and ``b`` are the names of two parameters\ndefined in the template.\n\n.. code-block:: json\n\n   { ...\n                        \"parameters\": {\n                        \"a\": \"Value\",\n                        \"b\": \"3\"\n                        }\n                        ... }\n                  \n\nWhile the service accepts JSON numbers for parameters with the type\n``number`` and JSON objects for parameters with the type ``json``,\nall parameter values are converted to their string representation\nfor storage in the created Stack. Clients are encouraged to send\nall parameter values using their string representation for\nconsistency between requests and responses from the Orchestration\nservice.\n\nYou must specify a value for each template parameter that does not\nhave a default value. However, this parameter cannot contain JSON\nproperties with names that do not match a parameter that is defined\nin the template.", 
          "format": "", 
          "type": "object"
        }, 
        "tags": {
          "description": "One or more simple string tags to associate with the stack. To\nassociate multiple tags with a stack, separate the tags with\ncommas. For example, ``tag1,tag2``.", 
          "format": "", 
          "type": "string"
        }, 
        "template": {
          "description": "The stack template on which to perform the operation.\n\nThis parameter is always provided as a ``string`` in the JSON\nrequest body. The content of the string is a JSON- or YAML-\nformatted Orchestration template. For example:\n\n.. code-block:: json\n\n   \"template\": {\n       \"heat_template_version\": \"2013-05-23\",\n       ...}\n\nThis parameter is required only when you omit the ``template_url``\nparameter. If you specify both parameters, this value overrides the\n``template_url`` parameter value.", 
          "format": "", 
          "type": "object"
        }, 
        "template_url": {
          "description": "A URI to the location containing the stack template on which to\nperform the operation.\n\nSee the description of the ``template`` parameter for information\nabout the expected template content located at the URI.\n\nThis parameter is only required when you omit the ``template``\nparameter. If you specify both parameters, this parameter is\nignored.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout_mins": {
          "description": "The timeout for stack creation in minutes.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "stack_update_preview": {
      "example": {
        "application/json": {
          "parameters": {
            "flavor": "m1.small"
          }, 
          "template": {
            "description": "Create a simple stack", 
            "heat_template_version": "2013-05-23", 
            "parameters": {
              "flavor": {
                "default": "m1.tiny", 
                "type": "string"
              }
            }, 
            "resources": {
              "hello_world": {
                "properties": {
                  "flavor": {
                    "get_param": "flavor"
                  }, 
                  "image": "40be8d1a-3eb9-40de-8abd-43237517384f", 
                  "key_name": "heat_key", 
                  "user_data": "#!/bin/bash -xv\necho \"hello world\" > /root/hello-world.txt\n"
                }, 
                "type": "OS::Nova::Server"
              }
            }
          }
        }
      }, 
      "properties": {
        "environment": {
          "description": "A JSON environment for the stack.", 
          "format": "", 
          "type": "object"
        }, 
        "files": {
          "description": "Supplies the contents of files referenced in the template or the\nenvironment. Stack templates and resource templates can explicitly\nreference files by using the ``get_file`` intrinsic function. In\naddition, the ``environment`` parameter can contain implicit\nreferences to files.\n\nThe value is a JSON object, where each key is a relative or\nabsolute URI which serves as the name of a file, and the associated\nvalue provides the contents of the file. The following code shows\nthe general structure of this parameter.\n\n.. code-block:: json\n\n   { ...\n       \"files\": {\n           \"fileA.yaml\": \"Contents of the file\",\n           \"file:///usr/fileB.template\": \"Contents of the file\",\n           \"http://example.com/fileC.template\": \"Contents of the file\"\n       }\n   ...\n   }\n\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n\n   {\n   \u00a0\u00a0\u00a0\"files\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n   \u00a0\u00a0\u00a0},\n      ...,\n   \u00a0\u00a0\u00a0\"stack_name\": \"teststack\",\n   \u00a0\u00a0\u00a0\"template\": {\n         ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"resources\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"my_server\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"OS::Nova::Server\",\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"properties\": {\n                  ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"user_data\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"get_file\": \"myfile\"\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0},\n   \u00a0\u00a0\u00a0\"timeout_mins\": 60\n   }\n\nDo not use this parameter to provide the content of the template\nlocated at the ``template_url`` address. Instead, use the\n``template`` parameter to supply the template content as part of\nthe request.", 
          "format": "", 
          "type": "object"
        }, 
        "parameters": {
          "description": "Supplies updated arguments for parameters that are defined in the\nstack template.\n\nThe value is a JSON object, where each key is the name of a\nparameter defined in the template and the associated value is the\nargument to use for that parameter when instantiating the template.\nThe following code shows the general structure of this parameter.\nIn the example, ``a`` and ``b`` are the names of two parameters\ndefined in the template.\n\n.. code-block:: json\n\n   { ...\n                         \"parameters\": {\n                         \"a\": \"Value\",\n                         \"b\": \"3\"\n                         }\n                         ... }\n                     \n\nWhile the service accepts JSON numbers for parameters with the type\n``number`` and JSON objects for parameters with the type ``json``,\nall parameter values are converted to their string representation\nfor storage in the created Stack. Clients are encouraged to send\nall parameter values using their string representation for\nconsistency between requests and responses from the Orchestration\nservice.\n\nYou must specify a value for each template parameter that does not\nhave a default value. However, this parameter cannot contain JSON\nproperties with names that do not match a parameter that is defined\nin the template.", 
          "format": "", 
          "type": "object"
        }, 
        "tags": {
          "description": "One or more simple string tags to associate with the stack. To\nassociate multiple tags with a stack, separate the tags with\ncommas. For example, ``tag1,tag2``.", 
          "format": "", 
          "type": "string"
        }, 
        "template": {
          "description": "The stack template on which to perform the operation.\n\nThis parameter is always provided as a ``string`` in the JSON\nrequest body. The content of the string is a JSON- or YAML-\nformatted Orchestration template. For example:\n\n.. code-block:: json\n\n   \"template\": {\n       \"heat_template_version\": \"2013-05-23\",\n       ...}\n\nThis parameter is required only when you omit the ``template_url``\nparameter. If you specify both parameters, this value overrides the\n``template_url`` parameter value.", 
          "format": "", 
          "type": "object"
        }, 
        "template_url": {
          "description": "A URI to the location containing the stack template on which to\nperform the operation.\n\nSee the description of the ``template`` parameter for information\nabout the expected template content located at the URI.\n\nThis parameter is only required when you omit the ``template``\nparameter. If you specify both parameters, this parameter is\nignored.", 
          "format": "", 
          "type": "string"
        }, 
        "timeout_mins": {
          "description": "The timeout for stack creation in minutes.", 
          "format": "", 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "template_validate": {
      "example": {
        "application/json": {
          "template_url": "/PATH_TO_HEAT_TEMPLATES/WordPress_Single_Instance.template"
        }
      }, 
      "properties": {
        "environment": {
          "description": "A JSON environment for the stack.", 
          "format": "", 
          "type": "object"
        }, 
        "template": {
          "description": "The stack template on which to perform the operation.\n\nThis parameter is always provided as a ``string`` in the JSON\nrequest body. The content of the string is a JSON- or YAML-\nformatted Orchestration template. For example:\n\n.. code-block:: json\n\n   \"template\": {\n       \"heat_template_version\": \"2013-05-23\",\n       ...}\n\nThis parameter is required only when you omit the ``template_url``\nparameter. If you specify both parameters, this value overrides the\n``template_url`` parameter value.", 
          "format": "", 
          "type": "object"
        }, 
        "template_url": {
          "description": "A URI to the location containing the stack template on which to\nperform the operation.\n\nSee the description of the ``template`` parameter for information\nabout the expected template content located at the URI.\n\nThis parameter is only required when you omit the ``template``\nparameter. If you specify both parameters, this parameter is\nignored.", 
          "format": "", 
          "type": "string"
        }
      }, 
      "required": [
        "template"
      ], 
      "type": "object"
    }, 
    "template_validate_200": {
      "properties": {
        "Description": {
          "description": "The description specified in the template.", 
          "format": "", 
          "type": "string"
        }, 
        "ParameterGroups": {
          "description": "A list of parameter groups. Each group contains a list of parameter\nnames.", 
          "format": "", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "Parameters": {
          "description": "An object that defines all input parameters that are defined in the\ntemplate. Indexed by parameter name.", 
          "format": "", 
          "type": "object"
        }
      }, 
      "required": [
        "Description", 
        "Parameters"
      ], 
      "type": "object"
    }
  }, 
  "externalDocs": {
    "description": "OpenStack Docs", 
    "url": "http://docs.openstack.org"
  }, 
  "host": "developer.openstack.org", 
  "info": {
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "title": "Orchestration", 
    "version": "v1", 
    "x-service": "orchestration"
  }, 
  "paths": {
    "/": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "listVersions-heat-v1", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "versions": [
                  {
                    "id": "v1.0", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:8000/v1/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "CURRENT"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all Orchestration API versions.", 
        "tags": [
          "heat-versions"
        ], 
        "x-title": "List versions"
      }
    }, 
    "/v1/{tenant_id}/build_info": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "build_info_show", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "api": {
                  "revision": "{api_build_revision}"
                }, 
                "engine": {
                  "revision": "{engine_build_revision}"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows build information for an Orchestration deployment.", 
        "tags": [
          "build-info"
        ], 
        "x-title": "Show build information"
      }
    }, 
    "/v1/{tenant_id}/resource_types": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "resource_type_list", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by a resource type name. You can set this\nvalue to a regular expression. Use this filter multiple times to\nfilter by multiple names.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by resource types by heat version. For\nexample, ``2016.1`` or ``5.0.0``. Use this filter multiple times to\nfilter by multiple versions.", 
            "format": "", 
            "in": "query", 
            "name": "version", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the response by resource types by a support status. Valid\nsupport status values are ``UNKNOWN``, ``SUPPORTED``,\n``DEPRECATED``, ``UNSUPPORTED``, and ``HIDDEN``. Use this filter\nmultiple times to filter by multiple support statuses.", 
            "format": "", 
            "in": "query", 
            "name": "support_status", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "resource_types": [
                  "AWS::EC2::Instance", 
                  "OS::Heat::ScalingPolicy", 
                  "AWS::CloudFormation::Stack", 
                  "OS::Keystone::Group", 
                  "OS::Glance::Image", 
                  "AWS::EC2::Volume", 
                  "OS::Heat::SoftwareDeployment", 
                  "AWS::AutoScaling::ScalingPolicy", 
                  "AWS::EC2::InternetGateway", 
                  "OS::Heat::SoftwareDeployments", 
                  "AWS::EC2::VolumeAttachment", 
                  "AWS::CloudFormation::WaitConditionHandle", 
                  "OS::Cinder::VolumeAttachment", 
                  "OS::Cinder::EncryptedVolumeType", 
                  "OS::Heat::AutoScalingGroup", 
                  "OS::Nova::FloatingIP", 
                  "OS::Heat::HARestarter", 
                  "OS::Keystone::Project", 
                  "OS::Keystone::Endpoint", 
                  "OS::Heat::InstanceGroup", 
                  "AWS::CloudWatch::Alarm", 
                  "AWS::AutoScaling::AutoScalingGroup", 
                  "OS::Heat::CloudConfig", 
                  "OS::Heat::SoftwareComponent", 
                  "OS::Cinder::Volume", 
                  "OS::Keystone::Service", 
                  "OS::Heat::WaitConditionHandle", 
                  "OS::Heat::SoftwareConfig", 
                  "AWS::CloudFormation::WaitCondition", 
                  "OS::Heat::StructuredDeploymentGroup", 
                  "OS::Heat::RandomString", 
                  "OS::Heat::SoftwareDeploymentGroup", 
                  "OS::Nova::KeyPair", 
                  "OS::Heat::MultipartMime", 
                  "OS::Heat::UpdateWaitConditionHandle", 
                  "OS::Nova::Server", 
                  "AWS::IAM::AccessKey", 
                  "AWS::EC2::SecurityGroup", 
                  "AWS::EC2::EIPAssociation", 
                  "AWS::EC2::EIP", 
                  "OS::Heat::AccessPolicy", 
                  "AWS::IAM::User", 
                  "OS::Heat::WaitCondition", 
                  "OS::Heat::StructuredDeployment", 
                  "AWS::RDS::DBInstance", 
                  "AWS::AutoScaling::LaunchConfiguration", 
                  "OS::Heat::Stack", 
                  "OS::Nova::FloatingIPAssociation", 
                  "OS::Heat::ResourceGroup", 
                  "OS::Heat::StructuredConfig", 
                  "OS::Nova::ServerGroup", 
                  "OS::Heat::StructuredDeployments", 
                  "OS::Keystone::Role", 
                  "OS::Keystone::User", 
                  "AWS::ElasticLoadBalancing::LoadBalancer", 
                  "OS::Nova::Flavor", 
                  "OS::Cinder::VolumeType"
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/resource_type_list_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all supported template resource types.", 
        "tags": [
          "stack-templates"
        ], 
        "x-title": "List resource types"
      }
    }, 
    "/v1/{tenant_id}/resource_types/{type_name}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "A schema describes the properties that can be set on the resource,\ntheir types, constraints, descriptions, and default values.\nAdditionally, the response shows the resource attributes and their\ndescriptions.", 
        "operationId": "resource_type_get", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of a resource type.", 
            "format": "", 
            "in": "path", 
            "name": "type_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "attributes": {
                  "an_attribute": {
                    "description": "A runtime value of the resource."
                  }
                }, 
                "properties": {
                  "a_property": {
                    "constraints": [
                      {
                        "description": "Must be between 1 and 255 characters", 
                        "length": {
                          "max": 255, 
                          "min": 1
                        }
                      }
                    ], 
                    "description": "A resource description.", 
                    "required": true, 
                    "type": "string", 
                    "update_allowed": false
                  }
                }, 
                "resource_type": "OS::Heat::AResourceName", 
                "support_status": {
                  "message": "A status message", 
                  "status": "SUPPORTED", 
                  "version": "2014.1"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/resource_type_get_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows the interface schema for a resource type.", 
        "tags": [
          "stack-templates"
        ], 
        "x-title": "Show resource schema"
      }
    }, 
    "/v1/{tenant_id}/resource_types/{type_name}/template": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "The returned template contains a single resource type. Each\nresource property is mapped to a template parameter and each\nresource attribute is mapped to a template output.\n\nYou can use these templates as a starting place for creating\ncustomized, template-based resources or as examples of using the\nparticular resource in another template.\n\nUse the ``template_type`` query parameter to specify the resource\ntemplate type. Default type is ``cfn``. The ``hot`` template type\nis supported. For example:\n\n::\n\n   /v1/{tenant_id}/resource_types/{type_name}/template?template_type=cfn", 
        "operationId": "resource_type_template", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of a resource type.", 
            "format": "", 
            "in": "path", 
            "name": "type_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "HeatTemplateFormatVersion": "2012-12-12", 
                "Outputs": {
                  "private_key": {
                    "Description": "The private key if it has been saved.", 
                    "Value": "{\"Fn::GetAtt\": [\"KeyPair\", \"private_key\"]}"
                  }, 
                  "public_key": {
                    "Description": "The public key.", 
                    "Value": "{\"Fn::GetAtt\": [\"KeyPair\", \"public_key\"]}"
                  }
                }, 
                "Parameters": {
                  "name": {
                    "Description": "The name of the key pair.", 
                    "Type": "String"
                  }, 
                  "public_key": {
                    "Description": "The optional public key. This allows users to supply the public key from a pre-existing key pair. If not supplied, a new key pair will be generated.", 
                    "Type": "String"
                  }, 
                  "save_private_key": {
                    "AllowedValues": [
                      true, 
                      "true", 
                      false, 
                      "false"
                    ], 
                    "Default": false, 
                    "Description": "true if the system should remember a generated private key; false otherwise.", 
                    "Type": "String"
                  }
                }, 
                "Resources": {
                  "KeyPair": {
                    "Properties": {
                      "name": {
                        "Ref": "name"
                      }, 
                      "public_key": {
                        "Ref": "public_key"
                      }, 
                      "save_private_key": {
                        "Ref": "save_private_key"
                      }
                    }, 
                    "Type": "OS::Nova::KeyPair"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/resource_type_template_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows the template representation for a resource type.", 
        "tags": [
          "stack-templates"
        ], 
        "x-title": "Show resource template"
      }
    }, 
    "/v1/{tenant_id}/services": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Orchestration engine details include ``engine_id``, topic name,\nlast updated time, health status, and host name.\n\nTroubleshooting\n\n- A ``503`` error code indicates that the heat engines are not\n  operational. Run the heat-manage service list command or contact\n  your cloud provider to determine why the heat engines are not\n  operational.", 
        "operationId": "service_status_list", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "services": [
                  {
                    "binary": "heat-engine", 
                    "created_at": "2015-02-03T05:55:59.000000", 
                    "deleted_at": null, 
                    "engine_id": "9d9242c3-4b9e-45e1-9e74-7615fbf20e5d", 
                    "host": "engine-1", 
                    "hostname": "mrkanag", 
                    "id": "e1908f44-42f9-483f-b778-bc814072c33d", 
                    "report_interval": 60, 
                    "status": "up", 
                    "topic": "engine", 
                    "updated_at": "2015-02-03T05:57:59.000000"
                  }, 
                  {
                    "binary": "heat-engine", 
                    "created_at": "2015-02-03T06:03:14.000000", 
                    "deleted_at": null, 
                    "engine_id": "2d2434bf-adb6-4453-9c6b-b22fb8bd2306", 
                    "host": "engine", 
                    "hostname": "mrkanag", 
                    "id": "582b5657-6db7-48ad-8483-0096350faa21", 
                    "report_interval": 60, 
                    "status": "down", 
                    "topic": "engine", 
                    "updated_at": "2015-02-03T06:09:55.000000"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "403": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/service_status_list_403"
            }
          }, 
          "503": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Enables administrative users to view details for all orchestration engines.", 
        "tags": [
          "service-status"
        ], 
        "x-title": "Show orchestration engine status"
      }
    }, 
    "/v1/{tenant_id}/software_configs": {
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "software_config_create", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/software_config_create"
            }
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "software_config": {
                  "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2", 
                  "creation_time": "2015-01-31T15:12:36Z", 
                  "group": "script", 
                  "id": "ddee7aca-aa32-4335-8265-d436b20db4f1", 
                  "inputs": [
                    {
                      "default": null, 
                      "description": null, 
                      "name": "foo", 
                      "type": "String"
                    }, 
                    {
                      "default": null, 
                      "description": null, 
                      "name": "bar", 
                      "type": "String"
                    }
                  ], 
                  "name": "a-config-we5zpvyu7b5o", 
                  "options": null, 
                  "outputs": [
                    {
                      "description": null, 
                      "error_output": false, 
                      "name": "result", 
                      "type": "String"
                    }
                  ]
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/software_config_create_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a software configuration.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "Create configuration"
      }
    }, 
    "/v1/{tenant_id}/software_configs/{config_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "software_config_delete", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the configuration.", 
            "format": "", 
            "in": "path", 
            "name": "config_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a software configuration.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "Delete config"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "software_config_show", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the configuration.", 
            "format": "", 
            "in": "path", 
            "name": "config_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "software_config": {
                  "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2", 
                  "creation_time": "2015-01-31T15:12:36Z", 
                  "group": "script", 
                  "id": "ddee7aca-aa32-4335-8265-d436b20db4f1", 
                  "inputs": [
                    {
                      "default": null, 
                      "description": null, 
                      "name": "foo", 
                      "type": "String"
                    }, 
                    {
                      "default": null, 
                      "description": null, 
                      "name": "bar", 
                      "type": "String"
                    }
                  ], 
                  "name": "a-config-we5zpvyu7b5o", 
                  "options": null, 
                  "outputs": [
                    {
                      "description": null, 
                      "error_output": false, 
                      "name": "result", 
                      "type": "String"
                    }
                  ]
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/software_config_show_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a software configuration.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "Show configuration details"
      }
    }, 
    "/v1/{tenant_id}/software_deployments": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "software_deployment_index", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "software_deployments": [
                  {
                    "action": "CREATE", 
                    "config_id": "8da95794-2ad9-4979-8ae5-739ce314c5cd", 
                    "creation_time": "2015-01-31T15:12:36Z", 
                    "id": "ef422fa5-719a-419e-a10c-72e3a367b0b8", 
                    "input_values": null, 
                    "output_values": {
                      "deploy_status_code": 0, 
                      "deploy_stderr": "+ echo Writing to /tmp/barmy\n+ echo fu\n+ cat /tmp/barmy\n+ echo -n The file /tmp/barmy contains fu for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE\n+ echo Written to /tmp/barmy\n+ echo Output to stderr\nOutput to stderr\n", 
                      "deploy_stdout": "Writing to /tmp/barmy\nWritten to /tmp/barmy\n", 
                      "result": "The file /tmp/barmy contains fu for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE"
                    }, 
                    "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5", 
                    "status": "COMPLETE", 
                    "status_reason": "Outputs received", 
                    "updated_time": "2015-01-31T15:18:21Z"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/software_deployment_index_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all available software deployments.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "List deployments"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "software_deployment_create", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/software_deployment_create"
            }
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "software_deployment": {
                  "action": "CREATE", 
                  "config_id": "8da95794-2ad9-4979-8ae5-739ce314c5cd", 
                  "creation_time": "2015-01-31T15:12:36Z", 
                  "id": "ef422fa5-719a-419e-a10c-72e3a367b0b8", 
                  "input_values": null, 
                  "output_values": null, 
                  "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5", 
                  "status": "IN_PROGRESS", 
                  "status_reason": "Deploy data available", 
                  "updated_time": "2015-01-31T15:18:21Z"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/software_deployment_create_200"
            }
          }
        }, 
        "summary": "Creates a software deployment.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "Create deployment"
      }
    }, 
    "/v1/{tenant_id}/software_deployments/metadata/{server_id}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Use the ``group`` property to specify the configuration hook to\nwhich the pass the metadata item.", 
        "operationId": "software_deployment_metadata", 
        "parameters": [
          {
            "description": "The UUID of the server for which to fetch configuration metadata.", 
            "format": "", 
            "in": "path", 
            "name": "server_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "metadata": [
                  {
                    "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2", 
                    "creation_time": "2015-01-31T15:12:36Z", 
                    "group": "script", 
                    "id": "3d5ec2a8-7004-43b6-a7f6-542bdbe9d434", 
                    "inputs": [
                      {
                        "default": null, 
                        "description": null, 
                        "name": "foo", 
                        "type": "String", 
                        "value": "fooooo"
                      }, 
                      {
                        "default": null, 
                        "description": null, 
                        "name": "bar", 
                        "type": "String", 
                        "value": "baaaaa"
                      }, 
                      {
                        "description": "ID of the server being deployed to", 
                        "name": "deploy_server_id", 
                        "type": "String", 
                        "value": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5"
                      }, 
                      {
                        "description": "Name of the current action being deployed", 
                        "name": "deploy_action", 
                        "type": "String", 
                        "value": "CREATE"
                      }, 
                      {
                        "description": "ID of the stack this deployment belongs to", 
                        "name": "deploy_stack_id", 
                        "type": "String", 
                        "value": "a/9bd57090-8954-48ab-bab9-adf9e1ac70fc"
                      }, 
                      {
                        "description": "Name of this deployment resource in the stack", 
                        "name": "deploy_resource_name", 
                        "type": "String", 
                        "value": "deployment"
                      }, 
                      {
                        "description": "ID of signal to use for signalling output values", 
                        "name": "deploy_signal_id", 
                        "type": "String", 
                        "value": "http://192.168.20.103:8000/v1/signal/arn%3Aopenstack%3Aheat%3A%3Ae2a84fbdaeb047ae8da4b503f3b69f1f%3Astacks%2Fa%2F9bd57090-8954-48ab-bab9-adf9e1ac70fc%2Fresources%2Fdeployment?Timestamp=2014-03-19T20%3A30%3A59Z&SignatureMethod=HmacSHA256&AWSAccessKeyId=ca3571413e4a49998d580215517b3685&SignatureVersion=2&Signature=w6Iu%2BNbg86mqwSOUf1GLuKPO7KaD82PiGpL4ig9Q1l4%3D"
                      }
                    ], 
                    "name": "a-config-we5zpvyu7b5o", 
                    "options": null, 
                    "outputs": [
                      {
                        "description": null, 
                        "error_output": false, 
                        "name": "result", 
                        "type": "String"
                      }
                    ], 
                    "updated_time": "2015-01-31T15:18:21Z"
                  }, 
                  {
                    "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2", 
                    "creation_time": "2015-01-31T16:14:13Z", 
                    "group": "script", 
                    "id": "8da95794-2ad9-4979-8ae5-739ce314c5cd", 
                    "inputs": [
                      {
                        "default": null, 
                        "description": null, 
                        "name": "foo", 
                        "type": "String", 
                        "value": "fu"
                      }, 
                      {
                        "default": null, 
                        "description": null, 
                        "name": "bar", 
                        "type": "String", 
                        "value": "barmy"
                      }, 
                      {
                        "description": "ID of the server being deployed to", 
                        "name": "deploy_server_id", 
                        "type": "String", 
                        "value": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5"
                      }, 
                      {
                        "description": "Name of the current action being deployed", 
                        "name": "deploy_action", 
                        "type": "String", 
                        "value": "CREATE"
                      }, 
                      {
                        "description": "ID of the stack this deployment belongs to", 
                        "name": "deploy_stack_id", 
                        "type": "String", 
                        "value": "a/9bd57090-8954-48ab-bab9-adf9e1ac70fc"
                      }, 
                      {
                        "description": "Name of this deployment resource in the stack", 
                        "name": "deploy_resource_name", 
                        "type": "String", 
                        "value": "other_deployment"
                      }, 
                      {
                        "description": "ID of signal to use for signalling output values", 
                        "name": "deploy_signal_id", 
                        "type": "String", 
                        "value": "http://192.168.20.103:8000/v1/signal/arn%3Aopenstack%3Aheat%3A%3Ae2a84fbdaeb047ae8da4b503f3b69f1f%3Astacks%2Fa%2F9bd57090-8954-48ab-bab9-adf9e1ac70fc%2Fresources%2Fother_deployment?Timestamp=2014-03-19T20%3A30%3A59Z&SignatureMethod=HmacSHA256&AWSAccessKeyId=7b761482f8254946bcd3d5ccb36fe939&SignatureVersion=2&Signature=giMfv%2BhrAw6y%2FCMKQIQz2IhO5PkAj5%2BfP5YsL6rul3o%3D"
                      }
                    ], 
                    "name": "a-config-we5zpvyu7b5o", 
                    "options": null, 
                    "outputs": [
                      {
                        "description": null, 
                        "error_output": false, 
                        "name": "result", 
                        "type": "String"
                      }
                    ], 
                    "updated_time": "2015-01-31T16:18:19Z"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows the deployment configuration metadata for a server.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "Show server configuration metadata"
      }
    }, 
    "/v1/{tenant_id}/software_deployments/{deployment_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "software_deployment_delete", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the deployment.", 
            "format": "", 
            "in": "path", 
            "name": "deployment_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a software deployment.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "Delete deployment"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "software_deployment_show", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the deployment.", 
            "format": "", 
            "in": "path", 
            "name": "deployment_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "software_deployment": {
                  "action": "CREATE", 
                  "config_id": "3d5ec2a8-7004-43b6-a7f6-542bdbe9d434", 
                  "creation_time": "2015-01-31T15:12:36Z", 
                  "id": "06e87bcc-33a2-4bce-aebd-533e698282d3", 
                  "input_values": null, 
                  "output_values": null, 
                  "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5", 
                  "status": "IN_PROGRESS", 
                  "status_reason": "Deploy data available", 
                  "updated_time": "2015-01-31T15:18:21Z"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/software_deployment_show_200"
            }
          }
        }, 
        "summary": "Shows details for a software deployment.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "Show deployment details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "software_deployment_update", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/software_deployment_update"
            }
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the deployment.", 
            "format": "", 
            "in": "path", 
            "name": "deployment_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "software_deployment": {
                  "action": "CREATE", 
                  "config_id": "3d5ec2a8-7004-43b6-a7f6-542bdbe9d434", 
                  "creation_time": "2015-01-31T15:12:36Z", 
                  "id": "06e87bcc-33a2-4bce-aebd-533e698282d3", 
                  "input_values": null, 
                  "output_values": {
                    "deploy_status_code": 0, 
                    "deploy_stderr": "+ echo Writing to /tmp/baaaaa\n+ echo fooooo\n+ cat /tmp/baaaaa\n+ echo -n The file /tmp/baaaaa contains fooooo for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE\n+ echo Written to /tmp/baaaaa\n+ echo Output to stderr\nOutput to stderr\n", 
                    "deploy_stdout": "Writing to /tmp/baaaaa\nWritten to /tmp/baaaaa\n", 
                    "result": "The file /tmp/baaaaa contains fooooo for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE"
                  }, 
                  "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5", 
                  "status": "COMPLETE", 
                  "status_reason": "Outputs received", 
                  "updated_time": "2015-01-31T15:18:21Z"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/software_deployment_update_200"
            }
          }
        }, 
        "summary": "Updates a software deployment.", 
        "tags": [
          "software-config"
        ], 
        "x-title": "Update deployment"
      }
    }, 
    "/v1/{tenant_id}/stacks": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_list", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the stack list by a stack ID. Use this filter multiple\ntimes to filter by multiple IDs.", 
            "format": "", 
            "in": "query", 
            "name": "id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the stack list by a status. Use this filter multiple times\nto filter by multiple statuses.", 
            "format": "", 
            "in": "query", 
            "name": "status", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the stack list by a name. Use this filter multiple times to\nfilter by multiple names.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the stack list by an action. Use this filter multiple times\nto filter by multiple actions.", 
            "format": "", 
            "in": "query", 
            "name": "action", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the stack list by a tenant. Use this filter multiple times\nto filter by multiple tenants.", 
            "format": "", 
            "in": "query", 
            "name": "tenant", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the stack list by a user name. Use this filter multiple\ntimes to filter by multiple user names.", 
            "format": "", 
            "in": "query", 
            "name": "username", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the stack list by an owner ID, which is the ID of the\nparent stack of listed stack. Use this filter multiple times to\nfilter by multiple owner IDs.", 
            "format": "", 
            "in": "query", 
            "name": "owner_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Requests a page size of items. Returns a number of items up to a\nlimit value. Use the ``limit`` parameter to make an initial limited\nrequest and use the ID of the last-seen item from the response as\nthe ``marker`` parameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "The ID of the last-seen item. Use the ``limit`` parameter to make\nan initial limited request and use the ID of the last-seen item\nfrom the response as the ``marker`` parameter value in a subsequent\nlimited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Set to ``true`` to include deleted stacks in the list. Default is\n``false``, which excludes deleted stacks from the list.", 
            "format": "", 
            "in": "query", 
            "name": "show_deleted", 
            "required": false, 
            "type": "boolean"
          }, 
          {
            "description": "Set to ``true`` to include nested stacks in the list. Default is\n``false``, which excludes nested stacks from the list.", 
            "format": "", 
            "in": "query", 
            "name": "show_nested", 
            "required": false, 
            "type": "boolean"
          }, 
          {
            "description": "Sorts the stack list by ``stack_name``, ``stack_status``,\n``creation_time``, or ``updated_time`` key.", 
            "format": "", 
            "in": "query", 
            "name": "sort_keys", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Lists stacks that contain one or more simple string tags. To\nspecify multiple tags, separate the tags with commas. For example,\n``tag1,tag2``. The boolean AND expression is used to combine\nmultiple tags.", 
            "format": "", 
            "in": "query", 
            "name": "tags", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Lists stacks that contain one or more simple string tags. To\nspecify multiple tags, separate the tags with commas. For example,\n``tag1,tag2``. The boolean OR expression is used to combine\nmultiple tags.", 
            "format": "", 
            "in": "query", 
            "name": "tags_any", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Lists stacks that do not contain one or more simple string tags. To\nspecify multiple tags, separate the tags with commas. For example,\n``tag1,tag2``. The boolean AND expression is used to combine\nmultiple tags.", 
            "format": "", 
            "in": "query", 
            "name": "not_tags", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Lists stacks that do not contain one or more simple string tags. To\nspecify multiple tags, separate the tags with commas. For example,\n``tag1,tag2``. The boolean OR expression is used to combine\nmultiple tags.", 
            "format": "", 
            "in": "query", 
            "name": "not_tags_any", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The sort direction of the list. A valid value is ``asc``\n(ascending) or ``desc`` (descending).", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Set to ``true`` to include stacks from all tenants in the stack\nlist. Specify policy requirements in the Orchestration\n``policy.json`` file. Default is ``false``.", 
            "format": "", 
            "in": "query", 
            "name": "global_tenant", 
            "required": false, 
            "type": "boolean"
          }, 
          {
            "description": "Set to ``true`` to include a count key in the response. The count\nkey value is the number of stacks that match the query criteria.\nDefault is ``false``.", 
            "format": "", 
            "in": "query", 
            "name": "with_count", 
            "required": false, 
            "type": "boolean"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "stacks": [
                  {
                    "creation_time": "2014-06-03T20:59:46Z", 
                    "description": "sample stack", 
                    "id": "3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                    "links": [
                      {
                        "href": "http://192.168.123.200:8004/v1/eb1c63a4f77141548385f113a28f0f52/stacks/simple_stack/3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                        "rel": "self"
                      }
                    ], 
                    "stack_name": "simple_stack", 
                    "stack_status": "CREATE_COMPLETE", 
                    "stack_status_reason": "Stack CREATE completed successfully", 
                    "tags": "", 
                    "updated_time": ""
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_list_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists active stacks.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "List stack data"
      }, 
      "x-post-stack_adopt": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_adopt", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_adopt"
            }
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "stack": {
                  "id": "3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                  "links": [
                    {
                      "href": "http://192.168.123.200:8004/v1/eb1c63a4f77141548385f113a28f0f52/stacks/teststack/3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                      "rel": "self"
                    }
                  ]
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_adopt_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a stack from existing resources.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Adopt stack"
      }, 
      "x-post-stack_create": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_create", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_create"
            }
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "description": "", 
            "examples": {
              "application/json": {
                "stack": {
                  "id": "3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                  "links": [
                    {
                      "href": "http://192.168.123.200:8004/v1/eb1c63a4f77141548385f113a28f0f52/stacks/teststack/3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                      "rel": "self"
                    }
                  ]
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_create_201"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Creates a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Create stack"
      }
    }, 
    "/v1/{tenant_id}/stacks/preview": {
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_preview", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_preview"
            }
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "stack": {
                  "capabilities": [], 
                  "creation_time": "2015-01-31T15:12:36Z", 
                  "description": "HOT template for Nova Server resource.\n", 
                  "disable_rollback": true, 
                  "id": "None", 
                  "links": [
                    {
                      "href": "http://192.168.122.102:8004/v1/6e18cc2bdbeb48a5basad2dc499f6804/stacks/test_stack/None", 
                      "rel": "self"
                    }
                  ], 
                  "notification_topics": [], 
                  "parameters": {
                    "OS::project_id": "6e18cc2bdbeb48a5basad2dc499f6804", 
                    "OS::stack_id": "None", 
                    "OS::stack_name": "teststack", 
                    "admin_user": "cloud-user", 
                    "flavor": "m1.small", 
                    "image": "F20-cfg", 
                    "key_name": "heat_key", 
                    "server_name": "MyServer"
                  }, 
                  "parent": null, 
                  "resources": [
                    {
                      "attributes": {}, 
                      "description": "", 
                      "metadata": {}, 
                      "physical_resource_id": "", 
                      "properties": {
                        "description": "Ping and SSH", 
                        "name": "the_sg", 
                        "rules": [
                          {
                            "direction": "ingress", 
                            "ethertype": "IPv4", 
                            "port_range_max": null, 
                            "port_range_min": null, 
                            "protocol": "icmp", 
                            "remote_group_id": null, 
                            "remote_ip_prefix": null, 
                            "remote_mode": "remote_ip_prefix"
                          }, 
                          {
                            "direction": "ingress", 
                            "ethertype": "IPv4", 
                            "port_range_max": 65535, 
                            "port_range_min": 1, 
                            "protocol": "tcp", 
                            "remote_group_id": null, 
                            "remote_ip_prefix": null, 
                            "remote_mode": "remote_ip_prefix"
                          }, 
                          {
                            "direction": "ingress", 
                            "ethertype": "IPv4", 
                            "port_range_max": 65535, 
                            "port_range_min": 1, 
                            "protocol": "udp", 
                            "remote_group_id": null, 
                            "remote_ip_prefix": null, 
                            "remote_mode": "remote_ip_prefix"
                          }
                        ]
                      }, 
                      "required_by": [
                        "server1"
                      ], 
                      "resource_action": "INIT", 
                      "resource_identity": {
                        "path": "/resources/the_sg_res", 
                        "stack_id": "None", 
                        "stack_name": "teststack", 
                        "tenant": "6e18cc2bdbeb48a5b3cad2dc499f6804"
                      }, 
                      "resource_name": "the_sg_res", 
                      "resource_status": "COMPLETE", 
                      "resource_status_reason": "", 
                      "resource_type": "OS::Neutron::SecurityGroup", 
                      "stack_identity": {
                        "path": "", 
                        "stack_id": "None", 
                        "stack_name": "teststack", 
                        "tenant": "6e18cc2bdbeb48a5b3cad2dc499f6804"
                      }, 
                      "stack_name": "teststack", 
                      "updated_time": "2015-01-31T15:12:36Z"
                    }, 
                    {
                      "attributes": {
                        "accessIPv4": "", 
                        "accessIPv6": "", 
                        "addresses": "", 
                        "console_urls": "", 
                        "first_address": "", 
                        "instance_name": "", 
                        "name": "MyServer", 
                        "networks": "", 
                        "show": ""
                      }, 
                      "description": "", 
                      "metadata": {}, 
                      "physical_resource_id": "", 
                      "properties": {
                        "admin_pass": null, 
                        "admin_user": "cloud-user", 
                        "availability_zone": null, 
                        "block_device_mapping": null, 
                        "config_drive": null, 
                        "diskConfig": null, 
                        "flavor": "m1.small", 
                        "flavor_update_policy": "RESIZE", 
                        "image": "F20-cfg", 
                        "image_update_policy": "REPLACE", 
                        "key_name": "heat_key", 
                        "metadata": {
                          "ha_stack": "None"
                        }, 
                        "name": "MyServer", 
                        "networks": [
                          {
                            "fixed_ip": null, 
                            "network": "private", 
                            "port": null, 
                            "uuid": null
                          }
                        ], 
                        "personality": {}, 
                        "reservation_id": null, 
                        "scheduler_hints": null, 
                        "security_groups": [
                          "None"
                        ], 
                        "software_config_transport": "POLL_SERVER_CFN", 
                        "user_data": "", 
                        "user_data_format": "HEAT_CFNTOOLS"
                      }, 
                      "required_by": [], 
                      "resource_action": "INIT", 
                      "resource_identity": {
                        "path": "/resources/hello_world", 
                        "stack_id": "None", 
                        "stack_name": "teststack", 
                        "tenant": "6e18cc2bdbeb48a3433cad2dc499sdf32234"
                      }, 
                      "resource_name": "hello_world", 
                      "resource_status": "COMPLETE", 
                      "resource_status_reason": "", 
                      "resource_type": "OS::Nova::Server", 
                      "stack_identity": {
                        "path": "", 
                        "stack_id": "None", 
                        "stack_name": "teststack", 
                        "tenant": "6e18cc2bdbeb48a3433cad2dc499sdf32234"
                      }, 
                      "stack_name": "teststack", 
                      "updated_time": "2015-01-31T15:12:36Z"
                    }
                  ], 
                  "stack_name": "test_stack", 
                  "stack_owner": "admin", 
                  "template_description": "HOT template for Nova Server resource.\n", 
                  "timeout_mins": null, 
                  "updated_time": null
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_preview_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "409": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Previews a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Preview stack"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "Also works with verbs other than GET , so that you can perform PUT\nand DELETE operations on a current stack. Set your client to follow\nredirects. When redirecting, the request method should not change\nas defined in RFC2626. However, in many clients the default\nbehavior is to change the method to GET when you receive a ``302``\nresponse code because this behavior is ubiquitous in web browsers.", 
        "operationId": "stack_find", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "302": {
            "description": "", 
            "examples": {
              "application/json": {
                "stack": {
                  "capabilities": [], 
                  "creation_time": "2014-06-04T20:36:12Z", 
                  "description": "sample stack", 
                  "disable_rollback": true, 
                  "id": "5333af0c-cc26-47ee-ac3d-8784cefafbd7", 
                  "links": [
                    {
                      "href": "http://192.168.123.200:8004/v1/eb1c63a4f77141548385f113a28f0f52/stacks/simple_stack/5333af0c-cc26-47ee-ac3d-8784cefafbd7", 
                      "rel": "self"
                    }
                  ], 
                  "notification_topics": [], 
                  "outputs": [], 
                  "parameters": {
                    "OS::stack_id": "5333af0c-cc26-47ee-ac3d-8784cefafbd7", 
                    "OS::stack_name": "simple_stack"
                  }, 
                  "stack_name": "simple_stack", 
                  "stack_status": "CREATE_COMPLETE", 
                  "stack_status_reason": "Stack CREATE completed successfully", 
                  "template_description": "sample stack", 
                  "timeout_mins": null, 
                  "updated_time": null
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Finds the canonical URL for a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Find stack"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/events": {
      "get": {
        "consumes": [], 
        "description": "", 
        "operationId": "stack_events_find", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "302": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Finds the canonical URL for the event list of a stack.", 
        "tags": [
          "stack-events"
        ], 
        "x-title": "Find stack events"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/resources": {
      "get": {
        "consumes": [], 
        "description": "The canonical URL is returned for only non-deleted stacks. To fetch\nthe resource list for deleted stacks, use the following endpoint:\n\n::\n\n   /v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources", 
        "operationId": "stack_resources_find", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "302": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Finds the canonical URL for a resource list of a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Find stack resources"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "stack_delete", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a stack and its snapshots.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Delete stack"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_show", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "stack": {
                  "capabilities": [], 
                  "creation_time": "2014-06-03T20:59:46Z", 
                  "description": "sample stack", 
                  "disable_rollback": true, 
                  "id": "3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                  "links": [
                    {
                      "href": "http://192.168.123.200:8004/v1/eb1c63a4f77141548385f113a28f0f52/stacks/simple_stack/3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                      "rel": "self"
                    }
                  ], 
                  "notification_topics": [], 
                  "outputs": [], 
                  "parameters": {
                    "OS::project_id": "3ab5b02f-a01f-4f95-afa1-e254afc4a435", 
                    "OS::stack_id": "3095aefc-09fb-4bc7-b1f0-f21a304e864c", 
                    "OS::stack_name": "simple_stack"
                  }, 
                  "parent": "", 
                  "stack_name": "simple_stack", 
                  "stack_owner": "simple_username", 
                  "stack_status": "CREATE_COMPLETE", 
                  "stack_status_reason": "Stack CREATE completed successfully", 
                  "stack_user_project_id": "65728b74-cfe7-4f17-9c15-11d4f686e591", 
                  "tags": "", 
                  "template_description": "sample stack", 
                  "timeout_mins": "", 
                  "updated_time": ""
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_show_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Show stack details"
      }, 
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_update", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_update"
            }
          }, 
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "202": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Updates a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Update stack"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/abandon": {
      "delete": {
        "consumes": [
          "application/json"
        ], 
        "description": "This method can be disabled from the server side. If it is\ndisabled, this call throws an exception.", 
        "operationId": "stack_abandon", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "action": "CREATE", 
                "dry_run": true, 
                "id": "16934ca3-40e0-4fb2-a289-a700662ec05a", 
                "name": "g", 
                "resources": {
                  "server": {
                    "action": "CREATE", 
                    "metadata": {}, 
                    "name": "server", 
                    "resource_data": {}, 
                    "resource_id": "39d5dad7-7d7a-4cc8-bd84-851e9e2ff4ea", 
                    "status": "COMPLETE", 
                    "type": "OS::Nova::Server"
                  }
                }, 
                "status": "COMPLETE", 
                "template": {
                  "heat_template_version": "2013-05-23", 
                  "outputs": {
                    "instance_ip": {
                      "value": {
                        "str_replace": {
                          "params": {
                            "hostname": {
                              "get_attr": [
                                "server", 
                                "first_address"
                              ]
                            }, 
                            "username": "ec2-user"
                          }, 
                          "template": "ssh username@hostname"
                        }
                      }
                    }
                  }, 
                  "parameters": {
                    "flavor": {
                      "default": "m1.small", 
                      "type": "string"
                    }, 
                    "image": {
                      "default": "fedora-amd64", 
                      "type": "string"
                    }, 
                    "key_name": {
                      "default": "heat_key", 
                      "type": "string"
                    }
                  }, 
                  "resources": {
                    "server": {
                      "properties": {
                        "flavor": {
                          "get_param": "flavor"
                        }, 
                        "image": {
                          "get_param": "image"
                        }, 
                        "key_name": {
                          "get_param": "key_name"
                        }
                      }, 
                      "type": "OS::Nova::Server"
                    }
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a stack but leaves its resources intact, and returns data that describes the stack and its resources.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Abandon stack"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/actions": {
      "x-post-stack_action_cancel_update": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_action_cancel_update", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_action_cancel_update"
            }
          }, 
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Cancels a currently running update of a stack.", 
        "tags": [
          "stack-actions"
        ], 
        "x-title": "Cancel stack update"
      }, 
      "x-post-stack_action_check": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_action_check", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_action_check"
            }
          }, 
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Checks whether the resources are in expected states for a stack.", 
        "tags": [
          "stack-actions"
        ], 
        "x-title": "Check stack resources"
      }, 
      "x-post-stack_action_resume": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_action_resume", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_action_resume"
            }
          }, 
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Resumes a suspended stack.", 
        "tags": [
          "stack-actions"
        ], 
        "x-title": "Resume stack"
      }, 
      "x-post-stack_action_suspend": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_action_suspend", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_action_suspend"
            }
          }, 
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Suspends a stack.", 
        "tags": [
          "stack-actions"
        ], 
        "x-title": "Suspend stack"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/events": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_event_list", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the event list by a resource action. You can use this\nfilter multiple times to filter by multiple resource actions. Valid\nresource actions are ``ADOPT``, ``CHECK``, ``CREATE``, ``DELETE``,\n``INIT``, ``RESTORE``, ``RESUME``, ``ROLLBACK``, ``SNAPSHOT``,\n``SUSPEND``, and ``UPDATE``.", 
            "format": "", 
            "in": "query", 
            "name": "resource_action", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the event list by a resource status. You can use this\nfilter multiple times to filter by multiple resource statuses.\nValid resource statuses are ``COMPLETE``, ``FAILED``, and\n``IN_PROGRESS``.", 
            "format": "", 
            "in": "query", 
            "name": "resource_status", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the event list by a resource name. You can use this filter\nmultiple times to filter by multiple resource names.", 
            "format": "", 
            "in": "query", 
            "name": "resource_name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the event list by a resource type. You can use this filter\nmultiple times to filter by multiple resource types. Valid resource\ntypes include ``OS::Cinder::Volume``, ``OS::Nova::Server``,\n``OS::Neutron::Port``, and so on.", 
            "format": "", 
            "in": "query", 
            "name": "resource_type", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Requests a page size of items. Returns a number of items up to a\nlimit value. Use the ``limit`` parameter to make an initial limited\nrequest and use the ID of the last-seen item from the response as\nthe ``marker`` parameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "The ID of the last-seen item. Use the ``limit`` parameter to make\nan initial limited request and use the ID of the last-seen item\nfrom the response as the ``marker`` parameter value in a subsequent\nlimited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the list by the ``resource_type`` or ``created_at`` key.", 
            "format": "", 
            "in": "query", 
            "name": "sort_keys", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The sort direction of the list. A valid value is ``asc``\n(ascending) or ``desc`` (descending).", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "events": [
                  {
                    "event_time": "2014-07-23T08:14:47Z", 
                    "id": "474bfdf0-a450-46ec-a78a-0c7faa404073", 
                    "links": [
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/port/events/474bfdf0-a450-46ec-a78a-0c7faa404073", 
                        "rel": "self"
                      }, 
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/port", 
                        "rel": "resource"
                      }, 
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5", 
                        "rel": "stack"
                      }
                    ], 
                    "logical_resource_id": "port", 
                    "physical_resource_id": null, 
                    "resource_name": "port", 
                    "resource_status": "CREATE_FAILED", 
                    "resource_status_reason": "NotFound: Subnet f8a699d0-3537-429e-87a5-6b5a8d0c2bf0 could not be found"
                  }, 
                  {
                    "event_time": "2014-07-23T08:14:47Z", 
                    "id": "66fa95b6-e6f8-4f05-b1af-e828f5aba04c", 
                    "links": [
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/port/events/66fa95b6-e6f8-4f05-b1af-e828f5aba04c", 
                        "rel": "self"
                      }, 
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/port", 
                        "rel": "resource"
                      }, 
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5", 
                        "rel": "stack"
                      }
                    ], 
                    "logical_resource_id": "port", 
                    "physical_resource_id": null, 
                    "resource_name": "port", 
                    "resource_status": "CREATE_IN_PROGRESS", 
                    "resource_status_reason": "state changed"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists events for a stack.", 
        "tags": [
          "stack-events"
        ], 
        "x-title": "List stack events"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/outputs": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_list_outputs", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "outputs": [
                  {
                    "description": "output description", 
                    "output_error": null, 
                    "output_key": "output name", 
                    "output_value": "output value"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_list_outputs_200"
            }
          }
        }, 
        "summary": "Lists outputs for a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "List outputs"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/outputs/{output_key}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_show_output", 
        "parameters": [
          {
            "description": "The key of a stack output.", 
            "format": "", 
            "in": "path", 
            "name": "output_key", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "output": {
                  "description": "output description", 
                  "output_error": null, 
                  "output_key": "output_name", 
                  "output_value": "output_value"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_show_output_200"
            }
          }
        }, 
        "summary": "Shows details for a stack output.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Show output"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/preview": {
      "put": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_update_preview", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_update_preview"
            }
          }, 
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "added": [
                  {
                    "physical_resource_id": "{resource id or ''}", 
                    "resource_action": "CREATE", 
                    "resource_name": "", 
                    "resource_status": "COMPLETE", 
                    "resource_status_reason": "", 
                    "resource_type": "restype", 
                    "stack_identity": "{stack_id}", 
                    "stack_name": "{stack_name}", 
                    "updated_time": "datetime"
                  }
                ], 
                "deleted": [
                  {
                    "physical_resource_id": "{resource id or ''}", 
                    "resource_action": "CREATE", 
                    "resource_name": "", 
                    "resource_status": "COMPLETE", 
                    "resource_status_reason": "", 
                    "resource_type": "restype", 
                    "stack_identity": "{stack_id}", 
                    "stack_name": "{stack_name}", 
                    "updated_time": "datetime"
                  }
                ], 
                "replaced": [
                  {
                    "physical_resource_id": "{resource id or ''}", 
                    "resource_action": "CREATE", 
                    "resource_name": "", 
                    "resource_status": "COMPLETE", 
                    "resource_status_reason": "", 
                    "resource_type": "restype", 
                    "stack_identity": "{stack_id}", 
                    "stack_name": "{stack_name}", 
                    "updated_time": "datetime"
                  }
                ], 
                "unchanged": [
                  {
                    "physical_resource_id": "{resource id or ''}", 
                    "resource_action": "CREATE", 
                    "resource_name": "", 
                    "resource_status": "COMPLETE", 
                    "resource_status_reason": "", 
                    "resource_type": "restype", 
                    "stack_identity": "{stack_id}", 
                    "stack_name": "{stack_name}", 
                    "updated_time": "datetime"
                  }
                ], 
                "updated": [
                  {
                    "physical_resource_id": "{resource id or ''}", 
                    "resource_action": "CREATE", 
                    "resource_name": "", 
                    "resource_status": "COMPLETE", 
                    "resource_status_reason": "", 
                    "resource_type": "restype", 
                    "stack_identity": "{stack_id}", 
                    "stack_name": "{stack_name}", 
                    "updated_time": "datetime"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Previews an update for a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Preview stack update"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "resource_list", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Includes resources from nested stacks up to the ``nested_depth``\nlevels of recursion.", 
            "format": "", 
            "in": "query", 
            "name": "nested_depth", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Enables detailed resource information for each resource in list of\nresources.", 
            "format": "", 
            "in": "query", 
            "name": "with_detail", 
            "required": false, 
            "type": "boolean"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "resources": [
                  {
                    "creation_time": "2015-06-25T14:59:53", 
                    "links": [
                      {
                        "href": "http://hostname/v1/1234/stacks/mystack/629a32d0-ac4f-4f63-b58d-f0d047b1ba4c/resources/random_key_name", 
                        "rel": "self"
                      }, 
                      {
                        "href": "http://hostname/v1/1234/stacks/mystack/629a32d0-ac4f-4f63-b58d-f0d047b1ba4c", 
                        "rel": "stack"
                      }
                    ], 
                    "logical_resource_id": "random_key_name", 
                    "physical_resource_id": "mystack-random_key_name-pmjmy5pks735", 
                    "required_by": [], 
                    "resource_name": "random_key_name", 
                    "resource_status": "CREATE_COMPLETE", 
                    "resource_status_reason": "state changed", 
                    "resource_type": "OS::Heat::RandomString", 
                    "updated_time": "2015-06-25T14:59:53"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/resource_list_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists resources in a stack.", 
        "tags": [
          "stack-resources"
        ], 
        "x-title": "List resources"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "resource_show", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of a resource in the stack.", 
            "format": "", 
            "in": "path", 
            "name": "resource_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "resource": {
                  "attributes": {
                    "value": "I9S20uIp"
                  }, 
                  "creation_time": "2015-06-25T14:59:53", 
                  "description": "", 
                  "links": [
                    {
                      "href": "http://hostname/v1/1234/stacks/mystack/629a32d0-ac4f-4f63-b58d-f0d047b1ba4c/resources/random_key_name", 
                      "rel": "self"
                    }, 
                    {
                      "href": "http://hostname/v1/1234/stacks/mystack/629a32d0-ac4f-4f63-b58d-f0d047b1ba4c", 
                      "rel": "stack"
                    }
                  ], 
                  "logical_resource_id": "random_key_name", 
                  "physical_resource_id": "mystack-random_key_name-pmjmy5pks735", 
                  "required_by": [], 
                  "resource_name": "random_key_name", 
                  "resource_status": "CREATE_COMPLETE", 
                  "resource_status_reason": "state changed", 
                  "resource_type": "OS::Heat::RandomString", 
                  "updated_time": "2015-06-25T14:59:53"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/resource_show_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows data for a resource.", 
        "tags": [
          "stack-resources"
        ], 
        "x-title": "Show resource data"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}/events": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "resource_event_list", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of a resource in the stack.", 
            "format": "", 
            "in": "path", 
            "name": "resource_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filters the event list by a resource action. You can use this\nfilter multiple times to filter by multiple resource actions. Valid\nresource actions are ``ADOPT``, ``CHECK``, ``CREATE``, ``DELETE``,\n``INIT``, ``RESTORE``, ``RESUME``, ``ROLLBACK``, ``SNAPSHOT``,\n``SUSPEND``, and ``UPDATE``.", 
            "format": "", 
            "in": "query", 
            "name": "resource_action", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the event list by a resource status. You can use this\nfilter multiple times to filter by multiple resource statuses.\nValid resource statuses are ``COMPLETE``, ``FAILED``, and\n``IN_PROGRESS``.", 
            "format": "", 
            "in": "query", 
            "name": "resource_status", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters the event list by a resource type. You can use this filter\nmultiple times to filter by multiple resource types. Valid resource\ntypes include ``OS::Cinder::Volume``, ``OS::Nova::Server``,\n``OS::Neutron::Port``, and so on.", 
            "format": "", 
            "in": "query", 
            "name": "resource_type", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Requests a page size of items. Returns a number of items up to a\nlimit value. Use the ``limit`` parameter to make an initial limited\nrequest and use the ID of the last-seen item from the response as\nthe ``marker`` parameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "The ID of the last-seen item. Use the ``limit`` parameter to make\nan initial limited request and use the ID of the last-seen item\nfrom the response as the ``marker`` parameter value in a subsequent\nlimited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts the list by the ``resource_type`` or ``created_at`` key.", 
            "format": "", 
            "in": "query", 
            "name": "sort_keys", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The sort direction of the list. A valid value is ``asc``\n(ascending) or ``desc`` (descending).", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "events": [
                  {
                    "event_time": "2014-07-23T08:14:47Z", 
                    "id": "474bfdf0-a450-46ec-a78a-0c7faa404073", 
                    "links": [
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/port/events/474bfdf0-a450-46ec-a78a-0c7faa404073", 
                        "rel": "self"
                      }, 
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/port", 
                        "rel": "resource"
                      }, 
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5", 
                        "rel": "stack"
                      }
                    ], 
                    "logical_resource_id": "port", 
                    "physical_resource_id": null, 
                    "resource_name": "port", 
                    "resource_status": "CREATE_FAILED", 
                    "resource_status_reason": "NotFound: Subnet f8a699d0-3537-429e-87a5-6b5a8d0c2bf0 could not be found"
                  }, 
                  {
                    "event_time": "2014-07-23T08:14:47Z", 
                    "id": "66fa95b6-e6f8-4f05-b1af-e828f5aba04c", 
                    "links": [
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/port/events/66fa95b6-e6f8-4f05-b1af-e828f5aba04c", 
                        "rel": "self"
                      }, 
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/port", 
                        "rel": "resource"
                      }, 
                      {
                        "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/aws_port/db467ed1-50b5-4a3e-aeb1-396ff1d151c5", 
                        "rel": "stack"
                      }
                    ], 
                    "logical_resource_id": "port", 
                    "physical_resource_id": null, 
                    "resource_name": "port", 
                    "resource_status": "CREATE_IN_PROGRESS", 
                    "resource_status_reason": "state changed"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists events for a stack resource.", 
        "tags": [
          "stack-events"
        ], 
        "x-title": "List resource events"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}/events/{event_id}": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "event_show", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of a resource in the stack.", 
            "format": "", 
            "in": "path", 
            "name": "resource_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the event that is related to the resource in the stack.", 
            "format": "", 
            "in": "path", 
            "name": "event_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "event": {
                  "event_time": "2015-06-25T14:59:53", 
                  "id": "8db23e2e-72b2-47a2-9ed9-b52417f56e50", 
                  "links": [
                    {
                      "href": "http://hostname/v1/1234/stacks/mystack/56789/resources/random_key_name/events/8db23e2e-72b2-47a2-9ed9-b52417f56e50", 
                      "rel": "self"
                    }, 
                    {
                      "href": "http://hostname/v1/1234/stacks/mystack/56789/resources/random_key_name", 
                      "rel": "resource"
                    }, 
                    {
                      "href": "http://hostname/v1/1234/stacks/mystack/56789", 
                      "rel": "stack"
                    }
                  ], 
                  "logical_resource_id": "random_key_name", 
                  "physical_resource_id": null, 
                  "resource_name": "random_key_name", 
                  "resource_properties": {
                    "character_classes": null, 
                    "character_sequences": null, 
                    "length": 8, 
                    "salt": null, 
                    "sequence": null
                  }, 
                  "resource_status": "CREATE_IN_PROGRESS", 
                  "resource_status_reason": "state changed", 
                  "resource_type": "OS::Heat::RandomString"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows details for an event.", 
        "tags": [
          "stack-events"
        ], 
        "x-title": "Show event details"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}/metadata": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "resource_metadata", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of a resource in the stack.", 
            "format": "", 
            "in": "path", 
            "name": "resource_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "metadata": {
                  "some_key": "some_value", 
                  "some_other_key": "some_other_value"
                }
              }
            }, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Shows metadata for a resource.", 
        "tags": [
          "stack-resources"
        ], 
        "x-title": "Show resource metadata"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}/signal": {
      "post": {
        "consumes": [], 
        "description": "The contents of the request body depends on the resource to which\nyou send a signal.\n\nSome resources cannot receive signals. If you send them a signal,\nthey return a 400 error code.", 
        "operationId": "resource_signal", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The name of a resource in the stack.", 
            "format": "", 
            "in": "path", 
            "name": "resource_name", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Sends a signal to a resource.", 
        "tags": [
          "stack-resources"
        ], 
        "x-title": "Send a signal to a resource"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/snapshots": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_list_snapshot", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "snapshots": [
                  {
                    "creation_time": "2015-08-04T20:57:55Z", 
                    "data": null, 
                    "id": "7c4e1ef4-bf1b-41ab-a0c8-ce01f4ffdfa1", 
                    "name": "vol_snapshot", 
                    "status": "IN_PROGRESS", 
                    "status_reason": null
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_list_snapshot_200"
            }
          }
        }, 
        "summary": "Lists snapshots for a stack.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "List snapshots"
      }, 
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_snapshot", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/stack_snapshot"
            }
          }, 
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "creation_time": "2015-09-01T20:57:55Z", 
                "data": null, 
                "id": "13c3a4b5-0585-440e-85a4-6f96b20e7a78", 
                "name": "vol_snapshot", 
                "status": "IN_PROGRESS", 
                "status_reason": null
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_snapshot_200"
            }
          }
        }, 
        "summary": "Takes a snapshot of all resources in a stack. All snapshots are deleted when the stack is deleted.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Snapshot stack"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/snapshots/{snapshot_id}": {
      "delete": {
        "consumes": [], 
        "description": "", 
        "operationId": "stack_delete_snapshot", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the snapshot.", 
            "format": "", 
            "in": "path", 
            "name": "snapshot_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Deletes a stack snapshot.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Delete snapshot"
      }, 
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_show_snapshot", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the snapshot.", 
            "format": "", 
            "in": "path", 
            "name": "snapshot_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "snapshot": {
                  "creation_time": "2015-08-04T20:57:55Z", 
                  "data": {
                    "action": "SNAPSHOT", 
                    "environment": {
                      "parameters": {}, 
                      "resource_registry": {
                        "resources": {}
                      }
                    }, 
                    "id": "656452c2-e151-40da-8704-c844e69b485c", 
                    "name": "stack_vol1", 
                    "project_id": "ecdb08032cd042179692a1b148f6565e", 
                    "resources": {
                      "volume": {
                        "action": "SNAPSHOT", 
                        "metadata": {}, 
                        "name": "volume", 
                        "resource_data": {
                          "backup_id": "99108cf8-398f-461b-a043-bdceb7c9f572"
                        }, 
                        "resource_id": "3ab8cf79-807b-4c40-b743-0655f91e072f", 
                        "status": "COMPLETE", 
                        "type": "OS::Cinder::Volume"
                      }
                    }, 
                    "stack_user_project_id": "fffa11067b1c48129ddfb78fba2bf09f", 
                    "status": "COMPLETE", 
                    "template": {
                      "heat_template_version": "2013-05-23", 
                      "resources": {
                        "volume": {
                          "properties": {
                            "size": 1
                          }, 
                          "type": "OS::Cinder::Volume"
                        }
                      }
                    }
                  }, 
                  "id": "7c4e1ef4-bf1b-41ab-a0c8-ce01f4ffdfa1", 
                  "name": "vol_snapshot", 
                  "status": "COMPLETE", 
                  "status_reason": "Stack SNAPSHOT completed successfully"
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_show_snapshot_200"
            }
          }
        }, 
        "summary": "Shows details for a snapshot.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Show snapshot"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/snapshots/{snapshot_id}/restore": {
      "post": {
        "consumes": [], 
        "description": "You can restore only active stacks from a snapshot. You must\nrecreate deleted stacks.", 
        "operationId": "stack_restore_snapshot", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the snapshot.", 
            "format": "", 
            "in": "path", 
            "name": "snapshot_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "202": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Restores a stack snapshot.", 
        "tags": [
          "stacks"
        ], 
        "x-title": "Restore snapshot"
      }
    }, 
    "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/template": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "stack_template", 
        "parameters": [
          {
            "description": "The name of a stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_name", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The UUID of the stack.", 
            "format": "", 
            "in": "path", 
            "name": "stack_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "description": "Hello world HOT template that just defines a single server. Contains just base features to verify base HOT support.\n", 
                "heat_template_version": "2013-05-23", 
                "outputs": {
                  "foo": {
                    "description": "Show foo parameter value", 
                    "value": {
                      "get_param": "foo"
                    }
                  }
                }, 
                "parameters": {
                  "foo": {
                    "default": "secret", 
                    "description": "Name of an existing key pair to use for the server", 
                    "hidden": true, 
                    "type": "string"
                  }
                }, 
                "resources": {
                  "random_key_name": {
                    "properties": {
                      "length": 8
                    }, 
                    "type": "OS::Heat::RandomString"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/stack_template_200"
            }
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Gets a template for a stack.", 
        "tags": [
          "stack-templates"
        ], 
        "x-title": "Get stack template"
      }
    }, 
    "/v1/{tenant_id}/template_versions": {
      "get": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "template_version_list", 
        "parameters": [
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "template_versions": [
                  {
                    "type": "hot", 
                    "version": "heat_template_version.2014-10-16"
                  }, 
                  {
                    "type": "hot", 
                    "version": "heat_template_version.2015-04-30"
                  }, 
                  {
                    "type": "cfn", 
                    "version": "HeatTemplateFormatVersion.2012-12-12"
                  }, 
                  {
                    "type": "hot", 
                    "version": "heat_template_version.2015-10-15"
                  }, 
                  {
                    "type": "cfn", 
                    "version": "AWSTemplateFormatVersion.2010-09-09"
                  }, 
                  {
                    "type": "hot", 
                    "version": "heat_template_version.2013-05-23"
                  }, 
                  {
                    "type": "hot", 
                    "version": "heat_template_version.2016-04-08"
                  }
                ]
              }
            }, 
            "headers": {}, 
            "schema": {}
          }, 
          "400": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "401": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "404": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }, 
          "500": {
            "description": "", 
            "examples": {}, 
            "headers": {}, 
            "schema": {}
          }
        }, 
        "summary": "Lists all available template versions.", 
        "tags": [
          "stack-templates"
        ], 
        "x-title": "List template versions"
      }
    }, 
    "/v1/{tenant_id}/validate": {
      "post": {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "operationId": "template_validate", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/template_validate"
            }
          }, 
          {
            "description": "The UUID of the tenant. A tenant is also known as an account or\nproject.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "description": "", 
            "examples": {
              "application/json": {
                "Description": "A template that provides a single server instance.", 
                "ParameterGroups": [
                  {
                    "description": "My parameter groups", 
                    "label": "Parameter groups", 
                    "parameters": [
                      "param_name-1", 
                      "param_name-2"
                    ]
                  }
                ], 
                "Parameters": {
                  "key_name": {
                    "description": "Keypair name for SSH access to the server", 
                    "required": true, 
                    "type": "String"
                  }, 
                  "server-size": {
                    "constraints": [
                      {
                        "allowed_values": [
                          "512MB Standard Instance", 
                          "1GB Standard Instance", 
                          "4GB Standard Instance", 
                          "8GB Standard Instance"
                        ], 
                        "description": "Must be a valid server size."
                      }
                    ], 
                    "default": "1GB Standard Instance", 
                    "description": "Server size", 
                    "type": "String"
                  }, 
                  "server_name": {
                    "default": "My server", 
                    "description": "My server", 
                    "type": "String"
                  }
                }
              }
            }, 
            "headers": {}, 
            "schema": {
              "$ref": "#/definitions/template_validate_200"
            }
          }
        }, 
        "summary": "Validates a template.", 
        "tags": [
          "stack-templates"
        ], 
        "x-title": "Validate template"
      }
    }
  }, 
  "produces": [
    "application/json"
  ], 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "General API information", 
      "name": "general-info", 
      "x-summary": "Authenticated calls that target a known URI but that use an HTTP\nmethod that the implementation does not support return a ``405\nMethod Not Allowed`` error code. In addition, the HTTP ``OPTIONS``\nmethod is supported for each known URI. In both cases, the\n``Allow`` response header indicates the HTTP methods that are\nsupported for the resource."
    }, 
    {
      "description": "API versions", 
      "name": "heat-versions", 
      "x-summary": ""
    }, 
    {
      "description": "Stacks", 
      "name": "stacks", 
      "x-summary": ""
    }, 
    {
      "description": "Stack actions", 
      "name": "stack-actions", 
      "x-summary": "Performs non-lifecycle operations on the stack. Specify the action\nin the request body."
    }, 
    {
      "description": "Stack resources", 
      "name": "stack-resources", 
      "x-summary": ""
    }, 
    {
      "description": "Stack events", 
      "name": "stack-events", 
      "x-summary": ""
    }, 
    {
      "description": "Templates", 
      "name": "stack-templates", 
      "x-summary": ""
    }, 
    {
      "description": "Build info", 
      "name": "build-info", 
      "x-summary": ""
    }, 
    {
      "description": "Software configuration", 
      "name": "software-config", 
      "x-summary": ""
    }, 
    {
      "description": "Manage service", 
      "name": "service-status", 
      "x-summary": ""
    }
  ]
}